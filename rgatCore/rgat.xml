<?xml version="1.0"?>
<doc>
    <assembly>
        <name>rgat</name>
    </assembly>
    <members>
        <member name="T:rgat.APIDetailsWin">
            <summary>
            Handles loading and interaction with an API data file, for use 
            in the analysis tab to so how the trace interacted with the system
            </summary>
        </member>
        <member name="P:rgat.APIDetailsWin.Loaded">
            <summary>
            True if the API data file was loaded
            </summary>
        </member>
        <member name="M:rgat.APIDetailsWin.Load(System.String,System.IProgress{System.Single})">
            <summary>
            Load an API data file
            </summary>
            <param name="datapath">Fileystem path of the file</param>
            <param name="progress">Optional IProgress for file loading</param>
        </member>
        <member name="M:rgat.APIDetailsWin.FindAPIDatafile">
            <summary>
            Search for the API Data file
            </summary>
            <returns>Path of the file if found, otherwise null</returns>
        </member>
        <member name="T:rgat.APIDetailsWin.InteractionEffect">
            <summary>
            A base class for API interaction effects
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionEffect.TypeName">
            <summary>
            Needed for deserialisation
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.LinkReferenceEffect">
            <summary>
            The effect of this API is to create a reference to an entity
            Eg: Opening a file creates a handle which refers to a filepath
            </summary>
        </member>
        <member name="M:rgat.APIDetailsWin.LinkReferenceEffect.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a link reference effect for an API call
            </summary>
            <param name="entityIdx">Position of the entity parameter (-1 = return val, 0 = first param)</param>
            <param name="refIdx">Position of the reference parameter  (-1 = return val, 0 = first param)</param>
        </member>
        <member name="P:rgat.APIDetailsWin.LinkReferenceEffect.ReferenceIndex">
            <summary>
            The position of the parameter which is a reference to an entity
            </summary>
        </member>
        <member name="P:rgat.APIDetailsWin.LinkReferenceEffect.EntityIndex">
            <summary>
            The position of the parameter which is the entity that the reference will linked to
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.UseReferenceEffect">
            <summary>
            The effect of this API is to actually interact with an entity
            Eg: Writing to a file, sending network data to an IP address
            </summary>
        </member>
        <member name="M:rgat.APIDetailsWin.UseReferenceEffect.#ctor(System.Int32)">
            <summary>
            Create a reference usage effect
            </summary>
            <param name="refIdx">Position of the reference parameter  (-1 = return val, 0 = first param)</param>
        </member>
        <member name="P:rgat.APIDetailsWin.UseReferenceEffect.ReferenceIndex">
            <summary>
            The parameter index of the entity reference that is interacted with (-1 = return val, 0 = first param)
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.DestroyReferenceEffect">
            <summary>
            The effect of this API is to destroy a reference to an entity (eg: CloseHandle destroys a HANDLE)
            </summary>
        </member>
        <member name="M:rgat.APIDetailsWin.DestroyReferenceEffect.#ctor(System.Int32)">
            <summary>
            Create a reference destruction effect
            </summary>
            <param name="refIdx">Position of the reference parameter  (-1 = return val, 0 = first param)</param>
        </member>
        <member name="P:rgat.APIDetailsWin.DestroyReferenceEffect.ReferenceIndex">
            <summary>
            The parameter index of the entity reference that is destroyed (-1 = return val, 0 = first param)
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.APIParamType">
            <summary>
            How we deal with API call parameters
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.APIParamType.Info">
            <summary>
            The parameter is informational only
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.APIParamType.Entity">
            <summary>
            The parameter describes an interesting system object (file path, network address, etc)
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.APIParamType.Reference">
            <summary>
            The parameter is a reference to an entity (HANDLE to a file, socket to a network address, etc)
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.InteractionEntityType">
            <summary>
            The category of the entity
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionEntityType.File">
            <summary>
            Filesystem path
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionEntityType.Host">
            <summary>
            Network address
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionEntityType.Registry">
            <summary>
            Windows registry path
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.InteractionRawType">
            <summary>
            A specific type for a parameter
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionRawType.Handle">
            <summary>
            HANDLE reference
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionRawType.Path">
            <summary>
            Filesystem path
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionRawType.Domain">
            <summary>
            DNS domain
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionRawType.HKEY">
            <summary>
            Registry HKEY
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.API_PARAM_ENTRY">
            <summary>
            Describes certain interesting parameters of an API call which we can link together to describe program behaviour
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.Index">
            <summary>
            The position of the parameter in the function call. 0 => first param. -1 => return value
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.name">
            <summary>
            The name of the parameter
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.paramType">
            <summary>
            How we use the parameter
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.EntityType">
            <summary>
            The category of activity the parameter belongs to
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.RawType">
            <summary>
            The actual raw type of parameter (HANDLE, domain, etc)
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.IsConditional">
            <summary>
            May not receive this parameter (eg: failed registry key open -> no registry key handle)
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.NoCase">
            <summary>
            Comparisons are case insensitive, particularly numbers such as handles which get represented as hex strings
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.API_ENTRY">
            <summary>
            Describes the effects of an API call we have recorded
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_ENTRY.FilterType">
            <summary>
            A category this API falls into, for UI filtering. This might become a list of strings/tags later.
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_ENTRY.LoggedParams">
            <summary>
            A list of parameters/return results from the API call. Used to map their interaction with targets for plotting on the analysis chart.
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_ENTRY.Label">
            <summary>
            How the API call interacted with the entity. Used as a label in the analysis chart.
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_ENTRY.Effects">
            <summary>
            How this api call affects our tracking of interaction targets
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_ENTRY.ModuleName">
            <summary>
            the filename of the library
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_ENTRY.Symbol">
            <summary>
            the case-sensitive API name
            </summary>
        </member>
        <member name="M:rgat.APIDetailsWin.ResolveModuleEnum(System.String)">
            <summary>
            Lookup a system library by path and get a reference that can be used to index internal library metadata (filter types, symbol info)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:rgat.APIDetailsWin.GetAPIInfo(System.Int32,System.String)">
            <summary>
            Get loaded API info for a symbol
            </summary>
            <param name="moduleReference">Internal library reference from ResolveModuleEnum </param>
            <param name="symbolname">Case sensitive API name (ie: a library export like you would pass to GetProcAddress)</param>
            <returns>API_ENTRY struct for the symbol if we have metadata for it, otherwise null</returns>
        </member>
        <member name="T:rgat.eModuleTracingMode">
            <summary>
            How the instrumentation handles code in different modules
            </summary>
        </member>
        <member name="F:rgat.eModuleTracingMode.eDefaultIgnore">
            <summary>
            Code will not be traced unless explicitly requested
            </summary>
        </member>
        <member name="F:rgat.eModuleTracingMode.eDefaultTrace">
            <summary>
            Code will be traced unless explicitly ignored
            </summary>
        </member>
        <member name="T:rgat.TraceChoiceSettings">
            <summary>
            Settings for how rgat chooses which code to trace or ignore
            </summary>
        </member>
        <member name="F:rgat.TraceChoiceSettings.TracingMode">
            <summary>
            Whether rgat traces or ignores modules which are not in the ignore/trace lists
            </summary>
        </member>
        <member name="F:rgat.TraceChoiceSettings.traceDirs">
            <summary>
            Binaries in these directories will be traced in default ignore mode
            </summary>
        </member>
        <member name="P:rgat.TraceChoiceSettings.TraceDirCount">
            <summary>
            The number of directories listed for instrumentation
            </summary>
        </member>
        <member name="F:rgat.TraceChoiceSettings.traceFiles">
            <summary>
            These binaries will be instrumentated in default ignore mode
            </summary>
        </member>
        <member name="P:rgat.TraceChoiceSettings.TraceFilesCount">
            <summary>
            The number of modules that are listed for tracing
            </summary>
        </member>
        <member name="P:rgat.TraceChoiceSettings.IgnoreDirsCount">
            <summary>
            The number of directories which are explicitly ignored in default trace mode
            </summary>
        </member>
        <member name="P:rgat.TraceChoiceSettings.ignoreFilesCount">
            <summary>
            The number of files which are explicitly ignored in default trace mode
            </summary>
        </member>
        <member name="M:rgat.TraceChoiceSettings.GetIgnoredDirs">
            <summary>
            Get the list of directories which contain modules which should not be instrumented
            </summary>
            <returns>A list of directory paths</returns>
        </member>
        <member name="M:rgat.TraceChoiceSettings.ClearIgnoredDirs">
            <summary>
            Clear the list of ignored directories
            </summary>
        </member>
        <member name="M:rgat.TraceChoiceSettings.GetIgnoredFiles">
            <summary>
            Get the list of modules which should not be instrumented
            </summary>
            <returns>A list of file paths</returns>
        </member>
        <member name="M:rgat.TraceChoiceSettings.ClearIgnoredFiles">
            <summary>
            Clear the list of ignored files
            </summary>
        </member>
        <member name="M:rgat.TraceChoiceSettings.GetTracedDirs">
            <summary>
            Get the list of directories which contain modules which should be instrumented even in ignore mode
            </summary>
            <returns>A list of directory paths</returns>
        </member>
        <member name="M:rgat.TraceChoiceSettings.ClearTracedDirs">
            <summary>
            Clear the list of explicitly instrumented directories
            </summary>
        </member>
        <member name="M:rgat.TraceChoiceSettings.GetTracedFiles">
            <summary>
            Get the list of modules which should be instrumented even in ignore mode
            </summary>
            <returns>A list of file paths</returns>
        </member>
        <member name="M:rgat.TraceChoiceSettings.ClearTracedFiles">
            <summary>
            Clear the list of explicitly instrumented modules
            </summary>
        </member>
        <member name="M:rgat.TraceChoiceSettings.AddTracedDirectory(System.String)">
            <summary>
            Add a directory whose contents should be instrumented in default-ignore mode
            </summary>
            <param name="path">A directory path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.RemoveTracedDirectory(System.String)">
            <summary>
            Remove a directory from the list of directories to trace in ignore mode
            </summary>
            <param name="path">A directory path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.AddTracedFile(System.String)">
            <summary>
            Add a module which should be instrumented in default-ignore mode
            </summary>
            <param name="path">A file path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.RemoveTracedFile(System.String)">
            <summary>
            Remove a file from the list of files to trace in ignore mode
            </summary>
            <param name="path">A file path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.AddIgnoredDirectory(System.String)">
            <summary>
            Add a directory whose contents should be ignored in default-trace mode
            </summary>
            <param name="path">A directory path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.RemoveIgnoredDirectory(System.String)">
            <summary>
            Remove a directory from the list of directories to ignore in default-trace mode
            </summary>
            <param name="path">A directory path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.AddIgnoredFile(System.String)">
            <summary>
            Add a file which should not be instrumented in default-instrument mode
            </summary>
            <param name="path">A file path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.RemoveIgnoredFile(System.String)">
            <summary>
            Remove a file from the list of files to ignore in default-trace mode
            </summary>
            <param name="path">A file path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.InitDefaultExclusions">
            <summary>
            Add some standard default paths to always ignore
            At the moment this is just the windows directory as tracing the workings of kernel32/ntdll/etc is generally not useful
            </summary>
        </member>
        <member name="T:rgat.BinaryTarget">
            <summary>
            A binary file (.exe/.dll) that rgat can trace
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.RemoteHost">
            <summary>
            The network address this target resides on
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.RemoteBinary">
            <summary>
            True if this target was loaded on a remote host in remote tracing mode
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.RemoteAccessible">
            <summary>
            Do we have an active connection to the host this file resides on?
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.RemoteInitialised">
            <summary>
            Have we been sent the initialisation data for this file from the remote host?
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.IsAccessible">
            <summary>
            Is this file accessible at the moment?
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.TraceChoices">
            <summary>
            Settings for which modules are instrumented/ignored
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.StartBytes">
            <summary>
            A snippet of the first bytes of the file
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.PEFileObj">
            <summary>
            An object representing the parsed PE File header/structure
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.IsTestBinary">
            <summary>
            Is this target an rgat test binary
            </summary>
        </member>
        <member name="M:rgat.BinaryTarget.MarkTestBinary">
            <summary>
            Mark this file as an rgat test binary
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.BitWidth">
            <summary>
            32 or 64 bit
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.FilePath">
            <summary>
            Local path to the file
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.FileName">
            <summary>
            Name of the file
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.HexPreview">
            <summary>
            Formatted hex preview of the file start bytes
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.ASCIIPreview">
            <summary>
            Formatted ASCII preview of the start bytes
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.IsLibrary">
            <summary>
            This file is a DLL
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.SelectedExportIndex">
            <summary>
            Which library export to run
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.LoaderName">
            <summary>
            The filename rgat will give the library loader
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.Exports">
            <summary>
            List of (name,ordinal) tuples of library exports
            </summary>
        </member>
        <member name="M:rgat.BinaryTarget.#ctor(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Create a BinaryTarget object for a binary that rgat can trace
            </summary>
            <param name="filepath">The filesystem path of the binary</param>
            <param name="bitWidth_">32 or 64</param>
            <param name="remoteAddr">The address of the remote rgat instance where this target is being traced</param>
            <param name="isLibrary">if the target is a library or not. This value will be used if the binary cannot be found and parsed</param>
        </member>
        <member name="M:rgat.BinaryTarget.GetRemoteLoadInitData">
            <summary>
            This file is on a headless remote tracing host. 
            Fetch some JSON serialised intialisation data to send to the GUI host.
            </summary>
            <returns>JSON serialised initialisation data</returns>
        </member>
        <member name="M:rgat.BinaryTarget.InitialiseFromRemoteData(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Load serialsed target data into this object 
            </summary>
            <param name="dataTok">JSON target data</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:rgat.BinaryTarget.HexTooltip">
            <summary>
            Get an annoted hexdump snippet of the start of the target binary
            </summary>
            <returns>The snippet as a string</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetCurrentTraceConfiguration">
            <summary>
            Get the tracing configuration settings as a dictrionary of keyvaluepair strings
            </summary>
            <returns>Settings dictionary</returns>
        </member>
        <member name="M:rgat.BinaryTarget.SetTraceConfig(System.String,System.String)">
            <summary>
            Set a tracing configuration value to be sent to the instrumentation tool
            </summary>
            <param name="key">Setting to set</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="M:rgat.BinaryTarget.GetYaraHits(rgat.YARAScan.YARAHit[]@)">
            <summary>
            Get Yara hits recorded for the target
            </summary>
            <param name="hits">Array of YARAHit objects describing rule hits from the last scan</param>
            <returns>true if there were any hits</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetDieHits(System.String[]@)">
            <summary>
            Get an array of Detect It Easy signature hits from the last scan of the target
            </summary>
            <param name="hits">Array of hit texts</param>
            <returns>true if there were any hits</returns>
        </member>
        <member name="M:rgat.BinaryTarget.ClearSignatureHits(rgat.CONSTANTS.eSignatureType)">
            <summary>
            Purge the signature hits recorded by the last scan
            </summary>
            <param name="sigType">Type of signature hits to remove</param>
        </member>
        <member name="M:rgat.BinaryTarget.AddDiESignatureHit(System.String)">
            <summary>
            Record a Detect It Easy (dotnet) signature hit for this target binary
            </summary>
            <param name="hitstring">The signature hit data</param>
        </member>
        <member name="M:rgat.BinaryTarget.AddYaraSignatureHit(dnYara.ScanResult)">
            <summary>
            Record a local Yara signature hit for this target binary
            It will also be sent to any connected remote sessions
            </summary>
            <param name="hit">The ScanResult hit data generated by dnYara</param>
        </member>
        <member name="M:rgat.BinaryTarget.AddYaraSignatureHit(rgat.YARAScan.YARAHit)">
            <summary>
            Record a remote Yara signature hit for this target binary recieved from a remote session
            </summary>
            <param name="hit">The YARAHit hit data</param>
        </member>
        <member name="P:rgat.BinaryTarget.TracesCount">
            <summary>
            The number of traces that have been generated for this target
            </summary>
        </member>
        <member name="M:rgat.BinaryTarget.DeleteTrace(System.DateTime)">
            <summary>
            Delete a trace record
            </summary>
            <param name="timestarted"></param>
        </member>
        <member name="M:rgat.BinaryTarget.GetTraceByIDs(System.UInt32,System.Int64,rgat.TraceRecord@)">
            <summary>
            Retrieve the data for a trace record
            </summary>
            <param name="pid">Process ID of the trace</param>
            <param name="ID">Unique ID of the trace</param>
            <param name="result">TraceRecord of the associated trace</param>
            <returns>true if a trace was found</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetTracesUIList">
            <summary>
            Get a list of start time/tracerecord pairs for thread-safe iteration
            </summary>
            <returns>A list of times and trace records</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetTracesList">
            <summary>
            Get a thread safe list of all recorded traces for this binary
            </summary>
            <returns>A list of tracerecords</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetSHA1Hash">
            <summary>
            Get the SHA1 hash of this binary
            </summary>
            <returns>A SHA1 string</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetSHA256Hash">
            <summary>
            Get the SHA256 hash of this binary
            </summary>
            <returns>A SHA256 string</returns>
        </member>
        <member name="M:rgat.BinaryTarget.ParseFile">
            <summary>
            Load the file from disk to fill the data of this object
            </summary>
        </member>
        <member name="M:rgat.BinaryTarget.GetFileSizeString">
            <summary>
            Get a formatted file size string for display in the UI
            </summary>
            <returns></returns>
        </member>
        <member name="M:rgat.BinaryTarget.CreateNewTrace(System.DateTime,System.UInt32,System.Int64,rgat.TraceRecord@)">
            <summary>
            Create and record a new TraceRecord for an instrumentation run of this binary
            </summary>
            <param name="timeStarted">The time the trace was started</param>
            <param name="PID">The OS process ID of the first process</param>
            <param name="ID">The unique ID of the process recorded by the instrumentation tool</param>
            <param name="newRecord">The created TraceRecord</param>
            <returns>true is a new trace was created, false if an existing one was fetched</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetFirstTrace">
            <summary>
            Get the first trace in the trace list. Use to just get any trace for display
            </summary>
            <returns>A TraceRecord, or null if none existed</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetNewestTrace">
            <summary>
            Get the most recently recorded trace
            </summary>
            <returns>A TraceRecord, or null if none existed</returns>
        </member>
        <member name="T:rgat.BinaryTargets">
            <summary>
            Manages the collection of loaded binary targets
            </summary>
        </member>
        <member name="P:rgat.BinaryTargets.Count">
            <summary>
            Number of loaded BinaryTargets
            </summary>
        </member>
        <member name="M:rgat.BinaryTargets.GetTargetPaths">
            <summary>
            List of all the paths of loaded BinaryTargets
            </summary>
            <returns>List of filesystem paths</returns>
        </member>
        <member name="M:rgat.BinaryTargets.GetTargetByPath(System.String,rgat.BinaryTarget@)">
            <summary>
            Get a BinaryTarget object for a filesystem path.
            </summary>
            <param name="path">Fileystem path string</param>
            <param name="result">Binarytarget for the path, if already loaded</param>
            <returns>bool target was akready loaded</returns>
        </member>
        <member name="M:rgat.BinaryTargets.GetBinaryTargets">
            <summary>
            Fetch a thread-safe copy of the list of loaded BinaryTargets
            </summary>
            <returns>List of BinaryTargets</returns>
        </member>
        <member name="M:rgat.BinaryTargets.AddTargetByPath(System.String,System.Boolean,System.Int32,System.String)">
            <summary>
            Initialise and record a BinaryTarget object from a filesystem path
            </summary>
            <param name="path">Filesystem path of the target</param>
            <param name="isLibrary">true if a DLL</param>
            <param name="arch">32 or 64 bit, or 0 if unknown (remote)</param>
            <param name="remoteAddr">Optional remote address of the system this binary is on</param>
            <returns>Created BinaryTarget object</returns>
        </member>
        <member name="M:rgat.BinaryTargets.RegisterTarget(rgat.BinaryTarget)">
            <summary>
            Add a pre-constructed BinaryTarget
            </summary>
            <param name="target">BinaryTarget to add</param>
        </member>
        <member name="M:rgat.BinaryTargets.GetTargetBySHA1(System.String,rgat.BinaryTarget@)">
            <summary>
            Fetch a BinaryTarget by its SHA1 hash
            </summary>
            <param name="sha1">SHA1 hash to find</param>
            <param name="target">BinaryTarget, if found</param>
            <returns>true if found</returns>
        </member>
        <member name="F:rgat.BridgeConnection.emsgType.AsyncData">
            <summary>
            Non-trace related data sent without requiring a command to generate it (eg: result of signature scanning)
            </summary>
        </member>
        <member name="P:rgat.BridgeConnection.ActiveNetworking">
            <summary>
            Are we either listening, connecting or connected
            </summary>
        </member>
        <member name="T:rgat.BridgeConnection.eBridgeState">
            <summary>
            Connection activity
            </summary>
        </member>
        <member name="F:rgat.BridgeConnection.eBridgeState.Inactive">
            <summary>
            There is no network activity
            </summary>
        </member>
        <member name="F:rgat.BridgeConnection.eBridgeState.Connecting">
            <summary>
            rgat is connecting out
            </summary>
        </member>
        <member name="F:rgat.BridgeConnection.eBridgeState.Listening">
            <summary>
            rgat is waiting for an incoming connection
            </summary>
        </member>
        <member name="F:rgat.BridgeConnection.eBridgeState.Connected">
            <summary>
            rgat is connected
            </summary>
        </member>
        <member name="F:rgat.BridgeConnection.eBridgeState.Teardown">
            <summary>
            The connecton has been torn down
            </summary>
        </member>
        <member name="P:rgat.BridgeConnection.BridgeState">
            <summary>
            The state of the connection
            </summary>
        </member>
        <member name="P:rgat.BridgeConnection.GUIMode">
            <summary>
            Whether this instance is the GUI.
            The GUI sends tracing commands and recieves trace data and associated metadata (available files to execute, signature hits, etc)
            It does not do the opposite. Ever.
            </summary>
        </member>
        <member name="P:rgat.BridgeConnection.HeadlessMode">
            <summary>
            Is rgat running in non-GUI mode
            </summary>
        </member>
        <member name="P:rgat.BridgeConnection.CancelToken">
            <summary>
            Get a cancellation token. This will be cancelled if the connection is torn down
            All blocking operations should respect it
            </summary>
        </member>
        <member name="F:rgat.BridgeConnection.RemoteEndPoint">
            <summary>
            An IPEndPoint for the host we are connected to
            </summary>
        </member>
        <member name="M:rgat.BridgeConnection.#ctor(System.Boolean)">
            <summary>
            An rgat connection object
            </summary>
            <param name="isgui">true if this process is running in GUI mode. One (and only one) party must have this flag set</param>
        </member>
        <member name="M:rgat.BridgeConnection.Start(System.Net.IPAddress,System.String,System.Int32,rgat.BridgeConnection.OnGotDataCallback,rgat.BridgeConnection.OnConnectSuccessCallback)">
            <summary>
            Initiate a bridge connection in remote mode
            This will be complete when it connects to another rgat instance with the right network key
            </summary>
            <param name="localBindAddress">The local ip address to connect from</param>
            <param name="remoteConnectAddress">The remote ip address or domain to connect to</param>
            <param name="remoteConnectPort">The remote TCP port to connect to</param>
            <returns></returns>
        </member>
        <member name="M:rgat.BridgeConnection.StartConnectOut(System.Net.Sockets.TcpClient,System.String,System.Int32,rgat.BridgeConnection.OnConnectSuccessCallback)">
            <summary>
            Establish a connection to a listening rgat instance
            </summary>
            <param name="client">The TcpClient object for the connection</param>
            <param name="remoteConnectAddress">Host address of the remote party</param>
            <param name="remoteConnectPort">Port the remote party is listening on</param>
            <param name="connectCallback">The main connection handler which will serve the connection</param>
        </member>
        <member name="M:rgat.BridgeConnection.AuthenticateConnectionTask(System.Boolean)">
            <summary>
            A task that exchanges and verifies the initial handshake messages
            </summary>
            <param name="isServer">true if the other party initiated the connection, false if we did</param>
            <returns>true if the handshake succeeded and both parties have the same key</returns>
        </member>
        <member name="M:rgat.BridgeConnection.TryCreateCryptoStream(System.Net.Sockets.TcpClient,System.Boolean)">
            <summary>
            Ensure the other end of the connection knows our key
            </summary>
            <param name="client">The TcpClient for the connection</param>
            <param name="isServer">true if the other party initiated the connection, false if we did</param>
            <returns></returns>
        </member>
        <member name="M:rgat.BridgeConnection.ReadData(System.Nullable{rgat.BridgeConnection.NETWORK_MSG}@)">
            <summary>
            Read the next message from the conencted party
            </summary>
            <param name="data">A NETWORK_MSG object</param>
            <returns>If successful</returns>
        </member>
        <member name="M:rgat.BridgeConnection.RawSendData(rgat.BridgeConnection.emsgType,System.String)">
            <summary>
            Encrypt and send a message to the connected party
            </summary>
            <param name="msgtype">Message Type</param>
            <param name="textdata">Message string</param>
            <returns>If successful</returns>
        </member>
        <member name="M:rgat.BridgeConnection.RawSendData(rgat.BridgeConnection.NETWORK_MSG)">
            <summary>
            Encrypt and send a message to the connected party
            </summary>
            <param name="msg">A NETWORK_MSG object containing the message</param>
            <returns>If successful</returns>
        </member>
        <member name="M:rgat.BridgeConnection.AddNetworkDisplayLogMessage(System.String,System.Nullable{rgat.Themes.eThemeColour})">
            <summary>
            Add a message to the remote tracing dialog log panel
            </summary>
            <param name="msg">Text of the message to add</param>
            <param name="colour">Colour of the message, or null for default</param>
        </member>
        <member name="M:rgat.BridgeConnection.Start(System.Net.IPAddress,System.Int32,rgat.BridgeConnection.OnGotDataCallback,rgat.BridgeConnection.OnConnectSuccessCallback)">
            <summary>
            Initiate a bridge connection in listener mode
            This will be complete when another rgat instance connects to it with the right network key
            </summary>
            <param name="localBindAddress">The local ip address to bind to</param>
            <param name="localBindPort">The local TCP port to listen on</param>
            <returns></returns>
        </member>
        <member name="M:rgat.BridgeConnection.SendCommand(System.String,System.String,rgat.Config.RemoteDataMirror.ProcessResponseCallback,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Send a command to the remote instance of rgat (which is in commandline tracing mode)
            The handling of the response (a JToken) depends on the arguments
                If a callback is specified, it will be executed with the response as a parameter
                Otherwise it will be stored for the requestor to pick up later
            </summary>
            <param name="command">The task to perform</param>
            <param name="recipientID">The intended recipient of the task, eg a certain file picker requested the directory they are in</param>
            <param name="callback">A callback to be performed with the response</param>
            <param name="param">Optional parameters JSON for the command</param>
        </member>
        <member name="M:rgat.BridgeConnection.SendResponseObject(System.Int32,System.Object)">
            <summary>
            Used to send raw .net data types (serialised as JSON) as command responses
            Useful for when the GUI just wants a copy of some pre-existing data
            </summary>
            <param name="command"></param>
            <param name="response"></param>
        </member>
        <member name="M:rgat.BridgeConnection.SendResponseJSON(System.Int32,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Send pre-built json objects as a command response
            This is usually for when the gui needs some API output, rather than neatly packaged data that we already have
            </summary>
            <param name="command"></param>
            <param name="response"></param>
        </member>
        <member name="M:rgat.GlobalConfig.VerifyCertificate(System.String,System.String,System.String@,System.String@)">
            <summary>
            Checks that a binary has a valid code signing certificate issued to one of the expected subject names
            </summary>
            <param name="path">Path of binary to be tested</param>
            <param name="expectedSigners">Comma seperated list of valid certificate subject names</param>
            <param name="error">Errors encountered in validating the certificate (no or invalid signer)</param>
            <param name="warning">Warnings encountered validating the certificate (time issues)</param>
            <returns>Whether the certificate was valid. Expired/Not yet valid certs will return true with the warning field set</returns>
        </member>
        <member name="F:rgat.GlobalConfig.Preview_PerProcessLoopSleepMS">
            <summary>
             Delay between rendering each preview trace (collection of threads)
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.Preview_PerThreadLoopSleepMS">
            <summary>
            Delay between preview rendering each thread in a trace
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.Preview_EdgesPerRender">
            <summary>
            Maximum number of edges to plot for each round of preview
            graph plotting. This is CPU bound so shoudl be limited to ensure each graph gets
            a turn
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.animationFadeRate">
            <summary>
            Amount of alpha to reduce fading item by each frame
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.AnimatedFadeMinimumAlpha">
            <summary>
            Minimum brighteness for faded animated geometry
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.AnimationLingerFrames">
            <summary>
            How long to linger animated geometry before fading it
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.MainGraphRenderDelay">
            <summary>
            Milliseconds to wait between frames of Main (displayed) Graph rendering
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.LiveAnimationUpdatesPerFrame">
            <summary>
            How many items of trace data to use to plot the graph per frame
            Lower for interactivity, increase for throughput
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.showRisingAnimated">
            <summary>
            Animate a rising caption of API nodes when they are animated
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.insTextCompactThreshold">
            <summary>
            When to make ins text smaller  [todo: reimplement]
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.OnScreenNodeTextCountLimit">
            <summary>
            Upper limit on how many labels to draw on screen at once [todo: reimplement]
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.FurthestInstructionText">
            <summary>
            Upper limit on how far an instruction can be from the camera to be drawn [todo: reimplement]
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.FurthestSymbol">
            <summary>
            Upper limit on how far a symbol can be from the camera to be drawn [todo: reimplement]
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.ExternAnimDisplayFrames">
            <summary>
            How many frames to animate API calls for
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.ExternAnimRisePerFrame">
            <summary>
            How far API labels rise during animation frames [todo should be in consts]
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.IngestStatsPerSecond">
            <summary>
            granularity of thread update rate plot
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.IngestStatWindow">
            <summary>
            length of time a small thread activity plot covers (last X seconds)
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.KeystrokeDisplayMS">
            <summary>
            How long to display shortcut keypresses
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.KeystrokeStartFadeMS">
            <summary>
            How long remaining on the keypress label to start fading it
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.KeystrokeDisplayMaxCount">
            <summary>
            Max keyboard shortcuts to display
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.ShowKeystrokes">
            <summary>
            Show keyboard shortcut activations
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.VisMessageMaxLingerTime">
            <summary>
            How long to display in-visualiser messages
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.VisMessageFadeStartTime">
            <summary>
            When to fade in-visualiser messages as they approach the end of their display
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.ShowNodeMouseoverTooltip">
            <summary>
            Whether a tooltip should be shown on graph node mouseover
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.NewGraphLayout">
            <summary>
            The initial graph layout used for new traces
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.LayoutAllComputeEnabled">
            <summary>
            Toggle use of the GPU computation engine for main/preview graphs
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.LayoutPositionsActive">
            <summary>
            Toggle position computation
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.LayoutAttribsActive">
            <summary>
            Toggle attribute (animation brightness+size) computation
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.NodeSoftSpeedLimit">
            <summary>
            Maximum configurable speed of force-directed nodes. Fast nodes will layout quickly but wobble
            in their low energy position
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.NodeHardSpeedLimit">
            <summary>
            Speed limit nodes cannot exceed
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.NewVersionAvailable">
            <summary>
            A new rgat release is available to download
            </summary>
        </member>
        <member name="M:rgat.GlobalConfig.RecordAvailableUpdateDetails(System.Version,System.String,System.String)">
            <summary>
            Record the details of a new rgat version
            </summary>
            <param name="releaseVersion">The release version</param>
            <param name="releaseCumulativeChanges">Text of changes from the current version</param>
            <param name="downloadLink">Link to download the release from</param>
        </member>
        <member name="M:rgat.GlobalConfig.LoadThemesFromResource">
            <summary>
            Fetch and load builtin rgat themes from the Assembly resources
            </summary>
        </member>
        <member name="M:rgat.GlobalConfig.GetStorageDirectoryPath(System.String,System.String)">
            <summary>
            Try to find a path to store working data
            </summary>
            <param name="baseDir">Directory to search in</param>
            <param name="name">Name of directory to create</param>
            <returns>Path of created directory</returns>
        </member>
        <member name="M:rgat.GlobalConfig.PreviousSignatureCheckPassed(System.String,System.String@,System.Boolean@)">
            <summary>
            Get the code signing certificate validation result for a binary
            </summary>
            <param name="path">Path of the binary</param>
            <param name="error">Certificate error reason</param>
            <param name="timeWarning">If the failure was due to a time issue (before/after validity)</param>
            <returns>If the certificate is valid</returns>
        </member>
        <member name="M:rgat.GlobalConfig.GetSettingPath(rgat.CONSTANTS.PathKey)">
            <summary>
            Get the filepath associated with a setting
            </summary>
            <param name="setting">The setting</param>
            <returns>The path</returns>
        </member>
        <member name="M:rgat.GlobalConfig.SetBinaryPath(rgat.CONSTANTS.PathKey,System.String)">
            <summary>
            Set a binary path assocated for a setting
            </summary>
            <param name="setting">The setting</param>
            <param name="value">The path</param>
        </member>
        <member name="M:rgat.GlobalConfig.SetDirectoryPath(rgat.CONSTANTS.PathKey,System.String)">
            <summary>
            Set a directory path setting
            </summary>
            <param name="setting">The setting</param>
            <param name="value">The path</param>
        </member>
        <member name="F:rgat.GlobalConfig.Settings">
            <summary>
            The main user-settings storage object which is serialised to settings.json
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig._settingsLock">
            <summary>
            UI/App related config
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.ResponsiveKeys">
            <summary>
            These keys trigger actions that need to be reacted to repeatedly and immediately (mainly graphical actions like rotation)
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.ResponsiveHeldActions">
            <summary>
            Keybinds triggered by responsive keys
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.StatisticsTimeAvgWindow">
            <summary>
            how many frame timing values to store for calculating UI performance statistics
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.ScanFilesYARA">
            <summary>
            Static file YARA scanning enabled
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.ScanFilesDiE">
            <summary>
            Static file Detect It Easy scanning enabled
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.ScanMemoryYARA">
            <summary>
            Yara scanning of memory enabled
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.ScanMemoryDiE">
            <summary>
            Detect it easy of file-like memory enabled
            </summary>
        </member>
        <member name="P:rgat.GlobalConfig.BaseDirectory">
            <summary>
            The directory of the original rgat.exe, rather than the rgat.dll runtime directory
            </summary>
        </member>
        <member name="M:rgat.GlobalConfig.LoadConfig(System.Boolean,System.IProgress{System.Single})">
            <summary>
            Load the rgat settings.json
            </summary>
            <param name="GUI">true if loading in GUI mode</param>
            <param name="progress">optional IProgress</param>
        </member>
        <member name="T:rgat.Config.LaunchConfig">
            <summary>
            rgat operation configuration based on command line options
            </summary>
        </member>
        <member name="P:rgat.Config.LaunchConfig.TargetPath">
            <summary>
            if present - trace target file and exit
            this mode does not require a GPU, unless paired with the draw or mp4 options
            </summary>
        </member>
        <member name="P:rgat.Config.LaunchConfig.ConnectModeAddress">
            <summary>
            if present - go into headless bridge mode and act as a proxy for the specified rgat instance on a remote machine
            </summary>
        </member>
        <member name="P:rgat.Config.LaunchConfig.ListenPort">
            <summary>
            if present - go into headless bridge mode and act as a proxy for the next rgat instance to connect to this port
            this mode does not require a GPU
            </summary>
        </member>
        <member name="P:rgat.Config.LaunchConfig.Interface">
            <summary>
            The interface to use for network connections
            </summary>
        </member>
        <member name="P:rgat.Config.LaunchConfig.NetworkKey">
            <summary>
            The encryption key to use for network connections
            </summary>
        </member>
        <member name="P:rgat.Config.LaunchConfig.TraceSaveDirectory">
            <summary>
            Write the collected trace to this path, for opening later by rgat in UI mode
            </summary>
        </member>
        <member name="P:rgat.Config.LaunchConfig.DrawImage">
            <summary>
            draw the rendered graph to a png image
            </summary>
        </member>
        <member name="P:rgat.Config.LaunchConfig.RecordVideoReplay">
            <summary>
            once tracing and graph layout is complete, record playback to an mp4 video. 
            </summary>
        </member>
        <member name="P:rgat.Config.LaunchConfig.RecordVideoLive">
            <summary>
            record a video of tracing and layout.
            </summary>
        </member>
        <member name="P:rgat.Config.LaunchConfig.FFmpegPath">
            <summary>
            Path to ffmpeg.exe to use for video captures
            </summary>
        </member>
        <member name="P:rgat.Config.LaunchConfig.NoFollowDescendants">
            <summary>
            if set to true, rgat will not trace child processes
            </summary>
        </member>
        <member name="P:rgat.Config.LaunchConfig.ConfigPath">
            <summary>
            Provide config options in a file to support automation
            </summary>
        </member>
        <member name="F:rgat.Config.LaunchConfig.ActiveNetworkInterface">
            <summary>
            The network interface being used for listening or connecting
            </summary>
        </member>
        <member name="T:rgat.Config.LaunchConfig.eRunMode">
            <summary>
            Modes rgat can operate in
            </summary>
        </member>
        <member name="F:rgat.Config.LaunchConfig.eRunMode.GUI">
            <summary>
            Full GPU rendered GUI mode
            </summary>
        </member>
        <member name="F:rgat.Config.LaunchConfig.eRunMode.GPURenderCommand">
            <summary>
            Performs a full trace + graph rendering, without the UI. 
            Results drawn to an image and/or video
            </summary>
        </member>
        <member name="F:rgat.Config.LaunchConfig.eRunMode.Bridged">
            <summary>
            Lightweight proxy mode which does little more than spawn processes and feed results back to
            a connected rgat instance
            </summary>
        </member>
        <member name="F:rgat.Config.LaunchConfig.eRunMode.NoGPUTraceCommand">
            <summary>
            Generates a trace file that can be read by rgat in GUI mode
            </summary>
        </member>
        <member name="F:rgat.Config.LaunchConfig.eRunMode.Invalid">
            <summary>
            The provided command line arguments were not valid for any supported mode of operation
            </summary>
        </member>
        <member name="F:rgat.Config.LaunchConfig.RunMode">
            <summary>
            The basic mode of operation for this rgat run
            </summary>
        </member>
        <member name="M:rgat.Config.LaunchConfig.Init(System.String[])">
            <summary>
            Initialise the configuration
            </summary>
            <param name="originalParams">The commandline parameters</param>
        </member>
        <member name="M:rgat.Config.LaunchConfig.DeNullifyArgumentless(System.String[])">
            <summary>
            nothing => null
            -M => null
            This makes it so -M => ""
            Allows us to react to arguments with no value provided (eg: thing with no path -> do the thing but use a default path)
            </summary>
            <param name="originalParams"></param>
        </member>
        <member name="M:rgat.Config.LaunchConfig.SetRunMode">
            <summary>
            Work out what the user wants to do based on the arguments
            </summary>
        </member>
        <member name="M:rgat.Config.LaunchConfig.ExtractJSONOptions(System.String@)">
            <summary>
            Merges a JSON options blob into the command line options
            </summary>
            <param name="error">any error message produced by the operation</param>
            <returns>success or failure</returns>
        </member>
        <member name="F:rgat.Config.rgatSettings.Inited">
            <summary>
            A flag used to prevent saving of the settings during the loading process
            </summary>
        </member>
        <member name="M:rgat.Config.rgatSettings.EnsureValidity">
            <summary>
            Perform some checks on the loaded config to try and make sure it won't crash the program
            Adds any values that might have appeared in a new version
            </summary>
        </member>
        <member name="T:rgat.Config.rgatSettings.PathRecord">
            <summary>
            A class for recording filesystem paths and when rgat accessed them
            </summary>
        </member>
        <member name="P:rgat.Config.rgatSettings.PathRecord.Path">
            <summary>
            Filesystem path of the file
            </summary>
        </member>
        <member name="P:rgat.Config.rgatSettings.PathRecord.OpenCount">
            <summary>
            How many times rgat has opened the file
            </summary>
        </member>
        <member name="P:rgat.Config.rgatSettings.PathRecord.FirstOpen">
            <summary>
            When the file was first opened by rgat
            </summary>
        </member>
        <member name="P:rgat.Config.rgatSettings.PathRecord.LastOpen">
            <summary>
            The most recent time the file was opened
            </summary>
        </member>
        <member name="T:rgat.Config.rgatSettings.PathRecord.SortLatestAccess">
            <summary>
            Sort by the latest open time
            </summary>
        </member>
        <member name="T:rgat.Config.rgatSettings.NetworkSettings">
            <summary>
            Connection settings for remote tracing
            </summary>
        </member>
        <member name="M:rgat.Config.rgatSettings.KeybindSettings.InitDefaultKeybinds">
            <summary>
            A set of standard keybinds for new installs
            </summary>
        </member>
        <member name="M:rgat.Config.rgatSettings.KeybindSettings.InitResponsiveKeys">
            <summary>
            Some keybinds we don't want to wait for the OS repeat detection (S........SSSSSSSSSSS) because it makes
            things like graph movement and rotation clunky. Instead we read for their keypress every update instead
            of listening for the key action
            
            Alt/Shift/Ctrl modifiers are reserved for these keys, so two different actions can't be bound to a key this way.
            </summary>
        </member>
        <member name="P:rgat.Config.rgatSettings.PathSettings.Paths">
            <summary>
            Filesystem locations containing things rgat needs (instrumentation tools, signatures, etc)
            </summary>
        </member>
        <member name="F:rgat.Config.rgatSettings.PathSettings.BinaryValidationErrors">
            <summary>
            Errors such as bad signatures encountered while validating binaries used by rgat (pintools, etc).
            </summary>
        </member>
        <member name="F:rgat.Config.rgatSettings.PathSettings._BinaryValidationErrorCache">
            <summary>
            BinaryValidationErrors stored in a faster data structure for access by the UI each frame
            </summary>
        </member>
        <member name="M:rgat.Config.rgatSettings.PathSettings.SetBinaryPath(rgat.CONSTANTS.PathKey,System.String)">
            <summary>
            Set the value of a binary path setting (a tool like pin/ffmpeg or a library such as a pintool)
            </summary>
            <param name="setting">A BinaryPathKey value</param>
            <param name="path">A filesystem path for the setting</param>
            <returns></returns>
        </member>
        <member name="P:rgat.Config.rgatSettings.TracingSettings.ArgStorageMax">
            <summary>
            how many bytes back from an instruction to search for a symbol of the function it belongs to
            </summary>
        </member>
        <member name="T:rgat.Config.rgatSettings.MediaCaptureSettings">
            <summary>
            Video encoding and screenshot related config
            </summary>
        </member>
        <member name="P:rgat.Config.rgatSettings.CachedRecentPaths.RecentPaths">
            <summary>
            Filesystem locations the user has accessed (opened binaries, opened traces, filepicker directories)
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PROGRAMVERSION.MAJOR">
            <summary>
            Major version
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PROGRAMVERSION.MINOR">
            <summary>
            Minor Version
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PROGRAMVERSION.PATCH">
            <summary>
            Patch version
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PROGRAMVERSION.PATCHNAME">
            <summary>
            Optional, non-unique name for the given version (preview, release, bugfix, etc)
            Other values must still be unique (eg: '1.1.1 Preview' and '1.1.1 Release' cannot both exist)
            </summary>
        </member>
        <member name="P:rgat.CONSTANTS.PROGRAMVERSION.RGAT_VERSION">
            <summary>
            The simple major.minorpath version of this rgat build. should probably reference the assembly instead. todo
            </summary>
        </member>
        <member name="P:rgat.CONSTANTS.PROGRAMVERSION.RGAT_VERSION_SEMANTIC">
            <summary>
            The SemVer version of rgat
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.MAX_MODULE_PATH_LENGTH">
            <summary>
            Limit length of displayed module paths
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.PREVIEW_PANE_WIDTH">
            <summary>
            Width of the preview pane
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.PREVIEW_PANE_GRAPH_HEIGHT">
            <summary>
            Height of each preview graph
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.PREVIEW_PANE_X_PADDING">
            <summary>
            Horizontal preview graph padding
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.PREVIEW_PANE_Y_SEP">
            <summary>
            Vertical preview graph padding
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.UI_SHORT_TIMER_INTERVAL">
            <summary>
            Timer for tasks that need doing regularly but not every frame
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.UI_LONG_TIMER_INTERVAL">
            <summary>
            Timer for occasional housekeeping tasks
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.SCREENSHOT_ICON_LINGER_TIME">
            <summary>
            How long the screenshot icon will stay on the status bar
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.SCREENSHOT_ANIMATION_RECT_SPEED">
            <summary>
            How fast the screenshot feedback rectangle will collapse
            10 = it will linger for 1/10th of a second
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.ALERT_TEXT_LINGER_TIME">
            <summary>
            How long alerts will stay in the alert pane
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.Anim_Constants.ASSUME_INS_PER_BLOCK">
            <summary>
            farcical but useful way to estimate how long a block spends executing
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.Anim_Constants.BRIGHTNESS">
            <summary>
            An enum for keeping the node/edge activated, but not implemented as an 
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.Anim_Constants.BRIGHTNESS.KEEP_BRIGHT">
            <summary>
            Maintain full alpha until deactivated
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.NETWORK.UpdateCheckMinimumDelayMinutes">
            <summary>
            How long to wait between checks for new versions (check only happens on startup)
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.SIGNERS">
            <summary>
            Expected code certificate subjects for binaries rgat will load or execute
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.SIGNERS.PIN_SIGNERS">
            <summary>
            Expected code certificate subject for pin.exe binaries
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.SIGNERS.RGAT_SIGNERS">
            <summary>
            Expected code certificate subject for rgat binaries
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.TESTS.testextension">
            <summary>
            The file extension for test description data files
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.eEdgeNodeType">
            <summary>
            Types for nodes edges which control how they are laid out or rendered
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eEdgeCall">
            <summary>
            Edge to a call instruction
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eEdgeOld">
            <summary>
            Edge to an instruction that has already been visited from another instruction
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eEdgeReturn">
            <summary>
            Edge from a return instruction
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eEdgeLib">
            <summary>
            Edge of an API call
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eEdgeNew">
            <summary>
            Edge to an instruction that has not been executed before
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eEdgeException">
            <summary>
            Edge to an exception node
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eNodeNonFlow">
            <summary>
            Edge to another instruction in the same basic block
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eNodeJump">
            <summary>
            An unconditional jump instruction
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eNodeCall">
            <summary>
            A call instruction
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eNodeReturn">
            <summary>
            A return instruction
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eNodeExternal">
            <summary>
            An API call
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eNodeException">
            <summary>
            An exception source
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eENLAST">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eFIRST_IN_THREAD">
            <summary>
            The first instruction in a thread
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.HighlightType">
            <summary>
            Category of filter used to highlight nodes
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.HighlightType.Externals">
            <summary>
            An external API call
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.HighlightType.Addresses">
            <summary>
            A memory address
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.HighlightType.Exceptions">
            <summary>
            An exception
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.PathKey">
            <summary>
            A filesystem path setting
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.PinPath">
            <summary>
            Path of Intel pin.exe
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.PinToolPath32">
            <summary>
            Path of the 32 bit rgat pintool
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.PinToolPath64">
            <summary>
            Path of the 64 bit rgat pintool
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.FFmpegPath">
            <summary>
            Path of ffmpeg.exe for video recording
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.TraceSaveDirectory">
            <summary>
            Directory to save traces to
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.TestsDirectory">
            <summary>
            Directory where rgat tests are stored
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.DiESigsDirectory">
            <summary>
            Directory where Detect It easy signatures are stored
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.YaraRulesDirectory">
            <summary>
            Directory where Yara rules are stored
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.MediaCapturePath">
            <summary>
            Directory to save screenshots/videos to
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.ConditionalType">
            <summary>
            Describes the state of a conditional jump
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.ConditionalType.NOTCONDITIONAL">
            <summary>
            The instruction always falls through
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.ConditionalType.ISCONDITIONAL">
            <summary>
            The instruction is a conditional jump
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.ConditionalType.CONDFELLTHROUGH">
            <summary>
            The conditional jump was not taken
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.ConditionalType.CONDTAKEN">
            <summary>
            The conditional jump was taken
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.ConditionalType.CONDCOMPLETE">
            <summary>
            The conditional jump was taken and fell though in the same trace
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.MoveLeft">
            <summary>
            Shift the graph left (actually moves the camera right)
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.MoveRight">
            <summary>
            Shift the graph right (actually moves the camera left)
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.MoveUp">
            <summary>
            Shift the graph up (actually moves the camera down)
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.MoveDown">
            <summary>
            Shift the graph down (actually moves the camera up)
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.ZoomIn">
            <summary>
            Move the camera forward towards the graph
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.ZoomOut">
            <summary>
            Move the camera back away from the graph
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.PitchXFwd">
            <summary>
            Tilt the plot forwards on the X axis
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.PitchXBack">
            <summary>
            Tilt the plot back on the X axis
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.YawYLeft">
            <summary>
            Turn the plot anticlockwise on the Y axis
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.YawYRight">
            <summary>
            Turn the plot clockwise on the Y axis
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.RollGraphZAnti">
            <summary>
            Roll the graph anti clockwise on the Z axis
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.RollGraphZClock">
            <summary>
            Roll the graph clockwise on the Z axis
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.CenterFrame">
            <summary>
            Center the graph so all nodes are in the frame
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.LockCenterFrame">
            <summary>
            Keep centering the graph so all nodes are in the frame
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.Cancel">
            <summary>
            Close the open dialog/menu
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.ToggleHeatmap">
            <summary>
            Toggle heatmap rendering on or off
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.ToggleConditionals">
            <summary>
            Toggle conditional rendering on or off
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.RaiseForceTemperature">
            <summary>
            Raise the force directed layout activity
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.ToggleAllText">
            <summary>
            Toggle the display of all text on or off
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.ToggleInsText">
            <summary>
            Toggle the display of instruction text on or off
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.ToggleLiveText">
            <summary>
            Toggle the display of animated text on or off
            </summary> 
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.QuickMenu">
            <summary>
            Toggle the quickmenu
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.CaptureGraphImage">
            <summary>
            Write an image of the graph to disk
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.CaptureGraphPreviewImage">
            <summary>
            Write an image of the graph and previews to disk
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.CaptureWindowImage">
            <summary>
            Write an image of the window to disk
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.ToggleVideo">
            <summary>
            Toggle video recording
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.PauseVideo">
            <summary>
            Pause video recording without ending the video
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.eSignatureType">
            <summary>
            Types of static binary signature
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eSignatureType.YARA">
            <summary>
            YARA
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eSignatureType.DIE">
            <summary>
            Detect it easy
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.LayoutStyles">
            <summary>
            Ways of laying out nodes
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.LayoutStyles.Style.CylinderLayout">
            <summary>
            Plot nodes in a spiralling cylinder
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.LayoutStyles.Style.ForceDirected3DNodes">
            <summary>
            Plot nodes so they repel each other and attract connected nodes
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.LayoutStyles.Style.ForceDirected3DBlocks">
            <summary>
            Plot blocks so they repel each other and attract connected blocks
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.LayoutStyles.Style.Circle">
            <summary>
            Plot nodes in a circle
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.LayoutStyles.Style.Invalid">
            <summary>
            No
            </summary>
        </member>
        <member name="M:rgat.CONSTANTS.LayoutStyles.RequiresCaching(rgat.CONSTANTS.LayoutStyles.Style)">
            <summary>
            This layout was computed and needs to be saved if it is to be restored
            </summary>
            <param name="layout">Layout type</param>
            <returns>Requires caching</returns>
        </member>
        <member name="M:rgat.CONSTANTS.LayoutStyles.IsForceDirected(rgat.CONSTANTS.LayoutStyles.Style)">
            <summary>
            True if the layout style is force directed
            </summary>
            <param name="layout">The layout style</param>
            <returns>True if the layout style is force directed</returns>
        </member>
        <member name="P:rgat.DetectItEasy.NewestSignature">
            <summary>
            Date of the newest signature in the DetectItEasy signatures directory of this machine
            </summary>
        </member>
        <member name="F:rgat.DetectItEasy.EndpointNewestSignature">
            <summary>
            Date of the newest signature in the DetectItEasy signatures directory of the remote machine
            </summary>
        </member>
        <member name="P:rgat.DetectItEasy.StaleRemoteSignatures">
            <summary>
            If the available signatures are newer than those on the remote host
            </summary>
        </member>
        <member name="M:rgat.DetectItEasy.ReplaceSignatures(System.Byte[])">
            <summary>
            Replace the DIE signatures directory
            </summary>
            <param name="zipfile">A zipfile of signatures</param>
        </member>
        <member name="M:rgat.GithubSignatureManager.PurgeRepoFiles(rgat.GlobalConfig.SignatureSource)">
            <summary>
            Remove the associated signature download directory for this repo
            Must be called before the removal of the repo metadata via DeleteSignatureSource
            </summary>
            <param name="repopath">Repo key</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.#ctor(Veldrid.GraphicsDevice,ImGuiNET.ImGuiController,System.String)">
            <summary>
            Runs the computation shaders on graph layout buffers 
            </summary>
            <param name="gdev">GPU GraphicsDevice to perform computation with</param>
            <param name="controller">An ImGuiController to load shader code from [todo: remove it from the controller, will need these in non-imgui runners]</param>
            <param name="name">A name to identify the layout engine in logfiles</param>
        </member>
        <member name="P:rgat.GraphLayoutEngine.EngineID">
            <summary>
            The unique name of the layout engine
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutEngine.GetScreenFitOffsets(rgat.PlottedGraph,System.Numerics.Matrix4x4,System.Numerics.Vector2,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
            Iterates over the position of every node, translating it to a screen position
            Returns the offsets of the furthest nodes of the edges of the screen
            To fit the graph in the screen, each offset needs to be as small as possible above 0
            
            Acquires reader lock
            </summary>
            <param name="graph">The graph being measured</param>
            <param name="graphWidgetSize">Size of the graph widget</param>
            <param name="xoffsets">xoffsets.X = distance of furthest left node from left of the widget. Ditto xoffsets.Y for right node/side</param>
            <param name="yoffsets">yoffsets.X = distance of furthest bottom node from base of the widget. Ditto yoffsets.Y for top node/side</param>
            <param name="zoffsets">zoffsets.X = distance of furthest bottom node from base of the widget. Ditto yoffsets.Y for top node/side</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.GetPreviewFitOffsets(System.Numerics.Vector2,rgat.PlottedGraph,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
            Iterate over all the nodes and figure out how far they are from the edges of the screen in each dimension
            </summary>
            <param name="graphWidgetSize">Size of the rendering widget</param>
            <param name="graph">Graph being displayed in the widget</param>
            <param name="xoffsets">Furthest from the left and right sides of the widget</param>
            <param name="yoffsets">Furthest from the top and bottom of the widget</param>
            <param name="zoffsets">Furthest from in front of/behind the camera lens in the Z direction</param>
            <returns>true if a meaningful result was returned</returns>
        </member>
        <member name="M:rgat.GraphLayoutEngine.FindHighXYZ(Veldrid.DeviceBuffer,System.Int32,System.Int32@)">
            <summary>
            Must have read lock to call
            Find the node with the highest x/y/z dimension. Ignores w.
            </summary>
            <param name="buf">Device buffer containing values (can be speeds or positions)</param>
            <param name="nodeCount">Number of nodes to iterate over</param>
            <param name="highIndex">set to the index of the highest node</param>
            <returns></returns>
        </member>
        <member name="M:rgat.GraphLayoutEngine.Compute(Veldrid.CommandList,rgat.PlottedGraph,System.Int32,System.Boolean)">
            <summary>
            Do the actual computation of graph layout and animation
            Uses the velocity shader to adjust the velocity based on relative positions
            Uses the position shader to move the nodes at the calculated velocity
            Adjusts the size/alpha of nodes based on the attribute buffer
            </summary>
            <param name="cl">Thread-specific command list</param>
            <param name="graph">Graph to perform computation on</param>
            <param name="mouseoverNodeID">The index of the node the users mouse is hovering over</param>
            <param name="isAnimated">If the graph should have animation attributes computed (ie: main graph with live/replay active)</param>
            <returns>The version ID associated with the produced graph layout computed</returns>
        </member>
        <member name="M:rgat.GraphLayoutEngine.RenderPosition(Veldrid.CommandList,rgat.PlottedGraph,Veldrid.ResourceSet,System.Single)">
            <summary>
            Used the velocity buffer to move the nodes in the positions buffer
            </summary>
            <param name="cl">Thread-specific Veldrid command list to use</param>
            <param name="graph">PlottedGraph to compute</param>
            <param name="resources">Position shader resource set</param>
            <param name="delta">A float representing how much time has passed since the last frame. Higher values => bigger movements</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.RenderVelocity(Veldrid.CommandList,rgat.PlottedGraph,Veldrid.ResourceSet,System.Single,System.Single)">
            <summary>
            Pass the graph plot through the velocity compute shader, to adjust the node velocity based on the positions of other nodes
            </summary>
            <param name="cl">Thread-specific Veldrid command list to use</param>
            <param name="graph">PlottedGraph to compute</param>
            <param name="resources">Velocity shader resource set</param>
            <param name="delta">A float representing how much time has passed since the last frame. Higher values => bigger movements</param>
            <param name="temperature">The activity level of the layout state. Higher balues => bigger movements</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.RenderNodeAttribs(Veldrid.CommandList,rgat.PlottedGraph,Veldrid.DeviceBuffer,Veldrid.ResourceSet,System.Single,System.Int32,System.Boolean)">
            <summary>
            Update the node attributes compute VRAM buffer (alpha, node size, mouseover details)
            </summary>
            <param name="cl">Thread-specific CommandList</param>
            <param name="graph">ProtoGraph being drawn</param>
            <param name="inputAttributes">Attributes buffer being updated</param>
            <param name="resources">Shader resources ResourceSet</param>
            <param name="delta">Time-delta from the last update</param>
            <param name="mouseoverNodeID">Index of the node the mouse is over</param>
            <param name="useAnimAttribs">Flag to specify the graph is in animated-alpha mode</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.ApplyHighlightAttributes(Veldrid.CommandList,rgat.PlottedGraph,Veldrid.DeviceBuffer)">
            <summary>
            Set the highlight state of nodes in the attributes buffer so they can be animated/have their icon set
            </summary>
            <param name="cl">Thread specific Veldrid CommandList</param>
            <param name="graph">Graph with highlights to apply</param>
            <param name="attribsBuf">Attributes buffer to apply highlight data to</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.SetHighlightedNodes(Veldrid.CommandList,System.Collections.Generic.List{System.UInt32},Veldrid.DeviceBuffer,rgat.CONSTANTS.HighlightType)">
            <summary>
            Set a node to highlighted in the attribute buffer
            </summary>
            <param name="cl">Thread specific Veldrid CommandList</param>
            <param name="nodeIdxs">List of node indexes to set as highlighted</param>
            <param name="attribsBuf">Attributes buffer to set highlight state in</param>
            <param name="highlightType">CONSTANTS.HighlightType of highlight [Currently unused, could be used to select the icon]</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.UnsetHighlightedNodes(Veldrid.CommandList,System.Collections.Generic.List{System.UInt32},Veldrid.DeviceBuffer)">
            <summary>
            Remove a nodes highlighted state in the attribute buffer
            </summary>
            <param name="cl">Thread specific Veldrid CommandList</param>
            <param name="nodeIdxs">List of node indexes to set as not highlighted</param>
            <param name="attribsBuf">Attributes buffer to set highlight state in</param>
        </member>
        <member name="P:rgat.GraphLayoutEngine.AverageComputeTime">
            <summary>
            Average time in Milliseconds taken by the GPU to perform a round of velocity/position/attribute computation
            Average computed over GlobalConfig.StatisticsTimeAvgWindow frames
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutEngine.DebugPrintOutputFloatBuffer(Veldrid.DeviceBuffer,System.String,System.Int32)">
            <summary>
            Read out some values from a DeviceBuffer and print them to the console. Just for debugging.
            </summary>
            <param name="buf">GPU DeviceBuffer to read</param>
            <param name="message">Caption for the printout</param>
            <param name="printCount">Max values to print</param>
        </member>
        <member name="T:rgat.GraphLayoutState">
            <summary>
            Contains the actual geometry of a renered graph as RAM and VRAM buffers
            Contains one set of VRAM buffers for active drawing and a dictionary
            of RAM buffers for previously computed states. This way we can switch between
            layouts without having to recompute them
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutState.#ctor(rgat.PlottedGraph,Veldrid.GraphicsDevice,rgat.CONSTANTS.LayoutStyles.Style)">
            <summary>
            Create buffers for a graph rendering
            </summary>
            <param name="graph">The graph the layout applies to</param>
            <param name="device">The graphicsdevice for VRAM operations</param>
            <param name="style">The intial style of the layout</param>
        </member>
        <member name="M:rgat.GraphLayoutState.Finalize">
            <summary>
            Destructor to log destruction
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GraphPlot">
            <summary>
            The graph for this layout
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState._gd">
            <summary>
            Veldrid GraphicsDevice for GPU operations
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.Style">
            <summary>
            The layout style currently plotted in the VRAM buffers
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState._VRAMBuffers">
            <summary>
            Active VRAM resident layout data for display and computation on the GPU
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.Positions1">
            <summary>
            Positions buffers, contains node positions
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.Positions2">
            <summary>
            Positions buffers, contains node positions
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.Velocities1">
            <summary>
            Velocity buffers, with the velocity of each node
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.Velocities2">
            <summary>
            Velocity buffers, with the velocity of each node
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.Attributes1">
            <summary>
            Node attributes buffers, contains node animation data
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.Attributes2">
            <summary>
            Node attributes buffers, contains node animation data
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.PresetPositions">
            <summary>
            Preset positions buffers, holds a target state for nodes to be moved towards
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.EdgeConnections">
            <summary>
            Edge connections, describes which nodes each node is connected to
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.EdgeConnectionIndexes">
            <summary>
            Edge Connection Indexes, used to speed up Edge connection buffer lookups
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.EdgeStrengths">
            <summary>
            Edge strengths, the attraction force between each connected node
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.BlockMetadata">
            <summary>
            Various descriptions of basic blocks, for the block-based layouts
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.RenderVersion">
            <summary>
            The current version of the layout, incremented every time a compute pass is done
            Used to compare RAM and VRAM buffers
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.Initialised">
            <summary>
            Have the buffers been assigned
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers.Style">
            <summary>
            The style of the layout in the active buffers
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.GPUBuffers._flop">
            <summary>
            Whether buffers 1 or 2 are being written to
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.PositionsVRAM1">
            <summary>
            First VRAM node postions buffer 
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.PositionsVRAM2">
            <summary>
            Second VRAM node postions buffer
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.VelocitiesVRAM1">
            <summary>
            First VRAM node velocity buffer 
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.VelocitiesVRAM2">
            <summary>
            First VRAM node velocity buffer 
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.AttributesVRAM1">
            <summary>
            First VRAM node attributes buffer
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.AttributesVRAM2">
            <summary>
            Second VRAM node attributes buffer
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.EdgeConnections">
            <summary>
            VRAM Edge connections buffer
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.EdgeConnectionIndexes">
            <summary>
            VRAM Edge connections indexes buffer
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.BlockMetadata">
            <summary>
            VRAM Basic Block descriptions buffer
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.EdgeStrengths">
            <summary>
            VRAM Edge attraction strenths buffer
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.PresetPositions">
            <summary>
            VRAM preset node postions buffer
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.RenderVersion">
            <summary>
            VRAM latest render version
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.Initialised">
            <summary>
            Are VRAM buffers initialised
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.ActivatingPreset">
            <summary>
            Is the layout currently snapping towards a preset layout
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.PresetStyle">
            <summary>
            Current preset style
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutState.IncrementPresetSteps">
            <summary>
            Increment and return the preset counter
            </summary>
            <returns>The preset counter</returns>
        </member>
        <member name="M:rgat.GraphLayoutState.IncrementVersion">
            <summary>
            Increment the VRAM layout version
            </summary>
        </member>
        <member name="P:rgat.GraphLayoutState.Lock">
            <summary>
            Get the VRAM buffer lock
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutState.flip">
            <summary>
            Flip to the next buffer set and return the flop result
            </summary>
            <returns>flop (which buffer set to use)</returns>
        </member>
        <member name="T:rgat.GraphLayoutState.CPUBuffers">
            <summary>
            RAM stored layout states
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutState.CPUBuffers.#ctor(rgat.CONSTANTS.LayoutStyles.Style)">
            <summary>
            Create a RAM storage object for a layout state
            </summary>
            <param name="style">The style of the layout</param>
        </member>
        <member name="F:rgat.GraphLayoutState.CPUBuffers.PositionsArray">
            <summary>
            Stored node positions
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.CPUBuffers.VelocityArray">
            <summary>
            Stored node velocities
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.CPUBuffers.NodeAttribArray">
            <summary>
            Stored node attributes
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.CPUBuffers.PresetPositions">
            <summary>
            Stored node preset positions
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.CPUBuffers.RenderVersion">
            <summary>
            Layout version of the stored state
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.CPUBuffers.EdgeCount">
            <summary>
            Number of edges rendered in the stored state
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.CPUBuffers.Style">
            <summary>
            Layout style of the stored state
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.CPUBuffers.EdgeConnections">
            <summary>
            Edge connection descriptors
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.CPUBuffers.EdgeConnectionIndexes">
            <summary>
            Edge connection buffer indexes
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.CPUBuffers.EdgeStrengths">
            <summary>
            The attraction strength of each edge 
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.CPUBuffers.BlockMetadata">
            <summary>
            Basic Block metadata
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutState.LockedUploadStateToVRAM(rgat.GraphLayoutState.CPUBuffers)">
            <summary>
            Must hold writer lock
            Refreshes VRAM layout buffers from cached RAM data
            </summary>
            <param name="_gd"></param>
        </member>
        <member name="M:rgat.GraphLayoutState.SyncRAMToVRAM(rgat.CONSTANTS.LayoutStyles.Style)">
            <summary>
            Upload the CPUBuffers for a specific layout into VRAM
            </summary>
            <param name="layout">The layout state to be uploaded</param>
        </member>
        <member name="M:rgat.GraphLayoutState.DownloadStateFromVRAM">
            <summary>
            must hold write lock
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutState.RegenerateEdgeDataBuffers(rgat.PlottedGraph)">
            <summary>
            Must hold writer lock before calling
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutState.CreateEdgeDataBuffers(rgat.PlottedGraph)">
            <summary>
            This buffer list the index of every node each node is connected to
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:rgat.GraphLayoutState.CreateBlockMetadataBuffer(rgat.PlottedGraph)">
            Creates an array of metadata for basic blocks used for basic-block-centric graph layout
        </member>
        <member name="M:rgat.GraphLayoutState.AddNewNodesToComputeBuffers(System.Int32,rgat.PlottedGraph)">
            <summary>
            Must have upgradable readlock
            </summary>
            <param name="finalCount"></param>
        </member>
        <member name="M:rgat.GraphLayoutState.ResizeComputeBuffers(rgat.PlottedGraph,System.UInt32,Veldrid.CommandList,System.Collections.Generic.List{Veldrid.DeviceBuffer}@)">
            <summary>
            Must hold writer lock before calling
            </summary>
            <param name="bufferSize"></param>
        </member>
        <member name="M:rgat.GraphLayoutState.GetAttributes(rgat.CONSTANTS.LayoutStyles.Style,System.Single[]@)">
            <summary>
            Get the stored (RAM) attribute buffers 
            Must hold upgradable read lock
            </summary>
            <param name="layoutStyle">The saved plot</param>
            <param name="buf">The outout float buffer containing the retrieved values</param>
            <returns>true if found</returns>
        </member>
        <member name="T:rgat.GraphLayoutState.PositionResetStyle">
            <summary>
            Layout randomisation methods
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.PositionResetStyle.Scatter">
            Scatter in a wide area
        </member>
        <member name="F:rgat.GraphLayoutState.PositionResetStyle.Explode">
            Gather in a tiny mass
        </member>
        <member name="F:rgat.GraphLayoutState.PositionResetStyle.Implode">
            Distribute around the edge
        </member>
        <member name="M:rgat.GraphLayoutState.Reset(rgat.GraphLayoutState.PositionResetStyle)">
            <summary>
            Cause a force directed plot to be randomly re-distributed in the
            specified style. Use this to try a different arrangement.
            </summary>
            <param name="resetMethod">The initial randomisation method</param>
        </member>
        <member name="M:rgat.GraphLayoutState.ExplodePositions(rgat.GraphLayoutState.CPUBuffers)">
            <summary>
            Distributes the nodes in a concentrated central mass so they repel each other out
            and then into arrangement
            </summary>
            <param name="layoutRAMBuffers">CPUBuffers of the plot to be randomised</param>
        </member>
        <member name="M:rgat.GraphLayoutState.ImplodePositions(rgat.GraphLayoutState.CPUBuffers)">
            <summary>
            Distributes the nodes on the edge of a sphere. 
            Attraction dominates the intial stages of layout
            </summary>
            <param name="layoutRAMBuffers">CPUBuffers of the plot to be randomised</param>
        </member>
        <member name="M:rgat.GraphLayoutState.ScatterPositions(rgat.GraphLayoutState.CPUBuffers)">
            <summary>
            Distributes the nodes randomly in a wide area. 
            Balance of attraction and repulsion will move them into position
            </summary>
            <param name="layoutRAMBuffers">CPUBuffers of the plot to be randomised</param>
        </member>
        <member name="M:rgat.Logging.APICALL.DeserialiseEffects(Newtonsoft.Json.Linq.JToken,rgat.Logging.APICALL)">
            <summary>
            Implementing effects as derived classes means safe deserialisation is quite clunky
            </summary>
            <param name="deTok">JToken of the APICALL details</param>
            <param name="apiObj">APICALL being deserialised</param>
            <returns></returns>
        </member>
        <member name="M:rgat.Logging.GetTextFilterCounts">
            <summary>
            Get the number of log messages recorded for each filter
            </summary>
            <returns> A dictionary of filter/count values</returns>
        </member>
        <member name="M:rgat.Logging.GetAlerts(System.Int32,rgat.Logging.LOG_EVENT[]@)">
            <summary>
            Get the most recent alerts/errors to inform the user about
            </summary>
            <param name="max">Maximum number to retrieve</param>
            <param name="alerts">An output array of alert events</param>
            <returns>The number of events returned</returns>
        </member>
        <member name="M:rgat.Logging.ClearAlertsBox">
            <summary>
            Acknowledge the latest alerts, stop displaying them on the UI
            </summary>
        </member>
        <member name="M:rgat.Logging.RecordLogEvent(System.String,rgat.Logging.LogFilterType,rgat.ProtoGraph,rgat.TraceRecord)">
            <summary>      
            Display a message in the logfile/message window.
            Will also be shown on the UI alert pane with the Alert/Error options
            </summary>
            <param name="text">Message to display</param>
            <param name="filter">The LogFilterType category of the log entry
            </param>
            <param name="graph">Graph this applies to. If aimed at a trace, just use any graph of the trace</param>
            <param name="trace">Process this applies to</param>     
        </member>
        <member name="M:rgat.Logging.RecordError(System.String,rgat.ProtoGraph,rgat.TraceRecord)">
            <summary>
            This is just an alias for  RecordLogEvent( filter: TextError);
            </summary>
            <param name="text">Error text</param>
            <param name="graph">Graph the error applies to (optional)</param>
            <param name="trace">Trace the error applies to (optional)</param>
        </member>
        <member name="T:rgat.NodeData">
            <summary>
            An object representing an executed instruction on the graph
            </summary>
        </member>
        <member name="M:rgat.NodeData.Serialise">
            <summary>
            Serialise this node to JSON for saving
            </summary>
            <returns>A JArray of ndoe data</returns>
        </member>
        <member name="M:rgat.NodeData.Deserialise(Newtonsoft.Json.Linq.JArray,rgat.ProcessRecord)">
            <summary>
            Restore a node from JSON
            </summary>
            <param name="nodeData">JArray of node data</param>
            <param name="processinfo">The process record this node was generated with</param>
            <returns></returns>
        </member>
        <member name="M:rgat.NodeData.VertType">
            <summary>
            The control flow type of this node
            </summary>
            <returns>An eEdgeNodeType value</returns>
        </member>
        <member name="M:rgat.NodeData.CreateLabel(rgat.PlottedGraph,System.Int32)">
            <summary>
            This creates the label drawn on the graph
            For symbol labels drawn in logs/analysis tabs see CreateColourisedSymbolCall
            </summary>
            <param name="plot">Graph the label belongs to</param>
            <param name="specificCallIndex">Index of the APi call in the graph</param>
        </member>
        <member name="M:rgat.NodeData.CreateSymbolLabel(rgat.ProtoGraph,System.Int32)">
            <summary>
            Create a label for an API call with symbol + arguments
            </summary>
            <param name="graph">The graph for the thread the call was made in</param>
            <param name="specificCallIndex">The index of the API call in the graph</param>
            <returns>The label</returns>
        </member>
        <member name="M:rgat.NodeData.CreateColourisedSymbolCall(rgat.ProtoGraph,System.Int32,rgat.WritableRgbaFloat,rgat.WritableRgbaFloat)">
            <summary>
            Produces a list of api string/colour tuples for displaying in trace analysis lists
            </summary>
            <param name="graph">The graph of the thread that made the call</param>
            <param name="specificCallIndex">The index of the call</param>
            <param name="colour1">The colour of the API text</param>
            <param name="colour2">The colour of the argument texts</param>
            <returns></returns>
        </member>
        <member name="P:rgat.NodeData.Highlighted">
            <summary>
            Is this node highlighted
            </summary>
        </member>
        <member name="M:rgat.NodeData.SetHighlighted(System.Boolean)">
            <summary>
            Mark this nodes highlight state
            </summary>
            <param name="state"></param>
        </member>
        <member name="F:rgat.NodeData.Index">
            <summary>
            The index of this node in the node array and various node collections
            </summary>
        </member>
        <member name="P:rgat.NodeData.IsConditional">
            <summary>
            The node is a conditional jump instruction
            </summary>
        </member>
        <member name="F:rgat.NodeData.conditional">
            <summary>
            The conditional jump status (how it executed)
            </summary>
        </member>
        <member name="F:rgat.NodeData.ins">
            <summary>
            The disassembled instruction
            </summary>
        </member>
        <member name="P:rgat.NodeData.IsExternal">
            <summary>
            The node is an entry to uninstrumented code
            </summary>
        </member>
        <member name="F:rgat.NodeData.ThunkCaller">
            <summary>
            The node calls an API thunk
            </summary>
        </member>
        <member name="F:rgat.NodeData.GlobalModuleID">
            <summary>
            The module the node belongs to
            </summary>
        </member>
        <member name="F:rgat.NodeData.BlockID">
            <summary>
            The block the node belongs to
            </summary>
        </member>
        <member name="F:rgat.NodeData.callRecordsIndexs">
            <summary>
            An index used to lookup the caller/arguments of each instance of this being called
            </summary>
        </member>
        <member name="F:rgat.NodeData.currentCallIndex">
            <summary>
            The latest call index
            </summary>
        </member>
        <member name="F:rgat.NodeData.Dirty">
            <summary>
            The node needs its label regenerating
            </summary>
        </member>
        <member name="F:rgat.NodeData.childexterns">
            <summary>
            number of external functions called
            </summary>
        </member>
        <member name="F:rgat.NodeData.address">
            <summary>
            Memory address of the node instruction
            </summary>
        </member>
        <member name="F:rgat.NodeData.parentIdx">
            <summary>
            Which instruction first lead to this node
            </summary>
        </member>
        <member name="P:rgat.NodeData.executionCount">
            <summary>
            How many times the instruction has been recorded executing
            </summary>
        </member>
        <member name="M:rgat.NodeData.SetExecutionCount(System.UInt64)">
            <summary>
            Set the execution count
            </summary>
            <param name="value">How many times the instruction has been recorded executing</param>
        </member>
        <member name="M:rgat.NodeData.IncreaseExecutionCount(System.UInt64)">
            <summary>
            Add a number to the execution count of this node
            </summary>
            <param name="value">Number of new executions recorded</param>
        </member>
        <member name="F:rgat.NodeData.heatRank">
            <summary>
            How often the instruction is executed relative to other instuctions (0 [least] to 9 [most])
            </summary>
        </member>
        <member name="F:rgat.NodeData.IncomingNeighboursSet">
            <summary>
            Sources for this node
            </summary>
        </member>
        <member name="F:rgat.NodeData.OutgoingNeighboursSet">
            <summary>
            Targets for this node
            </summary>
        </member>
        <member name="F:rgat.NodeData.HasSymbol">
            <summary>
            The node has a symbol associated with it
            </summary>
        </member>
        <member name="P:rgat.NodeData.Label">
            <summary>
            Get the node label text
            </summary>
        </member>
        <member name="T:rgat.OperationModes.BridgedRunner">
            <summary>
            Runs rgat as a headless proxy which allows an rgat instance on a remote machine to control tracing and receive raw trace data
            This does not require access to a GPU
            </summary>
        </member>
        <member name="M:rgat.OperationModes.BridgedRunner.RunHeadless(rgat.BridgeConnection)">
            <summary>
            Runs in headless mode which either connects to (command line -r) or waits for connections
            from (command line -p) a controlling UI mode rgat instance
            This does not use the GPU
            </summary>
        </member>
        <member name="M:rgat.OperationModes.BridgedRunner.ParseTraceMeta(System.Byte[],rgat.TraceRecord@,System.String[]@)">
            <summary>
            Parse internal control information used to setup/manage remote tracing
            </summary>
            <param name="infoBytes">The raw bytes of the data</param>
            <param name="trace">The trace the metadata applies to</param>
            <param name="metaparams">The metadata string items produced</param>
            <returns></returns>
        </member>
        <member name="T:rgat.OperationModes.CommandLineRunner">
            <summary>
            Runs rgat locally, without a GUI. Can be run without the GPU at all to generate a trace file, 
            or with the GPU to generate a video or image
            </summary>
        </member>
        <member name="M:rgat.OperationModes.CommandLineRunner.#ctor">
            <summary>
            Create a commandline runner
            </summary>
        </member>
        <member name="M:rgat.OperationModes.CommandLineRunner.InitNoGPU">
            <summary>
            Initialise for GPU-less operations, such as on an analysis sandbox were only tracing will be performed
            </summary>
        </member>
        <member name="T:rgat.OperationModes.ImGuiRunner">
            <summary>
            Creates and manages a Veldrid/ImGui based rgat GUI
            This requires access to a GPU (with Vulkan drivers)
            </summary>
        </member>
        <member name="M:rgat.OperationModes.ImGuiRunner.Run">
            <summary>
            Runs a standard UI window loop using ImGui
            </summary>
        </member>
        <member name="M:rgat.OperationModes.ImGuiRunner.InitEventHandlers">
            <summary>
            Should be called after config is loaded to benefit from keybind config
            </summary>
        </member>
        <member name="T:rgat.PlottedGraph">
            <summary>
            Represents the graphical rendering of a thread (ProtoGraph)
            </summary>
        </member>
        <member name="T:rgat.PlottedGraph.REPLAY_STATE">
            <summary>
            The animation replay state of this graph
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.REPLAY_STATE.Stopped">
            <summary>
            Not being replayed
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.REPLAY_STATE.Playing">
            <summary>
            Currently being played
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.REPLAY_STATE.Paused">
            <summary>
            Paused in an animated state
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.REPLAY_STATE.Ended">
            <summary>
            Awaiting reset to a stopped state
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.#ctor(rgat.ProtoGraph,Veldrid.GraphicsDevice)">
            <summary>
            Create a plotted graph
            </summary>
            <param name="protoGraph">ProtoGraph of the thread</param>
            <param name="device">GraphicsDevice of the GPU this thread is being rendered on</param>
        </member>
        <member name="M:rgat.PlottedGraph.RenderGraph">
            <summary>
            Takes edges that have been through the trace processor worker and
            inserts them into the graphcis buffers for layout/drawing
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.SeekToAnimationPosition(System.Single)">
            <summary>
            Seek to a user specified position in the replay
            </summary>
            <param name="position">A position in the replay from 0-1</param>
        </member>
        <member name="M:rgat.PlottedGraph.ProcessReplayUpdates">
            <summary>
            Process more animation replay updates
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.LastAnimatedVert">
            <summary>
            Last instruction that was replayed
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.ResetAnimation">
            <summary>
            Reset the replay animation state
            This should only ever be called from the maingraph rendering thread
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.GetAnimationProgress">
            <summary>
            How far the animation as progressed through the recorded animation entries
            </summary>
            <returns>Progress as a float from 0-1</returns>
        </member>
        <member name="P:rgat.PlottedGraph.BeingDeleted">
            <summary>
            probably defunct. todo for when trace deletion is implemented
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.SetAnimated(System.Boolean)">
            <summary>
            Set the graph animation state
            </summary>
            <param name="newState">animated or not</param>
        </member>
        <member name="M:rgat.PlottedGraph.StepPausedAnimation(System.Int32)">
            <summary>
            Move forward in the animation
            </summary>
            <param name="steps">The number of animation entries to process</param>
        </member>
        <member name="M:rgat.PlottedGraph.PlayPauseClicked">
            <summary>
            Toggle replay paused state
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.ResetClicked">
            <summary>
            Schedule the animation to be reset
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.RenderingComplete">
            <summary>
            Are all of the edges rendered
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.render_new_blocks">
            <summary>
            Construct more graph geometry from un-rendered edges in the ProtoGraph
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.GeneratePresetPositions(rgat.CONSTANTS.LayoutStyles.Style)">
            <summary>
            Create a preset graph layout for the specified style
            If force directed it will retrieve a saved layout if available, or randomise if not
            </summary>
            <param name="style">The layout style</param>
            <returns>Positions for each node</returns>
        </member>
        <member name="M:rgat.PlottedGraph.GetIllustrationEdges(System.Collections.Generic.List{System.UInt32}@)">
            <summary>
            Get geometry and colour of various non-instruction edges like highlights and wireframes
            </summary>
            <param name="edgeIndices">Output list of illustration edge indexes</param>
            <returns>Output edge geometry</returns>
        </member>
        <member name="M:rgat.PlottedGraph.WireframeStyle">
            <summary>
            The style of wireframe to draw for this graph
            </summary>
            <returns>Layout style</returns>
        </member>
        <member name="M:rgat.PlottedGraph.IncreaseTemperature">
            <summary>
            Increase the activity level of a force directed plot
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.IncreaseTemperature(System.Single)">
            <summary>
            Set the temperature of a force directed plot
            </summary>
            <param name="temp">Activity level</param>
        </member>
        <member name="M:rgat.PlottedGraph.GetEdgeRenderingData(System.Single[]@,System.Int32[]@,System.Int32[]@)">
            <summary>
            Create an array listing the index of every neighbour of every node
            Also initialises the edge strength array, 
            </summary>
            <returns>If there was data</returns>
        </member>
        <member name="M:rgat.PlottedGraph.GetNodeNeighbourDataOffsets">
            <summary>
            Lists the first and last+1 edge index that this node is connected to
            usage:
              selfedgei = edgeindices[index]
              firstedge, endedge = selfedgei.x, selfedgei.y
              uint neighbour = edgeData[firstedge to endedge-1];
               nodePosition = positions[neighbour];
            </summary>
            <returns></returns>
        </member>
        <member name="M:rgat.PlottedGraph.GetBlockRenderingMetadata">
            Creates an array of metadata for basic blocks used for basic-block-centric graph layout
        </member>
        <member name="M:rgat.PlottedGraph.CreateBlockMetadataBuf(System.Int32)">
            <summary>
            Creates an array of metadata for basic blocks used for basic-block-centric graph layout
            item[0] = blockID
            item[1] = offsetFromCenter; number of nodes ahead the center node is
            item[2] = centerPseudoBlockTopID; top of the block this node is in
            item[3] = centerPseudoBlockBaseID; base of the block this node is in
            </summary>
            <param name="nodecount">Number of nodes to add. This isn't just taken from nodelist because
            it may be intended for a texture of a certain size</param>
        </member>
        <member name="F:rgat.PlottedGraph.DrawnEdgesCount">
            <summary>
            Number of node->node edges that have been rendered
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.CreateBlankPresetLayout">
            <summary>
            Create a new blank preset layout for this graph
            </summary>
            <returns>Positions of the preset nodes</returns>
        </member>
        <member name="M:rgat.PlottedGraph.ResetPlot(rgat.GraphLayoutState.PositionResetStyle)">
            <summary>
            Reset the layout state for drawing a new plot
            </summary>
            <param name="resetStyle">How to distribute the reset nodes</param>
        </member>
        <member name="M:rgat.PlottedGraph.BeginNewLayout">
            <summary>
            Reset the layout tracking statistics and reset the temperature to a high value
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.GetNodeColor(System.Int32,rgat.CONSTANTS.eRenderingMode,rgat.WritableRgbaFloat[])">
            <summary>
            Get the colour of the node for the specified rendering style
            </summary>
            <param name="nodeIndex">Index of the node</param>
            <param name="renderingMode">Rendering style</param>
            <param name="themeGraphColours">Array of theme colours</param>
            <returns>The node colour</returns>
        </member>
        <member name="M:rgat.PlottedGraph.GetEdgeColor(System.Tuple{System.UInt32,System.UInt32},rgat.CONSTANTS.eRenderingMode)">
            <summary>
            Get the colour of this edge in the specified mode
            </summary>
            <param name="edge">The nodeIndex->nodeIndex description of the edge</param>
            <param name="renderingMode">The rendering mode</param>
            <returns>The colour of the edge</returns>
        </member>
        <member name="P:rgat.PlottedGraph.RenderingMode">
            <summary>
            Get the currently selected rendering mode of the graph (heatmap, etc)
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.GetMaingraphNodeVerts(rgat.CONSTANTS.eRenderingMode,System.Collections.Generic.List{System.UInt32}@,rgat.VeldridGraphBuffers.Position2DColour[]@,System.Collections.Generic.List{System.Tuple{System.String,System.UInt32}}@)">
            <summary>
            Get the node drawing data for the preview version of this graph
            </summary>
            <param name="renderingMode">Rendering mode (heatmap, etc)</param>
            <param name="nodeIndices">Output node indexes</param>
            <param name="nodePickingColors">Output node mouse hover picking data</param>
            <param name="captions">Node caption texts</param>
            <returns>Node drawing data</returns>
        </member>
        <member name="M:rgat.PlottedGraph.GetPreviewgraphNodeVerts(rgat.CONSTANTS.eRenderingMode,System.Collections.Generic.List{System.UInt32}@)">
            <summary>
            Get the node drawing data for the preview version of this graph
            </summary>
            <param name="renderingMode">Rendering mode of the preview</param>
            <param name="nodeIndices">Output node index list</param>
            <returns>Node geometry array</returns>
        </member>
        <member name="M:rgat.PlottedGraph.GetEdgeLineVerts(rgat.CONSTANTS.eRenderingMode,System.Collections.Generic.List{System.UInt32}@,System.Int32@,System.Int32@)">
            <summary>
            Get the geometry and colour of every edge
            </summary>
            <param name="renderingMode">Rendering mode (standard, heatmap, etc)</param>
            <param name="edgeIndices">Output list of edge indexes for drawing</param>
            <param name="vertCount">Output number of edge vertics to draw</param>
            <param name="graphDrawnEdgeCount">The number of edges being drawn</param>
            <returns></returns>
        </member>
        <member name="M:rgat.PlottedGraph.dataTextureSize(System.Int32)">
            <summary>
            Size of data textures for compute shaders
            </summary>
            <param name="num">Node count</param>
            <returns>Texture size</returns>
        </member>
        <member name="M:rgat.PlottedGraph.Add_to_callstack(System.UInt64,System.UInt32)">
            <summary>
            unused
            </summary>
            <param name="address">address</param>
            <param name="idx">index</param>
        </member>
        <member name="M:rgat.PlottedGraph.ProcessLiveAnimationUpdates">
            <summary>
            Process more animation updates from a live trace
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.ApplyMouseWheelDelta(System.Single)">
            <summary>
            Action the movement of the mousewheel to zoom the graph in or out
            </summary>
            <param name="delta">How far the mousewheel moved</param>
        </member>
        <member name="M:rgat.PlottedGraph.ApplyMouseDragDelta(System.Numerics.Vector2)">
            <summary>
            Move the camera in response to user mouse dragging
            </summary>
            <param name="delta">How far the mouse was dragged</param>
        </member>
        <member name="M:rgat.PlottedGraph.GetProjectionMatrix(System.Single)">
            <summary>
            Get the projection matrix of the current camera
            </summary>
            <param name="aspectRatio">Aspect Ratio</param>
            <returns></returns>
        </member>
        <member name="M:rgat.PlottedGraph.GetViewMatrix">
            <summary>
            Get the view matrix of the current camera position
            </summary>
            <returns>View Matrix</returns>
        </member>
        <member name="M:rgat.PlottedGraph.GetPreviewViewMatrix">
            <summary>
            Get the view matrix of the preview camera
            </summary>
            <returns>View Matrix</returns>
        </member>
        <member name="M:rgat.PlottedGraph.InitPreviewTexture(System.Numerics.Vector2,Veldrid.GraphicsDevice)">
            <summary>
            Create a new preview texture for the graph
            </summary>
            <param name="size">Size of the texture</param>
            <param name="gd">GraphicsDevice for to create the texture on</param>
        </member>
        <member name="M:rgat.PlottedGraph.AddNewEdgesToLayoutBuffers(System.Int32)">
            <summary>
            Add new edges to the layout buffer
            Must have upgradable read lock
            </summary>
            <param name="edgesCount"></param>
        </member>
        <member name="F:rgat.PlottedGraph.HighlightsChanged">
            <summary>
            Signals that the user has changed the highlighted nodes
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.GetCustomHighlightColour(System.Int32)">
            <summary>
            Get the highlight colour of the node
            </summary>
            <param name="nodeIdx">Index of the node</param>
            <returns>Colour of the node, if a custom colour was found, otherwise null</returns>
        </member>
        <member name="M:rgat.PlottedGraph.SetCustomHighlightColour(System.Int32,System.Numerics.Vector4)">
            <summary>
            Set a custom colour for the specified node
            </summary>
            <param name="nodeIdx">Index of the node</param>
            <param name="colour">Custom colour</param>
        </member>
        <member name="M:rgat.PlottedGraph.AddHighlightedNodes(System.Collections.Generic.List{System.UInt32},rgat.CONSTANTS.HighlightType)">
            <summary>
            Set the list of nodes as highlighted
            must hold read lock
            </summary>
            <param name="newnodeidxs">Nodes to highlight</param>
            <param name="highlightType">Type of highlight</param>
        </member>
        <member name="M:rgat.PlottedGraph.AddHighlightedAddress(System.UInt64)">
            <summary>
            Set an address as highlighted on the graph plot
            </summary>
            <param name="address">The address to highlight</param>
        </member>
        <member name="M:rgat.PlottedGraph.GetActiveNodeIndexes(System.Collections.Generic.List{System.UInt32}@,System.Collections.Generic.List{System.UInt32}@,System.UInt32[]@)">
            <summary>
            Get the indexes of any nodes that have > minimum alpha in animated mode
            Pulsed and deactivated nodes will only be fetched once by this call, the rest is handled by the attributes shader
            </summary>
            <param name="pulseNodes">Nodes which have been temporarily pulsed</param>
            <param name="lingerNodes">Nodes which remain brightened until cleared</param>
            <param name="deactivatedNodes">Nodes which are no longer active and faded to the base alpha, ready to be cleared from the active list</param>
        </member>
        <member name="M:rgat.PlottedGraph.SetFurthestNodeDimension(System.Int32,System.Single)">
            <summary>
            Sets the coordinate of the furthest node from the origin
            Used for drawing the force directed layout wireframe, where the distance of this node from the origin is used as the radius
            </summary>
            <param name="index">Index of the far node</param>
            <param name="farDimension">Greatest (absolute) coordinate of any node</param>
        </member>
        <member name="M:rgat.PlottedGraph.SetLayout(rgat.CONSTANTS.LayoutStyles.Style)">
            <summary>
            Change the layout of the graph
            </summary>
            <param name="newStyle">The style to change it to</param>
            <returns></returns>
        </member>
        <member name="F:rgat.PlottedGraph.HighlightedSymbolNodes">
            <summary>
            Indexes of highlighted symbol nodes
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.HighlightedAddressNodes">
            <summary>
            Indexes of highlighted address nodes
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.HighlightedAddresses">
            <summary>
            Highlighted addresses
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.HighlightedExceptionNodes">
            <summary>
            Indexes of highlighted exception nodes
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.AllHighlightedNodes">
            <summary>
            Indexes of all highlighted nodes
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.DeletedHighlights">
            <summary>
            Indexes of nodes to have their highlight removed by the layout engine
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.NewHighlights">
            <summary>
            Indexes of nodes which need highlight adding by the layout engine
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.IsAnimated">
            <summary>
            The graph is in an animated (running or replay) state
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.Opt_NodesVisible">
            <summary>
            Nodes are being drawn
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.Opt_EdgesVisible">
            <summary>
            Edges are being drawn
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.Opt_TextEnabled">
            <summary>
            Text is being drawn
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.Opt_TextEnabledIns">
            <summary>
            Instruction text is being drawn
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.Opt_TextEnabledSym">
            <summary>
            Symbol text is being drawn
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.Opt_ShowNodeAddresses">
            <summary>
            The addresses of nodes are added to their label
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.Opt_ShowNodeIndexes">
            <summary>
            Whether node labels will include the internal index of the node
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.Opt_ShowSymbolModules">
            <summary>
            Whether symbols will show the modules they reside in
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.Opt_ShowSymbolModulePaths">
            <summary>
            Whether symbol labels include the full path of the module
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.Opt_TextEnabledLive">
            <summary>
            Enable animated live instruction text
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.Opt_LiveNodeEdgeEnabled">
            <summary>
            Enable an illustration edge that points to the most recently animated instruction
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph._unprojWorldCoordTL">
            <summary>
            Estimated world space coordinates for the top left and right of the screen
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph._unprojWorldCoordBR">
            <summary>
            Estimated world space coordinates for the top left and right of the screen
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.UpdatePreviewVisibleRegion(System.Numerics.Vector2)">
            <summary>
            Gather values for calculating the camera indicator box in the preview window
            </summary>
            <param name="graphWidgetSize">Size of the main graph widget</param> // weird parameter?
        </member>
        <member name="M:rgat.PlottedGraph.GetPreviewVisibleRegion(System.Numerics.Vector2,System.Numerics.Matrix4x4,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
            Use the values from UpdatePreviewVisibleRegion to work out where to draw the preview camera box
            </summary>
            <param name="PrevWidgetSize">Size of the preview pane box for the graph</param>
            <param name="previewProjection">Projection matrix for the preview graph</param>
            <param name="TopLeft">Top left value for the camera</param>
            <param name="BaseRight">Base right value for the camera</param>
        </member>
        <member name="M:rgat.PlottedGraph.MoveCameraToPreviewClick(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Matrix4x4)">
            <summary>
            Move the camera in the main graph widget towards the location clicked in the preview graph widget
            </summary>
            <param name="pos">Click position</param>
            <param name="previewSize">Size of the graph in the preview pane</param>
            <param name="mainGraphWidgetSize">Size of the graph in the main pane</param>
            <param name="previewProjection">Projection matrix for the preview graph</param>
        </member>
        <member name="F:rgat.PlottedGraph.ThreadCallStack">
            <summary>
            This was used to render call/returns in the graph layout
            Currently unimplemented but keeping it around
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.InternalProtoGraph">
            <summary>
            The main 'graph' datastore
            Stores both the raw trace data for the graph and the processed connections between instructions
            The data can be used to plot graphical layouts
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.graphColours">
            <summary>
            A cache of graph geometry colours for different types of node/edge
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.ActiveLayoutStyle">
            <summary>
            The current layout format of the graph
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.LayoutState">
            <summary>
            The actual store of graphical data for the graph layout
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph._previewFramebuffer1">
            <summary>
            Framebuffers for the preview texture
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph._previewFramebuffer2">
            <summary>
            Framebuffers for the preview texture
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.GetPreviewFramebuffer(Veldrid.Framebuffer@)">
            <summary>
            Get the preview framebuffer that is currently being written to for writing
            </summary>
            <param name="drawtarget">output buffer</param>
        </member>
        <member name="M:rgat.PlottedGraph.ReleasePreviewFramebuffer">
            <summary>
            The framebuffer has been written. Swap it with the other one.
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.GetLatestTexture(Veldrid.Texture@)">
            <summary>
            Get the main graph texture that is not currently being written to for reading
            </summary>
            <param name="graphtexture"></param>
        </member>
        <member name="M:rgat.PlottedGraph.RecordComputeTime(System.Int64)">
            <summary>
            Update the graph computation time stats
            </summary>
            <param name="ms">Time taken for the latest round of velocity/position computation in Milliseconds</param>
        </member>
        <member name="M:rgat.PlottedGraph.ResetLayoutStats">
            <summary>
            Reset the tracking info for layout time/steps
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.ComputeLayoutTime">
            <summary>
            How many MS were spent in compute shaders for this layout
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.ComputeLayoutSteps">
            <summary>
            How many rounds of computation were completed for this layout
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.CameraZoom">
            <summary>
            The current main camera zoom
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.CameraXOffset">
            <summary>
            Main camera X offset
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.CameraYOffset">
            <summary>
            Main camera Y offset
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.PreviewCameraXOffset">
            <summary>
            The currentt preview camera zoom
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.PreviewCameraYOffset">
            <summary>
            The current preview camera X offset
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.PreviewCameraZoom">
            <summary>
            The current preview camera Y offset
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.CameraFieldOfView">
            <summary>
            Field of view value for the main camera
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.CameraClippingFar">
            <summary>
            Far clippling limit for the main camera
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.CameraClippingNear">
            <summary>
            Near clipping limit for the main camera
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.RotationMatrix">
            <summary>
            Rotation matrix for the main camera
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.PID">
            <summary>
            Process ID of this graph
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.TID">
            <summary>
            Thread ID of this graph
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.AnimationRate">
            <summary>
            How many trace items are processed per animation replay step
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.unchainedWaitFrames">
            <summary>
            This used to add some delay for unchained areas. Unused at the moment but keeping it around
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.AnimationIndex">
            <summary>
            Which trace record item the animation is running in
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph._userSelectedAnimPosition">
            <summary>
            A custom animation position set by the user clicking the replay bar
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.ReplayState">
            <summary>
            Animation replay state
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.textLock">
            <summary>
            main lock for access to this objects data
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.GraphNodeCount">
            <summary>
            Number of nodes recorded in this threads trace
            </summary>
            <returns>Number of nodes</returns>
        </member>
        <member name="M:rgat.PlottedGraph.RenderedNodeCount">
            <summary>
            Number of nodes drawn on this graph
            </summary>
            <returns>Number of nodes</returns>
        </member>
        <member name="F:rgat.PlottedGraph._graphStructureBalanced">
            <summary>
            The list of nodes and edges where each node connects to its partner and that node connects back
            This is used for the attraction velocity computation
            </summary>
                   
        </member>
        <member name="F:rgat.PlottedGraph._graphStructureLinear">
            <summary>
            The raw list of nodes with a one way edge they connect to
            This is used for drawing nodes and edges
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.Temperature">
            <summary>
            Force-directed layout activity of this graph
            </summary>
        </member>
        <member name="T:rgat.ProcessRecord">
            <summary>
            Records process data which is shared between threads
            </summary>
        </member>
        <member name="M:rgat.ProcessRecord.#ctor(System.Int32)">
            <summary>
            Create a ProcessRecord
            </summary>
            <param name="binaryBitWidth">32 or 64 bits</param>
        </member>
        <member name="M:rgat.ProcessRecord.get_extern_at_address(System.UInt64,System.Int32,rgat.ROUTINE_STRUCT@)">
            <summary>
            Get information about the entry to uninstrumented code at the given address
            </summary>
            <param name="address">Address of uninstrumented code</param>
            <param name="moduleNum">Module the address is in </param>
            <param name="RTN">ROUTINE_STRUCT output</param>
        </member>
        <member name="M:rgat.ProcessRecord.Load(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Deserialise the process record
            </summary>
            <param name="tracejson">JSON processrecord</param>
            <returns>If successful</returns>
        </member>
        <member name="M:rgat.ProcessRecord.getDisassemblyBlock(System.UInt32)">
            <summary>
            Get lsit of instructions for a block
            </summary>
            <param name="blockID">IF of the block</param>
            <returns></returns>
        </member>
        <member name="M:rgat.ProcessRecord.FindContainingModule(System.UInt64,System.Nullable{System.Int32}@)">
            <summary>
            Find the module containing this address
            </summary>
            <param name="address">Address to find</param>
            <param name="moduleID">Module containing this address</param>
            <returns>If the address was found</returns>
        </member>
        <member name="M:rgat.ProcessRecord.AddModule(System.Int32,System.String,System.UInt64,System.UInt64,System.Char)">
            <summary>
            Record a module for this process
            </summary>
            <param name="localmodID">Internal module number returned by the instrumentation tool</param>
            <param name="path">Filesystem path of the module</param>
            <param name="start">Module start address</param>
            <param name="end">Module end address</param>
            <param name="isInstrumented">If the instrumentation tool is instrumenting this module</param>
        </member>
        <member name="M:rgat.ProcessRecord.AddSymbol(System.Int32,System.UInt64,System.String)">
            <summary>
            Add a recorded symbol to an address
            </summary>
            <param name="localModnum">Internal module number returned by the instrumentation tool</param>
            <param name="offset">Offset of the symbol in the module</param>
            <param name="name">Name of the symbol</param>
        </member>
        <member name="M:rgat.ProcessRecord.SymbolExists(System.Int32,System.UInt64)">
            <summary>
            Does a symbol exist at this address
            </summary>
            <param name="GlobalModuleNumber">The module containing the address</param>
            <param name="address">The address</param>
            <returns>true if a symbol exists here</returns>
        </member>
        <member name="M:rgat.ProcessRecord.GetSymbol(System.Int32,System.UInt64,System.String@)">
            <summary>
            Get the symbol at an address
            </summary>
            <param name="GlobalModuleNumber">The module containing the address</param>
            <param name="address">The address</param>
            <param name="symbol">Output symbol retrieved</param>
            <returns>If found</returns>
        </member>
        <member name="M:rgat.ProcessRecord.ResolveSymbolAtAddress(System.UInt64,System.Int32@,System.String@,System.String@)">
            <summary>
            Takes an address in target process and looks up the path of the module and symbol at that address
            </summary>
            <param name="address">Address of potential symbol in loaded modules of target program</param>
            <param name="moduleID">rgat ID of module output here, if found.</param>
            <param name="module">Path of module is output here, if found</param>
            <param name="symbol">Name of symbol is output here, if found</param>
            <returns>True if both module and symbol string resolved. False otherwise.</returns>
        </member>
        <member name="M:rgat.ProcessRecord.GetModulePath(System.Int32)">
            <summary>
            Lookup the path of a module (ie DLL/library/binary) from the module ID
            </summary>
            <param name="GlobalModuleID">rgat internal ID for module in target process</param>
            <returns>string containing the module path</returns>
        </member>
        <member name="M:rgat.ProcessRecord.WaitForBlockAtAddress(System.UInt64)">
            <summary>
            Get the ID of the block at the specified address
            This is a blocking operation which waits for the block to appear in 
            disassembly if it was not present at the time of the call
            </summary>
            <param name="address">Address of the block</param>
            <returns>The ID of the block</returns>
        </member>
        <member name="M:rgat.ProcessRecord.WaitForAddressOfBlock(System.UInt32,System.UInt64@)">
            <summary>
            Given a block ID, wait until it is dissembled and return the address
            </summary>
            <param name="blockID">Block ID to find</param>
            <param name="address">output address when it exists</param>
            <returns>if the block was found. will only return false if cancelled by rgat exit</returns>
        </member>
        <member name="M:rgat.ProcessRecord.GetAddressOfBlock(System.Int32)">
            <summary>
            Get the address of a block
            </summary>
            <param name="blockID">The ID of the block</param>
            <returns>The address of the block</returns>
        </member>
        <member name="M:rgat.ProcessRecord.AddDisassembledBlock(System.UInt32,System.UInt64,System.Collections.Generic.List{rgat.InstructionData})">
            <summary>
            Record a disassembled block from the blockreader worker
            </summary>
            <param name="blockID">ID of the block</param>
            <param name="address">Address of the block</param>
            <param name="instructions">The blocks disassembled instructions</param>
        </member>
        <member name="F:rgat.ProcessRecord.LoadedModulePaths">
            <summary>
            Filesystem paths of loaded modules
            </summary>
        </member>
        <member name="F:rgat.ProcessRecord.modIDTranslationVec">
            <summary>
            Translation list of local module IDs (known to the instrumentation engine) to global module IDs (known to rgat)
            </summary>
        </member>
        <member name="F:rgat.ProcessRecord.ModuleAPIReferences">
            <summary>
            API references of modules for API metadata operations
            </summary>
        </member>
        <member name="F:rgat.ProcessRecord.LoadedModuleBounds">
            <summary>
            Start and end memory addresses of each module
            </summary>
        </member>
        <member name="F:rgat.ProcessRecord.ModuleTraceStates">
            <summary>
            Whether each modules is instrumented or not
            </summary>
        </member>
        <member name="F:rgat.ProcessRecord.LoadedModuleCount">
            <summary>
            Number of loaded modules
            </summary>
        </member>
        <member name="F:rgat.ProcessRecord.ExternCallerLock">
            <summary>
            Guards access to API call data
            This is accessed from plottedgraph, protograph and process record but shouldnt be
            May need to give each ROUTINE_STRUCT threadcallers item its own lock
            </summary>
        </member>
        <member name="M:rgat.ProcessRecord.GetModuleReference(System.Int32)">
            <summary>
            Get the unique API reference value for the specified module
            </summary>
            <param name="GlobalModuleID">Global module ID</param>
            <returns>An API reference value which can be used in API metadata lookup operations</returns>
        </member>
        <member name="F:rgat.ProcessRecord.externdict">
            <summary>
            The entries into uninstrumented code
            </summary>
        </member>
        <member name="F:rgat.ProcessRecord.BitWidth">
            <summary>
            This process is 32 or 64 bit
            </summary>
        </member>
        <member name="T:rgat.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.APIDataWin">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.BuiltinJSONThemes">
            <summary>
              Looks up a localized string similar to [{
             &quot;CustomColours&quot;: {
               &quot;ePreviewText&quot;: 4294967295,
               &quot;ePreviewTextBackground&quot;: 1275068416,
               &quot;ePreviewPaneBorder&quot;: 4278190335,
               &quot;ePreviewPaneBackground&quot;: 4278979596,
               &quot;ePreviewZoomEnvelope&quot;: 2998055602,
               &quot;eHeat0Lowest&quot;: 2996502528,
               &quot;eHeat1&quot;: 4288355374,
               &quot;eHeat2&quot;: 4293027935,
               &quot;eHeat3&quot;: 4292841333,
               &quot;eHeat4&quot;: 8703,
               &quot;eHeat5&quot;: 4290036988,
               &quot;eHeat6&quot;: 4288190706,
               &quot;eHeat7&quot;: 4285230073,
               &quot;eHeat8&quot;: 4282401023,
               &quot;eHeat9Highest&quot;: 4278190335,
               &quot;eVisB [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.DllLoader32">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.DllLoader64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.Font_Awesome_5_Free_Regular_400">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.Font_Awesome_5_Free_Solid_900">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.NotoSansSC_Regular">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.PinTool32">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.PinTool64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:rgat.APICALLDATA">
            <summary>
            Record of an API call for UI display
            </summary>
        </member>
        <member name="F:rgat.APICALLDATA.edgeIdx">
            <summary>
            Caller -> Target node pair
            </summary>
        </member>
        <member name="F:rgat.APICALLDATA.argList">
            <summary>
            a list of (index, value) tuples
            where 
                index: the position of the argument in the function prototype
                value: a string representation of the argument value
            </summary>
        </member>
        <member name="T:rgat.eCodeInstrumentation">
            <summary>
            The instrumentation state for a module/instruction
            </summary>
        </member>
        <member name="F:rgat.eCodeInstrumentation.eInstrumentedCode">
            <summary>
            Instructions are instrumented
            </summary>
        </member>
        <member name="F:rgat.eCodeInstrumentation.eUninstrumentedCode">
            <summary>
            Instructions are not instrumented, will be marked as an API call
            </summary>
        </member>
        <member name="T:rgat.ROUTINE_STRUCT">
            <summary>
            Description of entries into uninstrumented code, usually APi calls
            </summary>
        </member>
        <member name="F:rgat.ROUTINE_STRUCT.Module">
            <summary>
            The module ID of the code
            </summary>
        </member>
        <member name="F:rgat.ROUTINE_STRUCT.ThreadCallers">
            <summary>
            list of threads that call this routine (ThreadID, (caller, target))
            ProcessData.ExternCallerLock should be held to access this, which is terrible
            </summary>
        </member>
        <member name="F:rgat.ROUTINE_STRUCT.HasSymbol">
            <summary>
            Does the routine have a symbol associated with it
            </summary>
        </member>
        <member name="T:rgat.TAG">
            <summary>
            The Tag associated with an executed basic block
            </summary>
        </member>
        <member name="F:rgat.TAG.blockaddr">
            <summary>
            Address of the block
            </summary>
        </member>
        <member name="F:rgat.TAG.blockID">
            <summary>
            ID of the block
            </summary>
        </member>
        <member name="F:rgat.TAG.insCount">
            <summary>
            How many instructions are in the block
            </summary>
        </member>
        <member name="F:rgat.TAG.InstrumentationState">
            <summary>
            Did the block lead to instrumented code
            </summary>
        </member>
        <member name="F:rgat.TAG.foundExtern">
            <summary>
            A known API associated with this tag
            </summary>
        </member>
        <member name="T:rgat.eTraceUpdateType">
            <summary>
            A recorded thread trace event
            </summary>
        </member>
        <member name="F:rgat.eTraceUpdateType.eAnimExecTag">
            <summary>
            A basic block was executed
            </summary>
        </member>
        <member name="F:rgat.eTraceUpdateType.eAnimUnchained">
            <summary>
            A basic block was executed so much it went into 
            a low-overhead light instrumentation mode
            </summary>
        </member>
        <member name="F:rgat.eTraceUpdateType.eAnimUnchainedResults">
            <summary>
            A region of light instrumentation was exited, the details
            of what happened are enclosed
            </summary>
        </member>
        <member name="F:rgat.eTraceUpdateType.eAnimReinstrument">
            <summary>
            Execution is resuming in full-instrumentation mode
            </summary>
        </member>
        <member name="F:rgat.eTraceUpdateType.eAnimRepExec">
            <summary>
            A REP prefixed instruction executed
            </summary>
        </member>
        <member name="F:rgat.eTraceUpdateType.eAnimExecException">
            <summary>
            An exception happened
            </summary>
        </member>
        <member name="T:rgat.ANIMATIONENTRY">
            <summary>
            A trace event that can be replayed
            The interpretation of all the values depends on the entry type
            </summary>
        </member>
        <member name="F:rgat.ANIMATIONENTRY.entryType">
            <summary>
            The type of action that caused this entry
            </summary>
        </member>
        <member name="F:rgat.ANIMATIONENTRY.blockAddr">
            <summary>
            The address of the basic block this happened in
            </summary>
        </member>
        <member name="F:rgat.ANIMATIONENTRY.blockID">
            <summary>
            The ID of the basic block
            </summary>
        </member>
        <member name="F:rgat.ANIMATIONENTRY.edgeCounts">
            <summary>
            Which edges were involved, how many times
            </summary>
        </member>
        <member name="F:rgat.ANIMATIONENTRY.count">
            <summary>
            A count for this event
            </summary>
        </member>
        <member name="F:rgat.ANIMATIONENTRY.targetAddr">
            <summary>
            The target address of the event
            </summary>
        </member>
        <member name="F:rgat.ANIMATIONENTRY.targetID">
            <summary>
            The block ID of the target
            </summary>
        </member>
        <member name="T:rgat.ProtoGraph">
            <summary>
            The data structure representing a recorded process thread
            </summary>
        </member>
        <member name="M:rgat.ProtoGraph.#ctor(rgat.TraceRecord,System.UInt32,System.UInt64,System.Boolean)">
            <summary>
            The data structure representing a recorded process thread
            </summary>
            <param name="runrecord">A TraceRecord for the process containing this thread</param>
            <param name="threadID">A Thread ID for the thread</param>
            <param name="startAddr">The first program counter address of the thread</param>
            <param name="terminated">Set to true if loading a saved trace</param>
        </member>
        <member name="F:rgat.ProtoGraph.ThreadID">
            <summary>
            The threads operating system assigned thread ID
            </summary>
        </member>
        <member name="F:rgat.ProtoGraph.StartAddress">
            <summary>
            The address of the first instruction executed by the thread. May not be instrumented.
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.TraceReader">
            <summary>
            The worker which is reading trace data from the instrumented thread
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.TraceProcessor">
            <summary>
            The worker which is processing trace data from the instrumented thread
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.ProcessData">
            <summary>
            Process data shared by all threads (instruction disassembly, API metadata, etc)
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.TraceData">
            <summary>
            Describes the lifetime of the process, parent storage class for threads
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.ConstructedTime">
            <summary>
            When the thread was recorded, used as a unique identifier for threads
            </summary>
        </member>
        <member name="F:rgat.ProtoGraph.HeatSolvingComplete">
            <summary>
            The order of most busy instructions has been calculated since the graph was last updated
            </summary>
        </member>
        <member name="M:rgat.ProtoGraph.SetTerminated">
            <summary>
            Mark this thread as having completed execution
            </summary>
        </member>
        <member name="M:rgat.ProtoGraph.AddEdge_LastToTargetVert(System.Boolean,System.Int32,System.UInt64)">
            todo is this needed
            yes. yes it is.
        </member>
        <member name="P:rgat.ProtoGraph.HasRecentStep">
            <summary>
            A step command was just issued
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.RecentStepAddr">
            <summary>
            The last address stepped from
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.NextStepAddr">
            <summary>
            The address being stepped to
            </summary>
        </member>
        <member name="M:rgat.ProtoGraph.ClearRecentStep">
            <summary>
            Stepping is done
            </summary>
        </member>
        <member name="M:rgat.ProtoGraph.SetRecentStep(System.UInt32,System.UInt64,System.UInt64)">
            <summary>
            Setup a step operation
            </summary>
            <param name="blockID">The block stepped to</param>
            <param name="address">The address stepped from</param>
            <param name="nextAddr">The address stepped to</param>
            <returns></returns>
        </member>
        <member name="M:rgat.ProtoGraph.ProcessIncomingCallArguments">
            <summary>
            Runs through the cached API call arguments and attempts to match complete
            sets up to corresponding nodes on the graph once they have been inserted
            </summary>
        </member>
        <member name="M:rgat.ProtoGraph.CacheIncomingCallArgument(System.UInt64,System.UInt64,System.Int32,System.String,System.Boolean)">
            <summary>
            Inserts API call argument data from the trace into the cache
            Attempts to add it to the graph if a full set of arguments is collected
            </summary>
            <param name="funcpc">Address of the function the argument is for</param>
            <param name="sourceBlockID">The block that called the function</param>
            <param name="argpos">The position of the argument in the parameter list</param>
            <param name="contents">A string representation of the argument</param>
            <param name="isLastArgInCall">Is this the last argument being recorded for this call?</param>
        </member>
        <member name="M:rgat.ProtoGraph.EdgeExists(System.Tuple{System.UInt32,System.UInt32})">
            <summary>
            Are two nodes linked by an edge? (ie: does one instruction lead to another)
            </summary>
            <param name="edge">The node pair</param>
            <returns>An edge was found</returns>
        </member>
        <member name="M:rgat.ProtoGraph.EdgeExists(System.Tuple{System.UInt32,System.UInt32},rgat.EdgeData@)">
            <summary>
            Are two nodes linked by an edge? (ie: does one instruction lead to another)
            Also returns the edge
            </summary>
            <param name="edge">The node pair</param>
            <param name="edged">The edge, if found</param>
            <returns>An edge was found</returns>
        </member>
        <member name="M:rgat.ProtoGraph.GetEdgelistCopy">
            <summary>
            Get a thread-safe copy of the nodepair edge list
            </summary>
            <returns>The list of nodepairs</returns>
        </member>
        <member name="M:rgat.ProtoGraph.GetEdgeObjListCopy">
            <summary>
            Get a thread-safe copy of the EdgeData edge list
            </summary>
            <returns>The list of EdgeData</returns>
        </member>
        <member name="M:rgat.ProtoGraph.GetNodeObjlistCopy">
            <summary>
            Get a thread-safe copy of the nodedata list
            </summary>
            <returns>The list of NodeData</returns>
        </member>
        <member name="M:rgat.ProtoGraph.GetEdge(System.UInt32,System.UInt32)">
            <summary>
            Get an edge data object by source and target node
            </summary>
            <param name="src">Source node index</param>
            <param name="targ">Target node index</param>
            <returns>The edge if found, or null</returns>
        </member>
        <member name="M:rgat.ProtoGraph.GetEdge(System.Tuple{System.UInt32,System.UInt32})">
            <summary>
            Get an edge data object by source and target node tuple
            The edge must already be known to exist
            </summary>
            <param name="srcTarg">Source/Target node tuple</param>
            <returns>The edge</returns>
        </member>
        <member name="M:rgat.ProtoGraph.GetEdgeNodes(System.Int32,rgat.NodeData@,rgat.NodeData@)">
            <summary>
            Get the node objects associated with an edge index
            </summary>
            <param name="EdgeIndex">index of the edge in the edgelist</param>
            <param name="source">NodeData source</param>
            <param name="targ">NodeData target</param>
            <returns>The edge nodes</returns>
        </member>
        <member name="M:rgat.ProtoGraph.GetEdgeNodes(System.Int32,System.Tuple{System.UInt32,System.UInt32}@,rgat.EdgeData@)">
            <summary>
            Retrieve an nodepair and an edgedata object for a given edge index
            </summary>
            <param name="index">The index of the edge</param>
            <param name="srcTarg">Output nodepaid</param>
            <param name="e">Output edge data</param>
        </member>
        <member name="M:rgat.ProtoGraph.AddEdge(System.UInt32,System.UInt32,System.UInt64)">
            <summary>
            Add an edge by source,target index pair
            </summary>
            <param name="SrcNodeIdx">Source index</param>
            <param name="TargNodeIdx">Target index</param>
            <param name="execCount">Execution count</param>
        </member>
        <member name="M:rgat.ProtoGraph.AddEdge(rgat.EdgeData,rgat.NodeData,rgat.NodeData)">
            <summary>
            Add an existing edge, given pre-existing edge and node data
            </summary>
            <param name="e">Edgedata</param>
            <param name="source">Source NodeData</param>
            <param name="target">Target NodeData</param>
        </member>
        <member name="M:rgat.ProtoGraph.handle_exception_tag(rgat.TAG)">
            <summary>
            Record an exception in the instruented process
            </summary>
            <param name="thistag">The exception tag</param>
        </member>
        <member name="M:rgat.ProtoGraph.handle_tag(rgat.TAG,System.Boolean)">
            <summary>
            Handle an event in the traced graph
            </summary>
            <param name="thistag">The event tag</param>
            <param name="skipFirstEdge">If we are expecting this and have already recorded the edge that leads to this</param> //messy
        </member>
        <member name="P:rgat.ProtoGraph.HasPendingArguments">
            <summary>
            Arguments have been recorded for an API call which we haven't consolidated yet
            </summary>
        </member>
        <member name="F:rgat.ProtoGraph.EdgeList">
            <summary>
            Ordered list of executing edges
            </summary>
        </member>
        <member name="M:rgat.ProtoGraph.handle_new_instruction(rgat.InstructionData,System.UInt32,System.UInt64)">
            <summary>
            Record the execution of an instruction on the graph
            </summary>
            <param name="instruction">The instruction to record</param>
            <param name="blockID">The basic block the instruction is in</param>
            <param name="repeats">How many times this instruction was executed this time</param>
            <returns>A node index for the created node</returns>
        </member>
        <member name="M:rgat.ProtoGraph.GetNode(System.UInt32)">
            <summary>
            Get a NodeData object by index
            </summary>
            <param name="index">Index of the node</param>
            <returns>The node data or null if a bad index</returns>
        </member>
        <member name="M:rgat.ProtoGraph.PushAnimUpdate(rgat.ANIMATIONENTRY)">
            <summary>
            Store a processed trace data entry from instrumentation for replay
            </summary>
            <param name="entry">The ANIMATIONENTRY value</param>
        </member>
        <member name="P:rgat.ProtoGraph.LastUpdated">
            <summary>
            When an animation entry was last added
            </summary>
        </member>
        <member name="F:rgat.ProtoGraph.SavedAnimationData">
            <summary>
            A list of trace entries which can be replayed
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.StartModuleName">
            <summary>
            The module the thread was located in, usually the argument passed to CreateThread (or the linux equivalent)
            </summary>
        </member>
        <member name="M:rgat.ProtoGraph.Serialise">
            <summary>
            Serialise this thread to JSON for writing to disk
            </summary>
            <returns>The JObject of the thread</returns>
        </member>
        <member name="M:rgat.ProtoGraph.Deserialise(Newtonsoft.Json.Linq.JObject,rgat.ProcessRecord)">
            <summary>
            Restore a thread ProtoGraph from a JObject
            </summary>
            <param name="graphData">The serialised ProtoGraph JObject</param>
            <param name="processinfo">The processdata associated with the thread</param>
            <returns>The deserialised ProtoGraph</returns>
        </member>
        <member name="M:rgat.ProtoGraph.GetRecentAnimationEntries(System.Int32,System.Collections.Generic.List{rgat.ANIMATIONENTRY}@)">
            <summary>
            Get recent animation entries for rendering by the visualiser bar
            </summary>
            <param name="count"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:rgat.ProtoGraph.GetSavedAnimationData">
            <summary>
            Get the list of thread animation entries
            </summary>
            <returns>The original list of entries</returns>
        </member>
        <member name="F:rgat.ProtoGraph.SymbolCallRecords">
            <summary>
            The API calls made by the thread
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.TotalInstructions">
            <summary>
            A count of the total number of instrumented instructions (including repeats) executed in the thread
            </summary>
        </member>
        <member name="F:rgat.ProtoGraph.exeModuleID">
            <summary>
            The module ID of the thread
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.ProtoLastVertID">
            <summary>
            The index of the last added node
            </summary>
        </member>
        <member name="F:rgat.ProtoGraph.ProtoLastLastVertID">
            <summary>
            The index of the node before the last added node
            </summary>
        </member>
        <member name="M:rgat.ProtoGraph.GetExceptionNodes">
            <summary>
            Get all exception event nodes
            </summary>
            <returns>List of node indexes</returns>
        </member>
        <member name="P:rgat.ProtoGraph.Terminated">
            <summary>
            Is this thread terminated
            </summary>
        </member>
        <member name="F:rgat.ProtoGraph.PerformingUnchainedExecution">
            <summary>
            Is this thread in a low-instrumentation busy area
            </summary>
        </member>
        <member name="M:rgat.ProtoGraph.MeetsTestRequirements(rgat.Testing.REQUIREMENTS_LIST)">
            <summary>
            Check if this thread meets the thread requirements of a test
            </summary>
            <param name="requirements">REQUIREMENTS_LIST</param>
            <returns>REQUIREMENT_TEST_RESULTS</returns>
        </member>
        <member name="T:rgat.rgatState">
            <summary>
            Handles Loading/Saving/Storage of traces and binaries. 
            Dumping ground for various utility objects such as signature scanners and video encoder.
            
            This is a holdover from the previous iteration of rgat that needs revamping or removing
            </summary>
        </member>
        <member name="F:rgat.rgatState.targets">
            <summary>
            Collection of binary targets that are loaded
            </summary>
        </member>
        <member name="F:rgat.rgatState.ActiveTarget">
            <summary>
            The currently selected binary target in the UI
            </summary>
        </member>
        <member name="F:rgat.rgatState.ActiveTrace">
            <summary>
            The trace currently active in the UI
            </summary>
        </member>
        <member name="P:rgat.rgatState.ActiveGraph">
            <summary>
            The graph currently active in the UI
            </summary>
        </member>
        <member name="F:rgat.rgatState._GraphicsDevice">
            <summary>
            A Veldrid GraphicsDevice reference available for general usage
            </summary>
        </member>
        <member name="F:rgat.rgatState.DIELib">
            <summary>
            The loaded Detect-It-Easy(.Net) engine
            </summary>
        </member>
        <member name="F:rgat.rgatState.YARALib">
            <summary>
            The loaded dnYara engine
            </summary>
        </member>
        <member name="F:rgat.rgatState.VideoRecorder">
            <summary>
            A VideoEncoder object which managed FFMpeg capture
            </summary>
        </member>
        <member name="F:rgat.rgatState.NetworkBridge">
            <summary>
            A BridgeConnection object which manages the remote tracing connection
            </summary>
        </member>
        <member name="P:rgat.rgatState.ConnectedToRemote">
            <summary>
            Is a network connection to another rgat instance active?
            </summary>
        </member>
        <member name="F:rgat.rgatState.LocalCoordinatorPipeName">
            <summary>
            The name of the named pipe for locally running pintools to connect to
            </summary>
        </member>
        <member name="F:rgat.rgatState.RecordVideoOnNextTrace">
            <summary>
            Set this to cause video recording to start on the next trace connection
            </summary>
        </member>
        <member name="F:rgat.rgatState.processCoordinatorThreadObj">
            <summary>
            A thread object which manages local trace connections over a named pipe
            </summary>
        </member>
        <member name="M:rgat.rgatState.InitVeldrid(Veldrid.GraphicsDevice)">
            <summary>
            Set the graphics devicefor widgets to use once it has been created 
            </summary>
            <param name="_gd">A Veldrid GraphicsDevice</param>
        </member>
        <member name="M:rgat.rgatState.LoadSignatures(System.IProgress{System.Single},System.Action)">
            <summary>
            A task which loads binary signatures such as YARA and DIE
            </summary>
            <param name="progress">An IProgress object for the UI process bar</param>
            <param name="completionCallback">An action to call when the load is complete</param>
        </member>
        <member name="F:rgat.rgatState._exitTokenSource">
            <summary>
            Cancellation tokens to be used by all rgat tasks to signal that rgat is shutting down
            Nothing should block in a way that will ignore this for more than a few hundred milliseconds
            </summary>
        </member>
        <member name="P:rgat.rgatState.rgatIsExiting">
            <summary>
            rgat is shutting down
            </summary>
        </member>
        <member name="P:rgat.rgatState.ExitToken">
            <summary>
            Get a cancellation token which will be cancelled when rgat is exiting
            </summary>
        </member>
        <member name="P:rgat.rgatState.TotalTraceCount">
            <summary>
            The number of traces which have executed in this rgat session
            Used by the UI to respond to incoming traces
            </summary>
        </member>
        <member name="M:rgat.rgatState.IncreaseLoadedTraceCount">
            <summary>
            Record the connection of a new trace
            </summary>
        </member>
        <member name="M:rgat.rgatState.Shutdown">
            <summary>
            Terminate all spawned processes and internal workers, then exit
            </summary>
        </member>
        <member name="M:rgat.rgatState.AddTargetByPath(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Add a new target to the list of loaded target binaries
            </summary>
            <param name="path">Filesystem path of target</param>
            <param name="arch">32 or 64 bits</param>
            <param name="isLibrary">The target is a DLL</param>
            <param name="makeActive">Set this as active in the UI</param>
            <returns>The BinaryTarget object describing the target</returns>
        </member>
        <member name="M:rgat.rgatState.AddRemoteTargetByPath(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a target binary for tracing by a remote rgat instance
            </summary>
            <param name="path">Filesystem path of target</param>
            <param name="hostAddr">Network address of the remote system</param>
            <param name="isLibrary">The target is a DLL</param>
            <param name="makeActive">Set this as active in the UI</param>
            <returns>The BinaryTarget object describing the target</returns>
        </member>
        <member name="M:rgat.rgatState.SetActiveTarget(System.String)">
            <summary>
            Set the binary target active in the UI
            </summary>
            <param name="path">Path of the target to activate</param>
        </member>
        <member name="M:rgat.rgatState.SetActiveTarget(rgat.BinaryTarget)">
            <summary>
            Set the binary target active in the UI
            </summary>
            <param name="newTarget">BinaryTarget object to activate</param>
        </member>
        <member name="M:rgat.rgatState.ClearActiveGraph">
            <summary>
            Deactivate the currently active graph in the UI
            </summary>
        </member>
        <member name="M:rgat.rgatState.SelectActiveTrace(rgat.TraceRecord,System.Boolean)">
            <summary>
            Set the currently active trace in the UI. If a specific trace is not specified
            the trace chosen depends on the 'newest' parameter
            </summary>
            <param name="trace">An optional TraceRecord to set as active</param>
            <param name="newest">If true, get the most recently spawned trace. If false get the first in the list (not guaranteed to be the oldest)</param>
        </member>
        <member name="M:rgat.rgatState.InitialiseTarget(Newtonsoft.Json.Linq.JObject,rgat.BinaryTarget@)">
            <summary>
            Initialise a loaded target binary from a trace save object
            </summary>
            <param name="saveJSON">A Newtonsoft JObject for the saved trace</param>
            <param name="targetResult">The created BinaryTarget object</param>
            <returns></returns>
        </member>
        <member name="M:rgat.rgatState.SwitchToGraph(rgat.PlottedGraph)">
            <summary>
            Causes the UI to switch to displaying a different thread graph
            </summary>
            <param name="graph">The PlottedGraph object of the graph to switch to. Null to clear the active graph.</param>
        </member>
        <member name="M:rgat.rgatState.ChooseActiveGraph">
            <summary>
            Cause the UI to choose an active graph to display, used when no graph is active
            </summary>
            <returns>If a graph is now active</returns>
        </member>
        <member name="M:rgat.rgatState.SelectGraphInActiveTrace">
            <summary>
            Activate a graph in the active trace
            Selects the last one that was active in this trace, or the first seen
            </summary>
        </member>
        <member name="M:rgat.rgatState.SetActiveGraph(rgat.PlottedGraph)">
            <summary>
            Sets a specific thread graph for the UI to display
            </summary>
            <param name="graph">A PlottedGraph object of the thread to display</param>
            <returns></returns>
        </member>
        <member name="M:rgat.rgatState.getActiveGraph">
            <summary>
            Get the currently active thread graph being shown by the UI
            </summary>
            <returns>The PlottedGraph object of the active thread graph</returns>
        </member>
        <member name="M:rgat.rgatState.LoadTraceRecord(Newtonsoft.Json.Linq.JObject,rgat.BinaryTarget,rgat.TraceRecord@)">
            <summary>
            Load a TraceRecord from a serialised trace JObject
            </summary>
            <param name="saveJSON">The Newtonsoft JObject of the saved trace</param>
            <param name="target">The binarytarget associated with the trace</param>
            <param name="traceResult">The output reconstructed TraceRecord</param>
            <returns>true if a new trace was created, false if failed or duplicated</returns>
        </member>
        <member name="M:rgat.rgatState.LoadTraceByPath(System.String,rgat.TraceRecord@)">
            <summary>
            Load a saved trace
            </summary>
            <param name="path">The fileystem path of the saved trace</param>
            <param name="trace">The loaded TraceRecord object</param>
            <returns></returns>
        </member>
        <member name="M:rgat.rgatState.ExtractChildTraceFilenames(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.List{System.String}@)">
            <summary>
            Get a list of child trace processes from a saved trace
            </summary>
            <param name="saveJSON">The Newtonsoft JObject of the saved trace</param>
            <param name="childrenFiles">A list of relative filesystem paths of child traces</param>
        </member>
        <member name="M:rgat.rgatState.LoadChildTraces(System.Collections.Generic.List{System.String},rgat.TraceRecord)">
            <summary>
            Loads child traces into a trace record
            </summary>
            <param name="childrenFiles">A list of relative filesystem paths of traces</param>
            <param name="trace">The parent TraceRecord of the child traces</param>
        </member>
        <member name="M:rgat.rgatState.SaveAllTargets">
            <summary>
            Cause all the traces of all active targets to be serialised to the trace directory
            </summary>
        </member>
        <member name="M:rgat.rgatState.SaveTarget(rgat.BinaryTarget)">
            <summary>
            Serialise all the traces of the the specified target to the trace directory
            </summary>
            <param name="targ">A binaryTarget to save traces of</param>
        </member>
        <member name="M:rgat.rgatState.ExportTraceAsPajek(rgat.TraceRecord,System.UInt32)">
            <summary>
            Export the current trace in the pajek format, a simple graph serialisation format that other graph layout programs accept
            </summary>
        </member>
        <member name="M:rgat.rgatState.RecordTestRunConnection(System.Int64,rgat.TraceRecord)">
            <summary>
            Store a reference to an incoming rgat test trace
            </summary>
            <param name="testID">The ID of the test</param>
            <param name="trace">The TraceRecord associated with the test</param>
        </member>
        <member name="M:rgat.rgatState.GetTestTrace(System.Int64,rgat.TraceRecord@)">
            <summary>
            Get the TraceRecord for a specific test ID
            </summary>
            <param name="testID">The test ID to retrieve</param>
            <param name="trace">The associated TraceRecord of the test</param>
            <returns>true if found, false otherwise</returns>
        </member>
        <member name="T:rgat.Testing.RequirementCondition">
            <summary>
            Comparisons that can be applied to process/thread attributes
            </summary>
        </member>
        <member name="F:rgat.Testing.RequirementCondition.Equals">
            <summary>
            The attribute is equal to a specified value
            </summary>
        </member>
        <member name="F:rgat.Testing.RequirementCondition.LessThan">
            <summary>
            The attribute is less than the specified value
            </summary>
        </member>
        <member name="F:rgat.Testing.RequirementCondition.LessThanOrEqualTo">
            <summary>
            The attribute is less than or equal to the specified value
            </summary>
        </member>
        <member name="F:rgat.Testing.RequirementCondition.GreaterThan">
            <summary>
            The attribute is greater than the specified value
            </summary>
        </member>
        <member name="F:rgat.Testing.RequirementCondition.GreaterThanOrEqualTo">
            <summary>
            The attribute is greater than or equal to the specified value
            </summary>
        </member>
        <member name="F:rgat.Testing.RequirementCondition.Exists">
            <summary>
            The attribute exists in a collection
            </summary>
        </member>
        <member name="F:rgat.Testing.RequirementCondition.Absent">
            <summary>
            The attribute does not exist in a specified list of values 
            /// </summary>
        </member>
        <member name="F:rgat.Testing.RequirementCondition.Contains">
            <summary>
            The attribute is a collection which contains the value
            </summary>
        </member>
        <member name="F:rgat.Testing.RequirementCondition.OneOf">
            <summary>
            The attribute exists in a specified list of values
            </summary>
        </member>
        <member name="F:rgat.Testing.RequirementCondition.INVALID">
            <summary>
            The attribute is equal to a specified value
            </summary>
        </member>
        <member name="T:rgat.Testing.REQUIREMENT_TEST_RESULTS">
            <summary>
            Results from evaluating a test requirement
            </summary>
        </member>
        <member name="M:rgat.Testing.REQUIREMENT_TEST_RESULTS.#ctor">
            <summary>
            Results from evaluating a test requirement
            </summary>
        </member>
        <member name="F:rgat.Testing.REQUIREMENT_TEST_RESULTS.Passed">
            <summary>
            Passed requirements
            </summary>
        </member>
        <member name="F:rgat.Testing.REQUIREMENT_TEST_RESULTS.Failed">
            <summary>
            Failed requirements
            </summary>
        </member>
        <member name="F:rgat.Testing.REQUIREMENT_TEST_RESULTS.Errors">
            <summary>
            Errors encountered evaluating each requirement
            </summary>
        </member>
        <member name="T:rgat.Testing.TestRequirement">
            <summary>
            A requirement to apply to a process or thread
            </summary>
        </member>
        <member name="P:rgat.Testing.TestRequirement.Name">
            <summary>
            The name of the requirement
            </summary>
        </member>
        <member name="P:rgat.Testing.TestRequirement.Comment">
            <summary>
            A comment about the requirement
            </summary>
        </member>
        <member name="P:rgat.Testing.TestRequirement.ExpectedValue">
            <summary>
            The expected value of the requirement to evaluate to
            </summary>
        </member>
        <member name="P:rgat.Testing.TestRequirement.ExpectedValueString">
            <summary>
            A string representation of the expected value
            </summary>
        </member>
        <member name="P:rgat.Testing.TestRequirement.Condition">
            <summary>
            How to compare the test result to the expected value
            </summary>
        </member>
        <member name="M:rgat.Testing.TestRequirement.#ctor(System.String,Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            A requirement for the test to pass
            </summary>
            <param name="name">Name of the requirement</param>
            <param name="value">Value being compared</param>
            <param name="condition">The comparison to perform</param>
        </member>
        <member name="M:rgat.Testing.TestRequirement.Compare(System.Int32,System.String@)">
            <summary>
            Compare an integer value
            </summary>
            <param name="value">An integer value</param>
            <param name="error">An error describing why it failed</param>
            <returns>true if pass, false if fail</returns>
        </member>
        <member name="M:rgat.Testing.TestRequirement.Compare(System.Int64,System.String@)">
            <summary>
            Compare a long value
            </summary>
            <param name="value">An long value</param>
            <param name="error">An error describing why it failed</param>
            <returns>true if pass, false if fail</returns>
        </member>
        <member name="M:rgat.Testing.TestRequirement.Compare(System.UInt64,System.String@)">
            <summary>
            Compare a ulong value
            </summary>
            <param name="value">A ulong value</param>
            <param name="error">An error describing why it failed</param>
            <returns>true if pass, false if fail</returns>
        </member>
        <member name="M:rgat.Testing.TestRequirement.SetComment(System.String)">
            <summary>
            Set the requirement comment
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:rgat.Testing.TraceRequirements">
            <summary>
            A set of requirements for a test process, threads and child processes
            </summary>
        </member>
        <member name="F:rgat.Testing.TraceRequirements.ProcessRequirements">
            <summary>
            list of requirements the process (ie: TraceRecord) must meet
            </summary>
        </member>
        <member name="F:rgat.Testing.TraceRequirements.ThreadRequirements">
            <summary>
            list of requirements the process threads (ie: ProtoGraphs) must meet
            </summary>
        </member>
        <member name="F:rgat.Testing.TraceRequirements.ChildProcessRequirements">
            <summary>
            list of requirements for descendant processes
            </summary>
        </member>
        <member name="T:rgat.Testing.eTestState">
            <summary>
            A basic state for a test run
            </summary>
        </member>
        <member name="F:rgat.Testing.eTestState.NotRun">
            <summary>
            Not executed yet
            </summary>
        </member>
        <member name="F:rgat.Testing.eTestState.Passed">
            <summary>
            All requirements passed
            </summary>
        </member>
        <member name="F:rgat.Testing.eTestState.Failed">
            <summary>
            At least one requirement was not met
            </summary>
        </member>
        <member name="T:rgat.Testing.TestCase">
            <summary>
            A test consisting of a set of requirements and an associated binary to apply them to
            </summary>
        </member>
        <member name="M:rgat.Testing.TestCase.#ctor(System.String,System.String)">
            <summary>
            Load a test case from a json file
            </summary>
            <param name="jsonpath">Path of a JSON test description file to load</param>
            <param name="category">The category of the test</param>
        </member>
        <member name="F:rgat.Testing.TestCase.LoadingErrors">
            <summary>
            Errors encountered loading the test case from JSON
            </summary>
        </member>
        <member name="P:rgat.Testing.TestCase.Loaded">
            <summary>
            If the test was sucessfully loaded
            </summary>
        </member>
        <member name="F:rgat.Testing.TestCase.LatestResultState">
            <summary>
            The lastest result from running this test
            </summary>
        </member>
        <member name="P:rgat.Testing.TestCase.LatestTestRun">
            <summary>
            The latest run object for this test
            </summary>
        </member>
        <member name="P:rgat.Testing.TestCase.LatestErrorReason">
            <summary>
            The latest error from this test
            </summary>
        </member>
        <member name="P:rgat.Testing.TestCase.JSONPath">
            <summary>
            File path of the test description
            </summary>
        </member>
        <member name="P:rgat.Testing.TestCase.BinaryPath">
            <summary>
            File path of the test binary
            </summary>
        </member>
        <member name="P:rgat.Testing.TestCase.BinaryDirectory">
            <summary>
            Directory of the test binary
            </summary>
        </member>
        <member name="P:rgat.Testing.TestCase.CategoryName">
            <summary>
            Category of the test
            </summary>
        </member>
        <member name="P:rgat.Testing.TestCase.TestName">
            <summary>
            Name of the test
            </summary>
        </member>
        <member name="F:rgat.Testing.TestCase.Starred">
            <summary>
            The test is starred on the UI
            </summary>
        </member>
        <member name="P:rgat.Testing.TestCase.Comment">
            <summary>
            The test writers comment for the test
            </summary>
        </member>
        <member name="P:rgat.Testing.TestCase.TestBits">
            <summary>
            Is the test binary 32 or 64 bits
            </summary>
        </member>
        <member name="P:rgat.Testing.TestCase.TestOS">
            <summary>
            What OS the test runs on
            </summary>
        </member>
        <member name="P:rgat.Testing.TestCase.Running">
            <summary>
            Is the test currently running
            </summary>
        </member>
        <member name="F:rgat.Testing.TestCase._TestRunRequirements">
            <summary>
            A list of conditions met by the entire test itself
            </summary>
        </member>
        <member name="F:rgat.Testing.TestCase._TraceRequirements">
            <summary>
            A nested list of requirements for each thread
            vague pseudo-json example [{C:6, [C:1, C:3]},{C:1, [C:7,C:12]}]
                This expects two processes, each producing 2 thread graphs
                One process must meet condtion C6 has threads meeting condition C1, the other meeting condition C3. 
                Ditto for the other process needing to meet condtion C1 with threads meeting conditions 7, 12
            </summary>
        </member>
        <member name="M:rgat.Testing.TestCase.LoadFinalRequirements(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Load the test passing conditions
            </summary>
            <param name="reqsObj">JObject of the unserialised conditions</param>
            <returns>Whether loading succeeded</returns>
        </member>
        <member name="M:rgat.Testing.TestCase.LoadTestRequirement(System.String,Newtonsoft.Json.Linq.JToken,rgat.Testing.TestRequirement@)">
            <summary>
            Load a JObject containing JToken value and string condition
            </summary>
            <param name="name">Name of the requirement</param>
            <param name="tok">JToken containing requirement</param>
            <param name="testRequirement">Result requirement object</param>
            <returns>true if it loaded without error</returns>
        </member>
        <member name="M:rgat.Testing.TestCase.TestRunRequirements">
            <summary>
            Fetch test run requirements. Thread safe for GUi rendering
            </summary>
            <returns>Array of test run requirements</returns>
        </member>
        <member name="M:rgat.Testing.TestCase.TraceRequirements">
            <summary>
            Fetch trace (whole process) requirements. Thread safe for GUi rendering
            </summary>
            <returns>Array of process requirements</returns>
        </member>
        <member name="M:rgat.Testing.TestCase.RecordRunning">
            <summary>
            Increase the count of running tests
            </summary>
        </member>
        <member name="M:rgat.Testing.TestCase.RecordFinished">
            <summary>
            Decrease the count of running tests
            </summary>
        </member>
        <member name="M:rgat.Testing.TestCase.RecordPassed(System.Int32,rgat.Testing.TestCaseRun)">
            <summary>
            Record a test where all requirements were met
            </summary>
            <param name="sessionID">Session ID of the test</param>
            <param name="testrun">The sucedssful test run</param>
        </member>
        <member name="M:rgat.Testing.TestCase.CountPassed(System.Int32)">
            <summary>
            Get the number of passed tests in the session
            </summary>
            <param name="sessionID">Session ID to check</param>
            <returns>number of passed tests</returns>
        </member>
        <member name="M:rgat.Testing.TestCase.RecordFailed(System.Int32,rgat.Testing.TestCaseRun,System.String)">
            <summary>
            Record a test where one or more requirements were not met
            </summary>
            <param name="sessionID">Session ID of the test</param>
            <param name="testrun">The sucedssful test run</param>
            <param name="reason">Explaination for why the test failed</param>
        </member>
        <member name="M:rgat.Testing.TestCase.CountFailed(System.Int32)">
            <summary>
            Get the number of failed tests in the session
            </summary>
            <param name="sessionID">Session ID to check</param>
            <returns>number of failed tests</returns>
        </member>
        <member name="F:rgat.Widgets.QuickMenu.MenuEntry.Icon">
            <summary>
            Icon name for the menu button
            </summary>
        </member>
        <member name="F:rgat.Widgets.QuickMenu.MenuEntry.Popup">
            <summary>
            Popup window name for the menu button
            </summary>
        </member>
        <member name="F:rgat.Widgets.QuickMenu.MenuEntry.ToolTip">
            <summary>
            Mouseover tooltip for the menu button
            </summary>
        </member>
        <member name="F:rgat.Widgets.QuickMenu.MenuEntry.Action">
            <summary>
            Action triggered on button activation
            </summary>
        </member>
        <member name="F:rgat.Widgets.QuickMenu.MenuEntry.Label">
            <summary>
            Text label for the button
            </summary>
        </member>
        <member name="M:rgat.Widgets.QuickMenu.SetStateChangeCallback(System.Action{System.Boolean})">
            <summary>
            Called whenever the menu is opened/closed
            </summary>
            <param name="action">Function to call when opened/closed. Param is open/closed state.</param>
        </member>
        <member name="M:rgat.Widgets.QuickMenu.ActivateAction(rgat.Widgets.QuickMenu.ActionName,System.Boolean,System.String@)">
            <summary>
            Performs whatever action is assigned to a shortcut or button click
            </summary>
            <param name="actionName">Action associated with the icon or shortcut</param>
            <param name="hotKey">true if a keyboard shortcut, false if clicked</param>
            <param name="resultText">something to describe what happened on the key combo display</param>
            <returns>Whether the action was a non-menu 'action' which will trigger display of the keyboard combo used</returns>
        </member>
        <member name="F:rgat.Widgets.QuickMenu._RecentKeypress">
            <summary>
            Take a keypress that might be dealt with by the open quickmenu
            Return true if the quickmenu swallows is (ie: not to be used for other graph actions)
            </summary>
        </member>
        <member name="T:rgat.Widgets.RemoteDialog">
            <summary>
            A dialog for configuring remote tracing
            </summary>
        </member>
        <member name="M:rgat.Widgets.RemoteDialog.#ctor">
            <summary>
            Create a dialog for configuring remote tracing
            </summary>
        </member>
        <member name="T:rgat.Widgets.VisualiserBar">
            <summary>
            Create an animation progress control bar which doubles as an extra visualiser
            </summary>
        </member>
        <member name="M:rgat.Widgets.VisualiserBar.#ctor(Veldrid.GraphicsDevice,ImGuiNET.ImGuiController)">
            <summary>
            Create a visualiser bar for the specified device and controller
            </summary>
            <param name="graphicsDev">Veldrid GraphicsDevice to render on</param>
            <param name="controller">ImGui Controller</param>
        </member>
        <member name="M:rgat.Widgets.VisualiserBar.Draw(System.Single,System.Single)">
            <summary>
            Draw the latest rendered visualiser bar
            Specified dimensions will be used in the next render
            </summary>
            <param name="width">Bar Width</param>
            <param name="height">Bar Height</param>
        </member>
        <member name="M:rgat.Widgets.VisualiserBar.DrawReplaySlider(System.Single,System.Single,rgat.PlottedGraph)">
            <summary>
            Draw a replay graph visualiser bar with animation sliders 
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="graph"></param>
        </member>
        <member name="T:rgat.Themes.eThemeColour">
            <summary>
            UI and Graph properties that can have a custom theme colour
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.ePreviewText">
            <summary>
            Labels on preview graphs
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.ePreviewTextBackground">
            <summary>
            The background of text on preview graphs to provide contrast
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.ePreviewPaneBorder">
            <summary>
            The border of the preview pane
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.ePreviewPaneBackground">
            <summary>
            The background of the preview pane
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.ePreviewZoomEnvelope">
            <summary>
            The box used to show the camera location in the preview pane
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.PreviewBGRunning">
            <summary>
            The background of running thread preview graphs
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.PreviewBGTerminated">
            <summary>
            The background of terminated thread preview graphs
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.PreviewBGSuspended">
            <summary>
            The background of suspended thread preview graphs
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eTextEmphasis1">
            <summary>
            Emphasised text style 1
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eTextEmphasis2">
            <summary>
            Emphasised text style 2
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eTextDull1">
            <summary>
            Subtle text style 1
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eTextDull2">
            <summary>
            Subtle text style 2
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eHeat0Lowest">
            <summary>
            The lowest 10% active instructions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eHeat1">
            <summary>
            10-19% most active instructions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eHeat2">
            <summary>
            20-29% most active instructions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eHeat3">
            <summary>
            30-39% most active instructions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eHeat4">
            <summary>
            40-49% most active instructions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eHeat5">
            <summary>
            50-59% most active instructions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eHeat6">
            <summary>
            60-69% most active instructions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eHeat7">
            <summary>
            70-79% most active instructions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eHeat8">
            <summary>
            80-89% most active instructions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eHeat9Highest">
            <summary>
            The top 10% most active instructions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eVisBarPlotLine">
            <summary>
            The instruction count plot line on the visualisation bar
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eVisBarBg">
            <summary>
            The background of the visualiser bar
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eAlertWindowBg">
            <summary>
            The background of the alert box
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eAlertWindowBorder">
            <summary>
            The border of the alert box
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eBadStateColour">
            <summary>
            Colour for bad events/errors
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eWarnStateColour">
            <summary>
            Colour for warnings
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eGoodStateColour">
            <summary>
            Colour for successful events
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.eSandboxChartBG">
            <summary>
            Background of the analysis chart
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.GraphBackground">
            <summary>
            Background of the main graph visualiser
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.edgeCall">
            <summary>
            Colour of call edges
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.edgeOld">
            <summary>
            Colour of edges to existing instructions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.edgeRet">
            <summary>
            Colour of return edges
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.edgeLib">
            <summary>
            Colour of API call edges (to uninstrumented code)
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.edgeNew">
            <summary>
            Colour of edges to new instructions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.edgeExcept">
            <summary>
            Colour of exception edges
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.nodeStd">
            <summary>
            Colour of non-flow control nodes
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.nodeJump">
            <summary>
            Colour of jump nodes
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.nodeCall">
            <summary>
            Colour of call nodes
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.nodeRet">
            <summary>
            Colour of return nodes
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.nodeExtern">
            <summary>
            Colour of API nodes
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.nodeExcept">
            <summary>
            Colour of Exception nodes
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.SymbolText">
            <summary>
            Colour of API label captions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.SymbolRising">
            <summary>
            Colour of animated rising API captions
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.InternalSymbol">
            <summary>
            Colour of internal symbol labels
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.InstructionText">
            <summary>
            Colour of instruction text labels
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.WireFrame">
            <summary>
            Colour of graph wireframes
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeColour.COUNT">
            <summary>
            The number of available colours
            </summary>
        </member>
        <member name="T:rgat.Themes.eThemeSize">
            <summary>
            Customisable size values
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeSize.ePreviewSelectedBorder">
            <summary>
            The weight of the border of selected preview graphs
            </summary>
        </member>
        <member name="F:rgat.Themes.eThemeSize.COUNT">
            <summary>
            The number of available sizes
            </summary>
        </member>
        <member name="F:rgat.Themes.IsBuiltinTheme">
            <summary>
            Theme is bundled with rgat
            </summary>
        </member>
        <member name="F:rgat.Themes.UnsavedTheme">
            <summary>
            Theme has changes which have not been written to the config file
            </summary>
        </member>
        <member name="M:rgat.Themes.ApplyThemeColours">
            <summary>
            Activate the themes ImGui colours
            </summary>
        </member>
        <member name="M:rgat.Themes.ResetThemeColours">
            <summary>
            Must be called every time the UI is drawn using ApplyThemeColours
            </summary>
        </member>
        <member name="M:rgat.Themes.InitUnsetCustomColours">
            <summary>
            Set any missing theme settings
            </summary>
        </member>
        <member name="P:rgat.Themes.ThemeVersion">
            <summary>
            Version of the active theme
            </summary>
        </member>
        <member name="M:rgat.Themes.SetThemeColourImGui(ImGuiNET.ImGuiCol,System.UInt32)">
            <summary>
            Set an ImGui theme colour
            </summary>
            <param name="item">The ImGuiCol colour type</param>
            <param name="color">The colour value</param>
        </member>
        <member name="M:rgat.Themes.GetThemeSize(rgat.Themes.eThemeSize)">
            <summary>
            Get a custom theme size
            </summary>
            <param name="item">The size to retrieve</param>
            <returns>The float size value</returns>
        </member>
        <member name="M:rgat.Themes.DrawColourSelectors">
            <summary>
            Draw the theme colour customisation widget
            </summary>
            <returns>true if a setting was changed</returns>
        </member>
        <member name="M:rgat.Themes.GetMetadataValue(System.String,System.String@)">
            <summary>
            Get a theme metadata value
            </summary>
            <param name="name">Value to retrieve</param>
            <param name="value">The value retrieved</param>
            <returns>true if succesful</returns>
        </member>
        <member name="M:rgat.Themes.SaveMetadataChange(System.String,System.String)">
            <summary>
            Change a theme metadata value
            </summary>
            <param name="key">The value to change</param>
            <param name="value">The new value</param>
        </member>
        <member name="M:rgat.Themes.DeleteTheme(System.String)">
            <summary>
            Delete a theme
            </summary>
            <param name="name">Name of the theme to delete</param>
        </member>
        <member name="M:rgat.Themes.SavePresetTheme(System.String,System.Boolean)">
            <summary>
            Store the current theme as a preset
            </summary>
            <param name="name">The name to store the theme as</param>
            <param name="setAsDefault">if true, this theme will be loaded on rgat start</param>
        </member>
        <member name="P:rgat.Themes.ThemeVariant">
            <summary>
            Controls can compare this value with a cached value to see if the theme has changed
            </summary>
        </member>
        <member name="M:rgat.Themes.RegenerateUIThemeJSON">
            <summary>
            Write all the current theme attributes into a JSON object
            Updates the ThemeVariant value
            </summary>
            <returns>The JSON serialised theme</returns>
        </member>
        <member name="M:rgat.Themes.ActivateThemeObject(System.String,System.String@)">
            <summary>
            Load and apply a JSON serialised theme
            </summary>
            <param name="themeJSON">JSON theme</param>
            <param name="error">Set to any error encountered while loading it</param>
            <returns>success if the theme was loaded</returns>
        </member>
        <member name="M:rgat.Themes.LoadTheme(System.String)">
            <summary>
            Activate a theme by name
            </summary>
            <param name="themename">Name of the theme to activate</param>
        </member>
        <member name="F:rgat.Themes.CustomThemes">
            <summary>
            Custom themes
            </summary>
        </member>
        <member name="F:rgat.Themes.BuiltinThemes">
            <summary>
            Builtin themes
            </summary>
        </member>
        <member name="F:rgat.Themes.ThemesMetadataCatalogue">
            <summary>
            Metadata for all available themes
            </summary>
        </member>
        <member name="M:rgat.Themes.LoadBuiltinThemes(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Load the builtin rgat themes to make them available for activation
            </summary>
            <param name="themesArray">JArray of builtin themes</param>
        </member>
        <member name="T:rgat.BlockHandlerThread">
            <summary>
            A worker for disassembling the instructions sent by an instrumented trace
            </summary>
        </member>
        <member name="M:rgat.BlockHandlerThread.#ctor(rgat.BinaryTarget,rgat.TraceRecord,System.Nullable{System.UInt32})">
            <summary>
            Create a basic block processing worker
            </summary>
            <param name="binaryTarg">Binary target associated with the trace</param>
            <param name="runrecord">TraceRecord associated with the trace</param>
            <param name="remotePipeID">ID of the pipe receiving basic block data</param>
        </member>
        <member name="M:rgat.BlockHandlerThread.GetBlockPipeName(System.UInt32,System.Int64)">
            <summary>
            Get the name of the pipe to listen on
            </summary>
            <param name="PID">Process ID of the traced process</param>
            <param name="instanceID">Unique trace ID of the process</param>
            <returns>A named pipe name</returns>
        </member>
        <member name="M:rgat.BlockHandlerThread.Begin">
            <summary>
            Start the worker
            </summary>
        </member>
        <member name="M:rgat.BlockHandlerThread.Terminate">
            <summary>
            Cause the worker to stop and disconnect its pipe
            </summary>
        </member>
        <member name="M:rgat.BlockHandlerThread.AddRemoteBlockData(System.Byte[])">
            <summary>
            Add some raw basic block data to the worker queue
            </summary>
            <param name="data">Basic block data from the instrumentation</param>
        </member>
        <member name="T:rgat.Threads.HeatRankingThread">
            <summary>
            Iterates over all the instructions in a thread ranking them by execution count
            </summary>
        </member>
        <member name="M:rgat.Threads.HeatRankingThread.Begin">
            <summary>
            Begin work
            </summary>
        </member>
        <member name="T:rgat.Threads.PreviewRendererThread">
            <summary>
            A worker for rendering the preview graphs of all threads in a trace record
            </summary>
        </member>
        <member name="M:rgat.Threads.PreviewRendererThread.SetPreviewWidget(rgat.PreviewGraphsWidget)">
            <summary>
            Set by the GUI loading thread when the widget has been created
            </summary>
            <param name="widget"></param>
        </member>
        <member name="M:rgat.Threads.PreviewRendererThread.#ctor(rgat.TraceRecord)">
            <summary>
            Create a preview renderer
            </summary>
            <param name="_renderedTrace">The trace with graphs to be rendered</param>
        </member>
        <member name="M:rgat.Threads.PreviewRendererThread.Begin">
            <summary>
            Start this worker
            </summary>
        </member>
        <member name="M:rgat.Threads.PreviewRendererThread.ThreadProc">
            <summary>
            The worker thread entry point
            </summary>
        </member>
        <member name="M:rgat.Threads.ProcessCoordinatorThread.StartLocalTraceThreads(rgat.TraceRecord,System.Int64)">
            <summary>
            Launch threads to handle a trace running on the local system
            </summary>
            <param name="trace">The running trace</param>
            <param name="testID">Optional test ID if the trace is a test</param>
        </member>
        <member name="T:rgat.ModuleHandlerThread">
            <summary>
            A worker for processing process and thread events for a trace as well as symbol data and trace commands
            </summary>
        </member>
        <member name="P:rgat.ModuleHandlerThread.RemoteCommandPipeID">
            <summary>
            The pipe ID of the command pipe connected to a remote tracing instance
            </summary>
        </member>
        <member name="M:rgat.ModuleHandlerThread.GetCommandPipeName(System.UInt32,System.Int64)">
            <summary>
            Get the pipe that the instrumentation tool will listen on for commands
            </summary>
            <param name="PID">Traced process ID</param>
            <param name="randID">Traced process unique ID</param>
            <returns>Command pipe name</returns>
        </member>
        <member name="M:rgat.ModuleHandlerThread.GetEventPipeName(System.UInt32,System.Int64)">
            <summary>
            Get the pipe that the instrumentation tool will send events to
            </summary>
            <param name="PID">Traced process ID</param>
            <param name="randID">Traced process unique ID</param>
            <returns>Event pipe name</returns>
        </member>
        <member name="M:rgat.ModuleHandlerThread.Terminate">
            <summary>
            Cause the worker to stop processing and disconnect its pipes
            </summary>
        </member>
        <member name="M:rgat.ModuleHandlerThread.AddRemoteEventData(System.Byte[])">
            <summary>
            Add event data recieved from a remotely traced process
            </summary>
            <param name="data">event data bytes</param>
        </member>
        <member name="M:rgat.ModuleHandlerThread.ProcessIncomingTraceCommand(System.Byte[])">
            <summary>
            Process a trace command sent by the remote GUI
            </summary>
            <param name="data">bytes of the command</param>
        </member>
        <member name="M:rgat.ModuleHandlerThread.RemoteCommandListener">
            <summary>
            This runs in headless mode, taking commands from the UI and passing them to the instrumentation tool
            in the target process
            </summary>
        </member>
        <member name="M:rgat.ModuleHandlerThread.RemoteEventListener(System.Object)">
            <summary>
            This is run by the UI in remote mode, passing trace events to the trace processor
            </summary>
            <param name="ProcessMessageobj"></param>
        </member>
        <member name="T:rgat.InstructionData">
            <summary>
            An object to describe a disasembled instruction
            </summary>
        </member>
        <member name="F:rgat.InstructionData.Mnemonic">
            <summary>
            Text of the instruction mnemonic
            </summary>
        </member>
        <member name="F:rgat.InstructionData.OpStr">
            <summary>
            Texe of the instruction operands
            </summary>
        </member>
        <member name="F:rgat.InstructionData.ContainingBlockIDs">
            <summary>
            All the basic blocks this instruction is a member of
            </summary>
        </member>
        <member name="F:rgat.InstructionData.InsText">
            <summary>
            Full text of the disassembled instruction
            </summary>
        </member>
        <member name="F:rgat.InstructionData.itype">
            <summary>
            Flow control type of the instruction
            </summary>
        </member>
        <member name="F:rgat.InstructionData.conditional">
            <summary>
            Is the instruction a conditional jump
            </summary>
        </member>
        <member name="F:rgat.InstructionData.dataEx">
            <summary>
            Is the instruction in a non-text area
            </summary>
        </member>
        <member name="F:rgat.InstructionData.hasSymbol">
            <summary>
            Does the address have a symbol associated with it
            </summary>
        </member>
        <member name="F:rgat.InstructionData.PossibleidataThunk">
            <summary>
            Could the instruction be an APi thunk
            </summary>
        </member>
        <member name="F:rgat.InstructionData.IsMPX">
            <summary>
            Is the instruction an MPX instruction
            </summary>
        </member>
        <member name="F:rgat.InstructionData.Address">
            <summary>
            Memory address of this instruction
            </summary>
        </member>
        <member name="F:rgat.InstructionData.branchAddress">
            <summary>
            If this instruction is a branch, this is the address the taken branch leads to
            </summary>
        </member>
        <member name="F:rgat.InstructionData.condDropAddress">
            <summary>
            Address of the instruction after this if there is no flow control
            </summary>
        </member>
        <member name="F:rgat.InstructionData.GlobalModNum">
            <summary>
            The module this instruction is located in
            </summary>
        </member>
        <member name="F:rgat.InstructionData.MutationIndex">
            <summary>
            Which version of the instruction at this address is this disassembly for
            </summary>
        </member>
        <member name="F:rgat.InstructionData.BlockBoundary">
            <summary>
            Is this instruction at the start or end of a basic block
            </summary>
        </member>
        <member name="F:rgat.InstructionData.Opcodes">
            <summary>
            The raw bytes of the instruction
            </summary>
        </member>
        <member name="P:rgat.InstructionData.NumBytes">
            <summary>
            How many bytes of opcodes the instruction has
            </summary>
        </member>
        <member name="P:rgat.InstructionData.ThreadVerts">
            <summary>
            The index of the node containing this instruction in each thread [Thread ID/instruction index]
            </summary>
        </member>
        <member name="M:rgat.TraceRecord.GetTimeLineEntries(System.Int64,System.Int32)">
            <summary>
            Fetches an array of the newest timeline events for the trace
            </summary>
            <param name="oldest">The oldest event to return</param>
            <param name="max">The most events to return. Default 5.</param>
            <returns>And array of TIMELINE_EVENT objects</returns>
        </member>
        <member name="M:rgat.TraceRecord.GetProtoGraphs">
            <summary>
            get a copy of the protographs list
            </summary>
            <returns></returns>
        </member>
        <member name="P:rgat.TraceRecord.GraphCount">
            <summary>
            The number of graphs in the trace
            </summary>
        </member>
        <member name="F:rgat.TraceRecord.PlottedGraphs">
            <summary>
            Dictionary of plotted graphs by thread ID
            </summary>
        </member>
        <member name="M:rgat.TraceRecord.GetPlottedGraphs">
            <summary>
            Get a thread safe copy of the list of plotted graphs
            </summary>
            <returns>List of plotted graphs</returns>
        </member>
        <member name="P:rgat.TraceRecord.TraceType">
            <summary>
            The type of trace. Currently visualiser is the only supported type
            </summary>
        </member>
        <member name="F:rgat.TraceRecord.ParentTrace">
            <summary>
            The trace of the process which spawn this process, if this process is a child
            </summary>
        </member>
        <member name="F:rgat.TraceRecord.children">
            <summary>
            Child processes spawned by this process
            </summary>
        </member>
        <member name="M:rgat.TraceRecord.GetChildren">
            <summary>
            returns a copy of the child trace list
            </summary>
            <returns>Child tracerecords</returns>
        </member>
        <member name="F:rgat.TraceRecord.ProcessThreads">
            <summary>
            Trace data handling workers
            </summary>
        </member>
        <member name="P:rgat.TraceRecord.PID">
            <summary>
            Process ID of the process being traced
            </summary>
        </member>
        <member name="P:rgat.TraceRecord.randID">
            <summary>
            Unique ID to distinguish between processes with identical PIDs
            </summary>
        </member>
        <member name="M:rgat.TraceRecord.CountDescendantTraces">
            <summary>
            Count how many processes are desecended from this process. Count includes this one.
            </summary>
            <returns>1 + number of child processes</returns>
        </member>
        <member name="M:rgat.TraceRecord.GetTraceByID(System.UInt64)">
            <summary>
            Get a trace by unique ID
            </summary>
            <param name="traceID">ID of the trace</param>
            <returns>TraceRecord or null if not found</returns>
        </member>
        <member name="M:rgat.TraceRecord.GetProtoGraphByTID(System.UInt64)">
            <summary>
            Get a thread associated with a thread ID. todo this is bad due to non uniqueness
            </summary>
            <param name="graphID">Thread ID of the graph</param>
            <returns>ProtoGraph if found, or null</returns>
        </member>
        <member name="M:rgat.TraceRecord.Save(System.DateTime,System.String@)">
            <summary>
            Save all the data needed to reconstruct a process run and all its thread graphs
            Recursively saves child processes
            </summary>
            <param name="traceStartedTime">The time the run was started</param>
            <param name="savePath">The filesystem path the trace was saved to</param>
            <returns>The path the trace was saved to</returns>
        </member>
        <member name="M:rgat.TraceRecord.ExportPajek(System.UInt32)">
            <summary>
            Export the current trace in the pajek format, a simple graph serialisation format that other graph layout programs accept
            </summary>
            <param name="TID">Thread ID of the graph to serialise</param>
        </member>
        <member name="M:rgat.TraceRecord.SendDebugStepOver(rgat.ProtoGraph)">
            <summary>
            Send a step command to execute a single instruction in a paused trace. Will step over function calls
            </summary>
            <param name="graph">The graph of the thread to step over</param>
        </member>
        <member name="M:rgat.TraceRecord.SendDebugStep(rgat.ProtoGraph)">
            <summary>
            Send a step command to execute a single instruction in a paused trace. Will step into function calls
            </summary>
            <param name="graph">The graph of the thread to step over</param>
        </member>
        <member name="P:rgat.TraceRecord.DisassemblyData">
            <summary>
            The disassembly associated with each address
            </summary>
        </member>
        <member name="P:rgat.TraceRecord.LaunchedTime">
            <summary>
            the time the user pressed start, not when the first process was seen
            </summary>
        </member>
        <member name="P:rgat.TraceRecord.Target">
            <summary>
            The BinaryTarget associated with this trace object
            </summary>
        </member>
        <member name="P:rgat.TraceRecord.IsRunning">
            <summary>
            false if the process is no longer being traced
            </summary>
        </member>
        <member name="P:rgat.TraceRecord.TraceState">
            <summary>
            The state of the trace process
            </summary>
        </member>
        <member name="P:rgat.TraceRecord.ProcessingRemaining">
            <summary>
            Are there any edges left to render, or might more trace data arrive?
            </summary>
        </member>
        <member name="M:rgat.TraceRecord.EvaluateProcessTestRequirement(rgat.Testing.TraceRequirements,rgat.Testing.TraceTestResultCommentary@)">
            <summary>
            See if the success requirements of a complete trace run are met 
            </summary>
            <param name="ptreq">Trace requirements object for the test</param>
            <param name="resultsobj">A Test results commentary object which describes how the test executed</param>
            <returns>The results of the test</returns>
        </member>
        <member name="M:rgat.Updates.ParseChangelogChanges(System.String)">
            <summary>
            Teturns a list of changes from the current version to a given changelog
            </summary>
            <param name="b64ChangelogMDContent">base64 encoded changelog.md file</param>
            <returns>plaintext formatted list of change types and changes</returns>
        </member>
        <member name="T:rgat.VeldridGraphBuffers.Position2DColour">
            <summary>
            This is used for shaders where the coordinate being referenced is contained in a texture. 
            The Texposition is the location (in the positions texture) to read and then draw geometry at with the specified colour.
            </summary>
        </member>
        <member name="F:rgat.VeldridGraphBuffers.Position2DColour.Position">
            <summary>
            Texture coordinate
            </summary>
        </member>
        <member name="F:rgat.VeldridGraphBuffers.Position2DColour.Color">
            <summary>
            Colour of the geometry
            </summary>
        </member>
        <member name="F:rgat.VeldridGraphBuffers.Position2DColour.SizeInBytes">
            <summary>
            Size of this structure in bytes
            </summary>
        </member>
        <member name="T:rgat.VeldridGraphBuffers.GeomPositionColour">
            <summary>
            This just describes raw position and colour of geometry. Used for things unrelated to graph geometry like wireframes
            If Position.W == 1 then x,y are used as a positions texture reference as in TextureOffsetColour
            </summary>
        </member>
        <member name="M:rgat.VeldridGraphBuffers.DoDispose(Veldrid.Texture)">
            <summary>
            Dispose of a Texture
            </summary>
            <param name="tx">Texture set to dispose</param>
        </member>
        <member name="M:rgat.VeldridGraphBuffers.DoDispose(Veldrid.Framebuffer)">
            <summary>
            Dispose of a Framebuffer
            </summary>
            <param name="fb">Framebuffer set to dispose</param>
        </member>
        <member name="M:rgat.VeldridGraphBuffers.DoDispose(Veldrid.ResourceSet)">
            <summary>
            Dispose of a ResourceSet
            </summary>
            <param name="rs">Resource set to dispose</param>
        </member>
        <member name="M:rgat.VeldridGraphBuffers.VRAMDispose(Veldrid.DeviceBuffer)">
            <summary>
            Dispose of a VRAM devide buffer and track the deallocation
            </summary>
            <param name="db">DeviceBuffer to dispose</param>
        </member>
        <member name="M:rgat.VeldridGraphBuffers.ZeroFillBuffer(Veldrid.DeviceBuffer,Veldrid.GraphicsDevice,System.UInt32)">
            <summary>
            Fill a devicebuffer with null bytes
            </summary>
            <param name="buffer">Buffer to fill</param>
            <param name="gd">GraphicsDevice to use</param>
            <param name="zeroStartOffset">Offset to start filling from</param>
        </member>
        <member name="M:rgat.VeldridGraphBuffers.CreateZeroFilledBuffer(Veldrid.BufferDescription,Veldrid.GraphicsDevice,System.UInt32,System.String)">
            <summary>
            Create a devicebuffer filled with null bytes
            </summary>
            <param name="bd">Description of the buffer to fill</param>
            <param name="gd">GraphicsDevice to use</param>
            <param name="zeroStartOffset">Where to start filling with zeros (before these is reserved for copying existing data)</param>
            <param name="name">Name for the buffer</param>
            <returns></returns>
        </member>
        <member name="P:rgat.VideoEncoder.Loaded">
            <summary>
            Is FFMpeg configured
            </summary>
        </member>
        <member name="P:rgat.VideoEncoder.Initialised">
            <summary>
            Are the video capture settings configured
            </summary>
        </member>
        <member name="P:rgat.VideoEncoder.Error">
            <summary>
            The last error, if one was recorded
            </summary>
        </member>
        <member name="P:rgat.VideoEncoder.CurrentVideoWidth">
            <summary>
            Width of the frames of the recorded video
            </summary>
        </member>
        <member name="P:rgat.VideoEncoder.CurrentVideoHeight">
            <summary>
            Height of the frames of the recorded video
            </summary>
        </member>
        <member name="F:rgat.VideoEncoder.CurrentRecordingFile">
            <summary>
            Filepath of the video being recorded
            </summary>
        </member>
        <member name="P:rgat.VideoEncoder.Recording">
            <summary>
            Video recording is active, though it may still be paused
            </summary>
        </member>
        <member name="F:rgat.VideoEncoder.CapturePaused">
            <summary>
            Recording new frames to video is suspended
            </summary>
        </member>
        <member name="P:rgat.VideoEncoder.FrameQueueSize">
            <summary>
            Number of frames awaiting recording
            </summary>
        </member>
        <member name="T:rgat.VideoEncoder.CaptureContent">
            <summary>
            Types of content that can be recorded
            </summary>
        </member>
        <member name="F:rgat.VideoEncoder.CaptureContent.Graph">
            <summary>
            The graph in the main graph widget
            </summary>
        </member>
        <member name="F:rgat.VideoEncoder.CaptureContent.GraphAndPreviews">
            <summary>
            The graph and previews in the visualiser tab
            </summary>
        </member>
        <member name="F:rgat.VideoEncoder.CaptureContent.Window">
            <summary>
            The entire UI
            </summary>
        </member>
        <member name="F:rgat.VideoEncoder.CaptureContent.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="M:rgat.VideoEncoder.GetCapturedContent">
            <summary>
            What is being recorded
            </summary>
            <returns>CaptureContent of the area being recorded</returns>
        </member>
        <member name="M:rgat.VideoEncoder.Load">
            <summary>
            Setup the path to the FFMpeg tool
            </summary>
        </member>
        <member name="M:rgat.VideoEncoder.StartRecording">
            <summary>
            Begin capture of the selected content to the video file
            </summary>
        </member>
        <member name="M:rgat.VideoEncoder.StopRecording">
            <summary>
            Stop recording video to the file
            </summary>
        </member>
        <member name="P:rgat.VideoEncoder.RecordingStateChangeTimeAgo">
            <summary>
            How long ago the recording stopped/started in milliseconds
            </summary>
        </member>
        <member name="M:rgat.VideoEncoder.GetCaptureDirectory">
            <summary>
            Get the path of the directory videos will be stored to
            </summary>
            <returns>The filepath</returns>
        </member>
        <member name="M:rgat.VideoEncoder.GenerateVideoFilepath(rgat.PlottedGraph)">
            <summary>
            Generate the filepath for a new video
            </summary>
            <param name="graph">The graph to generate a video for, or null for generic content</param>
            <returns></returns>
        </member>
        <member name="M:rgat.VideoEncoder.SaveImage(rgat.PlottedGraph,System.Drawing.Bitmap)">
            <summary>
            Write an image to disk
            </summary>
            <param name="graph">Optional graph being captured, for filename generation</param>
            <param name="bmp">The bitmap of the image</param>
            <returns>The path of the saved image</returns>
        </member>
        <member name="M:rgat.VideoEncoder.Go(rgat.PlottedGraph)">
            <summary>
            A task for recording a video
            </summary>
            <param name="graph">Optional graph to record</param>
        </member>
        <member name="M:rgat.VideoEncoder.QueueFrame(System.Drawing.Bitmap,rgat.PlottedGraph)">
            <summary>
            Add a bitmap to record to video
            </summary>
            <param name="frame">The bitmap to store</param>
            <param name="graph">The optional graph being recorded</param>
        </member>
        <member name="M:rgat.VideoEncoder.DrawSettingsPane">
            <summary>
            Draw the video options pane
            </summary>
        </member>
        <member name="F:rgat.rgatUI.ExitFlag">
            <summary>
            Causes the UI to fall out of the update loop and initiate rgat shutdown
            </summary>
        </member>
        <member name="M:rgat.rgatUI.ActivateNotification">
            <summary>
            Tells the UI that something is happening on the menu bar so it should be displayed
            Currently its always displayed except on the splash screen
            </summary>
        </member>
        <member name="P:rgat.rgatUI.ExitRequested">
            <summary>
            rgat will exit when convenient
            This is only handled by the UI runner
            </summary>
        </member>
        <member name="M:rgat.rgatUI.DrawDialogs">
            <summary>
            Draws any open dialogs
            </summary>
            
            This isn't great but coming up with something more elegant can wait
        </member>
        <member name="M:rgat.rgatUI.DrawInnerRightMenuItems">
            <summary>
            Display media actions like recording and screen capture
            </summary>
        </member>
        <member name="M:rgat.rgatUI.DisplayScreenshotNotification">
            <summary>
            Displays the still camera icon on the menu bar
            Displays an animated rectangle drawing the eye to it, from the region captured
            UI.SCREENSHOT_ICON_LINGER_TIME controls how long the icon is displayed
            UI.SCREENSHOT_ANIMATION_RECT_SPEED controls how fast the rectangle travels/disappears
            </summary>
        </member>
        <member name="M:rgat.rgatUI.DisplayVideoRecordingNotification">
            <summary>
            Displays the video camera icon on the menu bar
            
            </summary>
        </member>
        <member name="M:rgat.rgatUI.DrawOuterRightMenuItems(System.Single@)">
            <summary>
            Displays less-used utilities like logs, tests 
            </summary>
            <param name="logMenuX">Set to the center X position of the log menu button, for alert animations</param>
        </member>
        <member name="M:rgat.rgatUI.NotifyScreenshotComplete(System.String)">
            <summary>
            Call this after a screenshot is complete to begin the screenshot display animation
            </summary>
            <param name="savePath">Path of the screenshot, for use in the mouseover text</param>
        </member>
        <member name="M:rgat.rgatUI.DrawTargetBar">
            <summary>
            Draws a dropdown allowing selection of one of the loaded target binaries
            </summary>
            <returns>true if at least one binary is loaded, otherwise false</returns>
        </member>
        <member name="T:rgat.GraphPlotWidget">
            <summary>
            A widget for displaying a rendered graph plot
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.#ctor(ImGuiNET.ImGuiController,Veldrid.GraphicsDevice,rgat.rgatState,System.Nullable{System.Numerics.Vector2})">
            <summary>
            A widget for displaying a rendered graph plot
            </summary>
            <param name="controller">The ImGui controller</param>
            <param name="gdev">A Veldrid GraphicsDevice</param>
            <param name="clientState">The rgat clientstate</param>
            <param name="initialSize">The initial size of the widget</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.SetStateChangeCallback(System.Action{System.Boolean})">
            <summary>
            Called whenever the widget opens/closes an inner dialog
            </summary>
            <param name="action">Function to call when dialog is opened/closed. Param is open/closed state.</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.RecreateGraphicsBuffers">
            <summary>
            Must have write lock to call
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.CenterGraphInFrameStep(System.Numerics.Matrix4x4,System.Single@)">
            <summary>
            Adjust the camera offset and zoom so that every node of the graph is in the frame
            Must have read lock to call
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.UpdateAndGetViewMatrix(System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Must hold read lock
            </summary>
            <param name="proj"></param>
            <param name="view"></param>
            <param name="world"></param>
        </member>
        <member name="M:rgat.GraphPlotWidget.Draw(System.Numerics.Vector2,rgat.PlottedGraph)">
            <summary>
            Write the rendered graph/HUD items to the draw list
            </summary>
            <param name="graphSize">Size of the graph area being drawn</param>
            <param name="graph">The graph being drawn</param>
        </member>
        <member name="F:rgat.GraphPlotWidget._edgesPipelineRelative">
            <summary>
            Edges pipeline = line list or line strp
            Points pipeline = visible nodes where we draw sphere/etc texture
            Picking pipleine = same as points but different data, not drawn to screen. Seperate shaders to reduce branching
            Font pipeline = triangles
            </summary>
        </member>
        <member name="F:rgat.GraphPlotWidget._edgesPipelineRaw">
            <summary>
            Edges pipeline = line list or line strp
            Points pipeline = visible nodes where we draw sphere/etc texture
            Picking pipleine = same as points but different data, not drawn to screen. Seperate shaders to reduce branching
            Font pipeline = triangles
            </summary>
        </member>
        <member name="F:rgat.GraphPlotWidget._pointsPipeline">
            <summary>
            Edges pipeline = line list or line strp
            Points pipeline = visible nodes where we draw sphere/etc texture
            Picking pipleine = same as points but different data, not drawn to screen. Seperate shaders to reduce branching
            Font pipeline = triangles
            </summary>
        </member>
        <member name="F:rgat.GraphPlotWidget._pickingPipeline">
            <summary>
            Edges pipeline = line list or line strp
            Points pipeline = visible nodes where we draw sphere/etc texture
            Picking pipleine = same as points but different data, not drawn to screen. Seperate shaders to reduce branching
            Font pipeline = triangles
            </summary>
        </member>
        <member name="F:rgat.GraphPlotWidget._fontPipeline">
            <summary>
            Edges pipeline = line list or line strp
            Points pipeline = visible nodes where we draw sphere/etc texture
            Picking pipleine = same as points but different data, not drawn to screen. Seperate shaders to reduce branching
            Font pipeline = triangles
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.GetOutputFramebuffer(Veldrid.Framebuffer@)">
            <summary>
            Get a framebuffer we can safely draw to
            Must hold upgradable read lock
            </summary>
            <param name="drawtarget"></param>
        </member>
        <member name="M:rgat.GraphPlotWidget.ReleaseOutputFramebuffer">
            <summary>
            Drawing is complete. Release the write lock so it can be displayed on the screen
            The other framebuffer will become locked for writing
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.GetLatestTexture(Veldrid.Texture@)">
            <summary>
            Get the most recently drawn framebuffer for displaying to the user
            </summary>
            <param name="graphtexture">Texture of the framebuffer contents</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.SetupRenderingResources">
            <summary>
            Initialise graphics resources
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.RecreateOutputTextures">
            <summary>
            Re-initialise graphics resources, for use when the size of the widget has changed
            </summary>
        </member>
        <member name="F:rgat.GraphPlotWidget.GraphShaderParams.proj">
            public Matrix4x4 rotatedView;
        </member>
        <member name="M:rgat.GraphPlotWidget.ToggleRenderingMode(rgat.CONSTANTS.eRenderingMode)">
            <summary>
             Sets rendering mode to the specified mode
             If already using that mode, returns the mode to standard trace display
            </summary>
            <param name="newMode">Mode to toggle</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.SetRenderingMode(rgat.CONSTANTS.eRenderingMode)">
            <summary>
            Set the rendering mode to the specified mode
            </summary>
            <param name="newMode">Mode to activate</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.RenderString(System.String,System.UInt32,System.Single,ImGuiNET.ImFontPtr,System.Collections.Generic.List{rgat.GraphPlotWidget.fontStruc}@,System.UInt32,System.Single)">
            <summary>
            Convert a string to a List of fontStrucs describing the font glyphs to display the string
            The output is cached so this is not performed every frame
            </summary>
            <param name="inputString">Text to display</param>
            <param name="nodeIdx">Node associated with the text - used for positioning</param>
            <param name="fontScale">Text scaling factor</param>
            <param name="font">Font glyphs to use</param>
            <param name="stringVerts">Working list of glyph descriptors to add the generated fontStrucs to</param>
            <param name="colour">Text colour</param>
            <param name="yOff">Vertical offset for the glyphs</param> //todo think caching wrecks this
        </member>
        <member name="M:rgat.GraphPlotWidget.updateShaderParams(rgat.PlottedGraph,System.UInt32,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,Veldrid.CommandList)">
            <summary>
            Update graph drawing parameters used by the shaders
            </summary>
            <param name="graph">The graph being drawn</param>
            <param name="textureSize"></param>
            <param name="projection"></param>
            <param name="view"></param>
            <param name="world"></param>
            <param name="cl"></param>
            <returns></returns>
        </member>
        <member name="M:rgat.GraphPlotWidget.DrawGraph(Veldrid.CommandList,rgat.PlottedGraph)">
            <summary>
            Draws the various nodes, edges, captions and illustrations to the framebuffer for display
            </summary>
            <param name="cl">A veldrid commandlist, for use by this thread only</param>
            <param name="graph">The PlottedGraph to draw</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.DrawGraphImage">
            <summary>
            Add the most recently drawn framebuffer to the drawlist
            </summary>
            <returns>The texture for the drawn framebuffer. Useful for screenshots/videos</returns>
        </member>
        <member name="M:rgat.GraphPlotWidget.GetTextColour">
            <summary>
            Get the current text colour as a Vector4
            Wrapper for the memory unsafe ImGui API 
            </summary>
            <returns>A Vector4 describing the current text colour</returns>
        </member>
        <member name="M:rgat.GraphPlotWidget.DrawKeystrokes(System.Numerics.Vector2)">
            <summary>
            Draw the latest keyboard shortcut activations to the screen
            </summary>
            <param name="topLeft">Location on the screen to draw to</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.DisplayEventMessages(System.Numerics.Vector2)">
            <summary>
            Display trace events (process/thread stop/start) in the visualiser widget which are
            important but not important enough to be an application alert
            May also want to add certain APIs, especially network related
            </summary>
            <param name="pos">Position to draw to</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.DrawHUD(System.Numerics.Vector2,rgat.PlottedGraph)">
            <summary>
            Draw in-widget buttons such as the layout selector, keybind activations and the quickmenu
            </summary>
            <param name="widgetSize"></param>
            <param name="activeGraph"></param>
        </member>
        <member name="M:rgat.GraphPlotWidget.GenerateMainGraph(Veldrid.CommandList)">
            <summary>
            Converts the node/edge positions computed by the layout engine into a rendered image of points and lines
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.HandleGraphUpdates">
            <summary>
            must hold upgradable reader lock
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.DoMouseNodePicking(Veldrid.GraphicsDevice)">
            <summary>
            Must hold read lock
            Check if the mouse position corresponds to a node ID in the picking texture
            If so - the mouse is over that nod
            </summary>
            <param name="_gd"></param>
        </member>
        <member name="T:rgat.PreviewGraphsWidget">
            <summary>
            A widget for rendering small versions of each recorded graph
            </summary>
        </member>
        <member name="F:rgat.PreviewGraphsWidget.EachGraphWidth">
            <summary>
            Width of each preview graph
            </summary>
        </member>
        <member name="F:rgat.PreviewGraphsWidget.EachGraphHeight">
            <summary>
            Height of each preview graph
            </summary>
        </member>
        <member name="P:rgat.PreviewGraphsWidget.clickedGraph">
            <summary>
            The graph the user clicked
            </summary>
        </member>
        <member name="M:rgat.PreviewGraphsWidget.#ctor(ImGuiNET.ImGuiController,Veldrid.GraphicsDevice,rgat.rgatState)">
            <summary>
            Create a preview graph widget
            </summary>
            <param name="controller">ImGui controller</param>
            <param name="gdev">Graphics device for GPU access</param>
            <param name="clientState">rgat state object</param>
        </member>
        <member name="M:rgat.PreviewGraphsWidget.SetActiveTrace(rgat.TraceRecord)">
            <summary>
            Set the trace of the active graph
            </summary>
            <param name="trace"></param>
        </member>
        <member name="M:rgat.PreviewGraphsWidget.SetSelectedGraph(rgat.PlottedGraph)">
            <summary>
            Set the active graph
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:rgat.PreviewGraphsWidget.ResetClickedGraph">
            <summary>
            We have dealt with the graph click, clear it
            </summary>
        </member>
        <member name="M:rgat.PreviewGraphsWidget.HandleFrameTimerFired">
            <summary>
            do it via Draw so events are handled by the same thread
            </summary>
        </member>
        <member name="M:rgat.PreviewGraphsWidget.CenterGraphInFrameStep(System.Single@,rgat.PlottedGraph)">
            <summary>
            Adjust the camera offset and zoom so that every node of the graph is in the frame
            </summary>
        </member>
        <member name="M:rgat.PreviewGraphsWidget.DrawWidget">
            <summary>
            Draw the preview graph widget
            </summary>
        </member>
        <member name="F:rgat.PreviewGraphsWidget.PreviewPopupGraph">
            <summary>
            The last recorded preview the mouse was hovering over
            </summary>
        </member>
        <member name="P:rgat.PreviewGraphsWidget.HoveredGraph">
            <summary>
            The preview graph the mouse is hovering over
            </summary>
        </member>
        <member name="M:rgat.PreviewGraphsWidget.GeneratePreviewGraph(Veldrid.CommandList,rgat.PlottedGraph)">
            <summary>
            Used by the preview renderer thread to compute the next round of layout
            </summary>
            <param name="cl">Renderer worker command list</param>
            <param name="graph">Graph to compute</param>
        </member>
        <member name="M:rgat.PreviewGraphsWidget.DrawPreviewGraph(rgat.PlottedGraph,System.Single,System.Single,System.UInt32)">
            <summary>
            Draw a preview graph texture on the preview pane
            </summary>
            <param name="graph">The graph being drawn</param>
            <param name="xPadding">horizontal padding</param>
            <param name="captionHeight">height of the caption</param>
            <param name="captionBackgroundcolor">contrast background colour of the caption</param>
            <returns>The graph was clicked</returns>
        </member>
        <member name="M:rgat.VisualiserTab.SetDialogStateChangeCallback(System.Action{System.Boolean})">
            <summary>
            Called whenever the widget opens/closes an inner dialog
            </summary>
            <param name="action">Function to call when dialog is opened/closed. Param is open/closed state.</param>
        </member>
        <member name="M:rgat.YARAScan.RecompileRules(System.String)">
            <summary>
            Compile all yara rules in the directory to memory and disk signature blobs, containing the respective rules enabled in the settings
            </summary>
            <param name="rulesDir">Directory containing directories full of yara rules</param>
            <returns>Paths to the sucessfully created rules files</returns>
        </member>
        <member name="T:ImGuiNET.ImGuiController">
            <summary>
            A modified version of Veldrid.ImGui's ImGuiRenderer.
            Manages input for ImGui and handles rendering ImGui's DrawLists with Veldrid.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.GetOrCreateImGuiBinding(Veldrid.ResourceFactory,Veldrid.TextureView,System.String)">
            <summary>
            Gets or creates a handle for a texture to be drawn with ImGui.
            Pass the returned handle to Image() or ImageButton().
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.GetOrCreateImGuiBinding(Veldrid.ResourceFactory,Veldrid.Texture,System.String)">
            <summary>
            Gets or creates a handle for a texture to be drawn with ImGui.
            Pass the returned handle to Image() or ImageButton().
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.GetImageResourceSet(System.IntPtr)">
            <summary>
            Retrieves the shader texture binding for the given helper handle.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.RecreateFontDeviceTexture(Veldrid.GraphicsDevice)">
            <summary>
            Recreates the device texture used to render text.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.Render(Veldrid.GraphicsDevice,Veldrid.CommandList)">
            <summary>
            Renders the ImGui draw list data.
            This method requires a <see cref="T:Veldrid.GraphicsDevice"/> because it may create new DeviceBuffers if the size of vertex
            or index data has increased beyond the capacity of the existing buffers.
            A <see cref="T:Veldrid.CommandList"/> is needed to submit drawing and resource update commands.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.Update(System.Single,Veldrid.InputSnapshot)">
            <summary>
            Updates ImGui input and IO configuration state.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.SetPerFrameImGuiData(System.Single)">
            <summary>
            Sets per-frame data based on the associated window.
            This is called by Update(float).
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.Dispose">
            <summary>
            Frees all graphics resources used by the renderer.
            </summary>
        </member>
        <member name="T:rgatFilePicker.FilePicker">
            <summary>
            A file selection dialog widgget
            </summary>
        </member>
        <member name="M:rgatFilePicker.FilePicker.#ctor(rgat.BridgeConnection)">
            <summary>
            Create a file selection dialog
            </summary>
            <param name="remoteMirror">Optional remote host this dialog is associated with</param>
        </member>
        <member name="T:rgatFilePicker.FilePicker.PickerResult">
            <summary>
            Result of file picking
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.PickerResult.eNoAction">
            <summary>
            No file was chosen
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.PickerResult.eTrue">
            <summary>
            A file was chosen
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.PickerResult.eFalse">
            <summary>
            Picking was cancelled
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.LastDriveListRefresh">
            <summary>
            When the drivelist was list refreshed
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.SelectedFile">
            <summary>
            The selected file
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.SelectedFiles">
            <summary>
            Currently selected files
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.SelectedDirectories">
            <summary>
            Currently selected directories
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.AllowedExtensions">
            <summary>
            File extensions which can be selected
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.OnlyAllowFolders">
            <summary>
            Only folders can be selected
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.AllowMultiSelect">
            <summary>
            Multiple files can be selected
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.FILEPICKER_DATA.Contents">
            <summary>
            The contents of the current directory
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.FILEPICKER_DATA.CurrentDirectory">
            <summary>
            The path of the current directory
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.FILEPICKER_DATA.CurrentDirectoryExists">
            <summary>
            The current directory exists
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.FILEPICKER_DATA.CurrentDirectoryParent">
            <summary>
            The parent of the current directory
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.FILEPICKER_DATA.NextRemoteDirectory">
            <summary>
            The directory to be set as current on the remote device
            </summary>
        </member>
        <member name="F:rgatFilePicker.FilePicker.FILEPICKER_DATA.ErrMsg">
            <summary>
            The last error message
            </summary>
        </member>
        <member name="M:rgatFilePicker.FilePicker.GetDirectoryPicker(System.Object,System.String)">
            <summary>
            Get the directory-only file picker associated with key 'o'
            </summary>
            <param name="o">Picker to retrieve</param>
            <param name="startingPath">Initial directory</param>
            <returns>FilePicker object</returns>
        </member>
        <member name="M:rgatFilePicker.FilePicker.GetRemoteFilePicker(System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get a filepicker for a remote machine
            </summary>
            <param name="o">Key object</param>
            <param name="searchFilter">Allowed extensions filter string</param>
            <param name="onlyAllowFolders">Restrict selection to directories</param>
            <param name="allowMulti">Allow selection of multiple items</param>
            <returns></returns>
        </member>
        <member name="M:rgatFilePicker.FilePicker.GetFilePicker(System.Object,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get a filepicker associated with key object 'o'
            </summary>
            <param name="o">Key object</param>
            <param name="startingPath">Initial directory to display</param>
            <param name="searchFilter">Allowed extensions filter string</param>
            <param name="onlyAllowFolders">Restrict selection to directories</param>
            <param name="allowMulti">Allow selection of multiple items</param>
            <returns></returns>
        </member>
        <member name="M:rgatFilePicker.FilePicker.EmitFileSelectableEntry(System.String,rgatFilePicker.FilePicker.FileMetadata)">
            <summary>
            Draw a non-directory file in the file list
            </summary>
            <param name="path">Full path of the file</param>
            <param name="filemeta">FileMetadata information for the file</param>
            <returns>True if the entry was activated (select+enter or double clicked)</returns>
        </member>
        <member name="M:rgatFilePicker.FilePicker.InitCurrentDirInfo(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Fill out the listing of the remote directory
            lock must be held
            </summary>
            <param name="responseTok">JToken containing information about the current directory</param>
            <returns>true if the data was valid</returns>
        </member>
        <member name="M:rgatFilePicker.FilePicker.GetLocalDriveStrings">
            <summary>
            Get the drive list of this computer
            </summary>
            <returns>List of rootdirectory, drivename pairs</returns>
        </member>
    </members>
</doc>
