<?xml version="1.0"?>
<doc>
    <assembly>
        <name>rgat</name>
    </assembly>
    <members>
        <member name="T:rgat.APIDetailsWin">
            <summary>
            Handles loading and interaction with an API data file, for use 
            in the analysis tab to so how the trace interacted with the system
            </summary>
        </member>
        <member name="P:rgat.APIDetailsWin.Loaded">
            <summary>
            True if the API data file was loaded
            </summary>
        </member>
        <member name="M:rgat.APIDetailsWin.Load(System.String,System.IProgress{System.Single})">
            <summary>
            Load an API data file
            </summary>
            <param name="datapath">Fileystem path of the file</param>
            <param name="progress">Optional IProgress for file loading</param>
        </member>
        <member name="M:rgat.APIDetailsWin.FindAPIDatafile">
            <summary>
            Search for the API Data file
            </summary>
            <returns>Path of the file if found, otherwise null</returns>
        </member>
        <member name="T:rgat.APIDetailsWin.InteractionEffect">
            <summary>
            A base class for API interaction effects
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionEffect.TypeName">
            <summary>
            Needed for deserialisation
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.LinkReferenceEffect">
            <summary>
            The effect of this API is to create a reference to an entity
            Eg: Opening a file creates a handle which refers to a filepath
            </summary>
        </member>
        <member name="M:rgat.APIDetailsWin.LinkReferenceEffect.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a link reference effect for an API call
            </summary>
            <param name="entityIdx">Position of the entity parameter (-1 = return val, 0 = first param)</param>
            <param name="refIdx">Position of the reference parameter  (-1 = return val, 0 = first param)</param>
        </member>
        <member name="P:rgat.APIDetailsWin.LinkReferenceEffect.ReferenceIndex">
            <summary>
            The position of the parameter which is a reference to an entity
            </summary>
        </member>
        <member name="P:rgat.APIDetailsWin.LinkReferenceEffect.EntityIndex">
            <summary>
            The position of the parameter which is the entity that the reference will linked to
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.UseReferenceEffect">
            <summary>
            The effect of this API is to actually interact with an entity
            Eg: Writing to a file, sending network data to an IP address
            </summary>
        </member>
        <member name="M:rgat.APIDetailsWin.UseReferenceEffect.#ctor(System.Int32)">
            <summary>
            Create a reference usage effect
            </summary>
            <param name="refIdx">Position of the reference parameter  (-1 = return val, 0 = first param)</param>
        </member>
        <member name="P:rgat.APIDetailsWin.UseReferenceEffect.ReferenceIndex">
            <summary>
            The parameter index of the entity reference that is interacted with (-1 = return val, 0 = first param)
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.DestroyReferenceEffect">
            <summary>
            The effect of this API is to destroy a reference to an entity (eg: CloseHandle destroys a HANDLE)
            </summary>
        </member>
        <member name="M:rgat.APIDetailsWin.DestroyReferenceEffect.#ctor(System.Int32)">
            <summary>
            Create a reference destruction effect
            </summary>
            <param name="refIdx">Position of the reference parameter  (-1 = return val, 0 = first param)</param>
        </member>
        <member name="P:rgat.APIDetailsWin.DestroyReferenceEffect.ReferenceIndex">
            <summary>
            The parameter index of the entity reference that is destroyed (-1 = return val, 0 = first param)
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.APIParamType">
            <summary>
            How we deal with API call parameters
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.APIParamType.Info">
            <summary>
            The parameter is informational only
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.APIParamType.Entity">
            <summary>
            The parameter describes an interesting system object (file path, network address, etc)
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.APIParamType.Reference">
            <summary>
            The parameter is a reference to an entity (HANDLE to a file, socket to a network address, etc)
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.InteractionEntityType">
            <summary>
            The category of the entity
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionEntityType.File">
            <summary>
            Filesystem path
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionEntityType.Host">
            <summary>
            Network address
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionEntityType.Registry">
            <summary>
            Windows registry path
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.InteractionRawType">
            <summary>
            A specific type for a parameter
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionRawType.Handle">
            <summary>
            HANDLE reference
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionRawType.Path">
            <summary>
            Filesystem path
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionRawType.Domain">
            <summary>
            DNS domain
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.InteractionRawType.HKEY">
            <summary>
            Registry HKEY
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.API_PARAM_ENTRY">
            <summary>
            Describes certain interesting parameters of an API call which we can link together to describe program behaviour
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.Index">
            <summary>
            The position of the parameter in the function call. 0 => first param. -1 => return value
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.name">
            <summary>
            The name of the parameter
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.paramType">
            <summary>
            How we use the parameter
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.EntityType">
            <summary>
            The category of activity the parameter belongs to
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.RawType">
            <summary>
            The actual raw type of parameter (HANDLE, domain, etc)
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.IsConditional">
            <summary>
            May not receive this parameter (eg: failed registry key open -> no registry key handle)
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_PARAM_ENTRY.NoCase">
            <summary>
            Comparisons are case insensitive, particularly numbers such as handles which get represented as hex strings
            </summary>
        </member>
        <member name="T:rgat.APIDetailsWin.API_ENTRY">
            <summary>
            Describes the effects of an API call we have recorded
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_ENTRY.FilterType">
            <summary>
            A category this API falls into, for UI filtering. This might become a list of strings/tags later.
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_ENTRY.LoggedParams">
            <summary>
            A list of parameters/return results from the API call. Used to map their interaction with targets for plotting on the analysis chart.
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_ENTRY.Label">
            <summary>
            How the API call interacted with the entity. Used as a label in the analysis chart.
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_ENTRY.Effects">
            <summary>
            How this api call affects our tracking of interaction targets
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_ENTRY.ModuleName">
            <summary>
            the filename of the library
            </summary>
        </member>
        <member name="F:rgat.APIDetailsWin.API_ENTRY.Symbol">
            <summary>
            the case-sensitive API name
            </summary>
        </member>
        <member name="M:rgat.APIDetailsWin.ResolveModuleEnum(System.String)">
            <summary>
            Lookup a system library by path and get a reference that can be used to index internal library metadata (filter types, symbol info)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:rgat.APIDetailsWin.GetAPIInfo(System.Int32,System.String)">
            <summary>
            Get loaded API info for a symbol
            </summary>
            <param name="moduleReference">Internal library reference from ResolveModuleEnum </param>
            <param name="symbolname">Case sensitive API name (ie: a library export like you would pass to GetProcAddress)</param>
            <returns>API_ENTRY struct for the symbol if we have metadata for it, otherwise null</returns>
        </member>
        <member name="T:rgat.eModuleTracingMode">
            <summary>
            How the instrumentation handles code in different modules
            </summary>
        </member>
        <member name="F:rgat.eModuleTracingMode.eDefaultIgnore">
            <summary>
            Code will not be traced unless explicitly requested
            </summary>
        </member>
        <member name="F:rgat.eModuleTracingMode.eDefaultTrace">
            <summary>
            Code will be traced unless explicitly ignored
            </summary>
        </member>
        <member name="T:rgat.TraceChoiceSettings">
            <summary>
            Settings for how rgat chooses which code to trace or ignore
            </summary>
        </member>
        <member name="F:rgat.TraceChoiceSettings.TracingMode">
            <summary>
            Whether rgat traces or ignores modules which are not in the ignore/trace lists
            </summary>
        </member>
        <member name="F:rgat.TraceChoiceSettings.traceDirs">
            <summary>
            Binaries in these directories will be traced in default ignore mode
            </summary>
        </member>
        <member name="P:rgat.TraceChoiceSettings.TraceDirCount">
            <summary>
            The number of directories listed for instrumentation
            </summary>
        </member>
        <member name="F:rgat.TraceChoiceSettings.traceFiles">
            <summary>
            These binaries will be instrumentated in default ignore mode
            </summary>
        </member>
        <member name="P:rgat.TraceChoiceSettings.TraceFilesCount">
            <summary>
            The number of modules that are listed for tracing
            </summary>
        </member>
        <member name="P:rgat.TraceChoiceSettings.IgnoreDirsCount">
            <summary>
            The number of directories which are explicitly ignored in default trace mode
            </summary>
        </member>
        <member name="P:rgat.TraceChoiceSettings.ignoreFilesCount">
            <summary>
            The number of files which are explicitly ignored in default trace mode
            </summary>
        </member>
        <member name="M:rgat.TraceChoiceSettings.GetIgnoredDirs">
            <summary>
            Get the list of directories which contain modules which should not be instrumented
            </summary>
            <returns>A list of directory paths</returns>
        </member>
        <member name="M:rgat.TraceChoiceSettings.ClearIgnoredDirs">
            <summary>
            Clear the list of ignored directories
            </summary>
        </member>
        <member name="M:rgat.TraceChoiceSettings.GetIgnoredFiles">
            <summary>
            Get the list of modules which should not be instrumented
            </summary>
            <returns>A list of file paths</returns>
        </member>
        <member name="M:rgat.TraceChoiceSettings.ClearIgnoredFiles">
            <summary>
            Clear the list of ignored files
            </summary>
        </member>
        <member name="M:rgat.TraceChoiceSettings.GetTracedDirs">
            <summary>
            Get the list of directories which contain modules which should be instrumented even in ignore mode
            </summary>
            <returns>A list of directory paths</returns>
        </member>
        <member name="M:rgat.TraceChoiceSettings.ClearTracedDirs">
            <summary>
            Clear the list of explicitly instrumented directories
            </summary>
        </member>
        <member name="M:rgat.TraceChoiceSettings.GetTracedFiles">
            <summary>
            Get the list of modules which should be instrumented even in ignore mode
            </summary>
            <returns>A list of file paths</returns>
        </member>
        <member name="M:rgat.TraceChoiceSettings.ClearTracedFiles">
            <summary>
            Clear the list of explicitly instrumented modules
            </summary>
        </member>
        <member name="M:rgat.TraceChoiceSettings.AddTracedDirectory(System.String)">
            <summary>
            Add a directory whose contents should be instrumented in default-ignore mode
            </summary>
            <param name="path">A directory path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.RemoveTracedDirectory(System.String)">
            <summary>
            Remove a directory from the list of directories to trace in ignore mode
            </summary>
            <param name="path">A directory path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.AddTracedFile(System.String)">
            <summary>
            Add a module which should be instrumented in default-ignore mode
            </summary>
            <param name="path">A file path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.RemoveTracedFile(System.String)">
            <summary>
            Remove a file from the list of files to trace in ignore mode
            </summary>
            <param name="path">A file path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.AddIgnoredDirectory(System.String)">
            <summary>
            Add a directory whose contents should be ignored in default-trace mode
            </summary>
            <param name="path">A directory path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.RemoveIgnoredDirectory(System.String)">
            <summary>
            Remove a directory from the list of directories to ignore in default-trace mode
            </summary>
            <param name="path">A directory path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.AddIgnoredFile(System.String)">
            <summary>
            Add a file which should not be instrumented in default-instrument mode
            </summary>
            <param name="path">A file path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.RemoveIgnoredFile(System.String)">
            <summary>
            Remove a file from the list of files to ignore in default-trace mode
            </summary>
            <param name="path">A file path</param>
        </member>
        <member name="M:rgat.TraceChoiceSettings.InitDefaultExclusions">
            <summary>
            Add some standard default paths to always ignore
            At the moment this is just the windows directory as tracing the workings of kernel32/ntdll/etc is generally not useful
            </summary>
        </member>
        <member name="T:rgat.BinaryTarget">
            <summary>
            A binary file (.exe/.dll) that rgat can trace
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.RemoteHost">
            <summary>
            The network address this target resides on
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.RemoteBinary">
            <summary>
            True if this target was loaded on a remote host in remote tracing mode
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.RemoteAccessible">
            <summary>
            Do we have an active connection to the host this file resides on?
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.RemoteInitialised">
            <summary>
            Have we been sent the initialisation data for this file from the remote host?
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.IsAccessible">
            <summary>
            Is this file accessible at the moment?
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.TraceChoices">
            <summary>
            Settings for which modules are instrumented/ignored
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.StartBytes">
            <summary>
            A snippet of the first bytes of the file
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.PEFileObj">
            <summary>
            An object representing the parsed PE File header/structure
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.IsTestBinary">
            <summary>
            Is this target an rgat test binary
            </summary>
        </member>
        <member name="M:rgat.BinaryTarget.MarkTestBinary">
            <summary>
            Mark this file as an rgat test binary
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.BitWidth">
            <summary>
            32 or 64 bit
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.FilePath">
            <summary>
            Local path to the file
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.FileName">
            <summary>
            Name of the file
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.HexPreview">
            <summary>
            Formatted hex preview of the file start bytes
            </summary>
        </member>
        <member name="P:rgat.BinaryTarget.ASCIIPreview">
            <summary>
            Formatted ASCII preview of the start bytes
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.IsLibrary">
            <summary>
            This file is a DLL
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.SelectedExportIndex">
            <summary>
            Which library export to run
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.LoaderName">
            <summary>
            The filename rgat will give the library loader
            </summary>
        </member>
        <member name="F:rgat.BinaryTarget.Exports">
            <summary>
            List of (name,ordinal) tuples of library exports
            </summary>
        </member>
        <member name="M:rgat.BinaryTarget.#ctor(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Create a BinaryTarget object for a binary that rgat can trace
            </summary>
            <param name="filepath">The filesystem path of the binary</param>
            <param name="bitWidth_">32 or 64</param>
            <param name="remoteAddr">The address of the remote rgat instance where this target is being traced</param>
            <param name="isLibrary">if the target is a library or not. This value will be used if the binary cannot be found and parsed</param>
        </member>
        <member name="M:rgat.BinaryTarget.GetRemoteLoadInitData">
            <summary>
            This file is on a headless remote tracing host. 
            Fetch some JSON serialised intialisation data to send to the GUI host.
            </summary>
            <returns>JSON serialised initialisation data</returns>
        </member>
        <member name="M:rgat.BinaryTarget.InitialiseFromRemoteData(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Load serialsed target data into this object 
            </summary>
            <param name="dataTok">JSON target data</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:rgat.BinaryTarget.HexTooltip">
            <summary>
            Get an annoted hexdump snippet of the start of the target binary
            </summary>
            <returns>The snippet as a string</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetCurrentTraceConfiguration">
            <summary>
            Get the tracing configuration settings as a dictrionary of keyvaluepair strings
            </summary>
            <returns>Settings dictionary</returns>
        </member>
        <member name="M:rgat.BinaryTarget.SetTraceConfig(System.String,System.String)">
            <summary>
            Set a tracing configuration value to be sent to the instrumentation tool
            </summary>
            <param name="key">Setting to set</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="M:rgat.BinaryTarget.GetYaraHits(rgat.YARAScan.YARAHit[]@)">
            <summary>
            Get Yara hits recorded for the target
            </summary>
            <param name="hits">Array of YARAHit objects describing rule hits from the last scan</param>
            <returns>true if there were any hits</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetDieHits(System.String[]@)">
            <summary>
            Get an array of Detect It Easy signature hits from the last scan of the target
            </summary>
            <param name="hits">Array of hit texts</param>
            <returns>true if there were any hits</returns>
        </member>
        <member name="M:rgat.BinaryTarget.ClearSignatureHits(rgat.CONSTANTS.eSignatureType)">
            <summary>
            Purge the signature hits recorded by the last scan
            </summary>
            <param name="sigType">Type of signature hits to remove</param>
        </member>
        <member name="M:rgat.BinaryTarget.AddDiESignatureHit(System.String)">
            <summary>
            Record a Detect It Easy (dotnet) signature hit for this target binary
            </summary>
            <param name="hitstring">The signature hit data</param>
        </member>
        <member name="M:rgat.BinaryTarget.AddYaraSignatureHit(dnYara.ScanResult)">
            <summary>
            Record a local Yara signature hit for this target binary
            It will also be sent to any connected remote sessions
            </summary>
            <param name="hit">The ScanResult hit data generated by dnYara</param>
        </member>
        <member name="M:rgat.BinaryTarget.AddYaraSignatureHit(rgat.YARAScan.YARAHit)">
            <summary>
            Record a remote Yara signature hit for this target binary recieved from a remote session
            </summary>
            <param name="hit">The YARAHit hit data</param>
        </member>
        <member name="P:rgat.BinaryTarget.TracesCount">
            <summary>
            The number of traces that have been generated for this target
            </summary>
        </member>
        <member name="M:rgat.BinaryTarget.DeleteTrace(System.DateTime)">
            <summary>
            Delete a trace record
            </summary>
            <param name="timestarted"></param>
        </member>
        <member name="M:rgat.BinaryTarget.GetTraceByIDs(System.UInt32,System.Int64,rgat.TraceRecord@)">
            <summary>
            Retrieve the data for a trace record
            </summary>
            <param name="pid">Process ID of the trace</param>
            <param name="ID">Unique ID of the trace</param>
            <param name="result">TraceRecord of the associated trace</param>
            <returns>true if a trace was found</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetTracesUIList">
            <summary>
            Get a list of start time/tracerecord pairs for thread-safe iteration
            </summary>
            <returns>A list of times and trace records</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetTracesList">
            <summary>
            Get a thread safe list of all recorded traces for this binary
            </summary>
            <returns>A list of tracerecords</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetSHA1Hash">
            <summary>
            Get the SHA1 hash of this binary
            </summary>
            <returns>A SHA1 string</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetSHA256Hash">
            <summary>
            Get the SHA256 hash of this binary
            </summary>
            <returns>A SHA256 string</returns>
        </member>
        <member name="M:rgat.BinaryTarget.ParseFile">
            <summary>
            Load the file from disk to fill the data of this object
            </summary>
        </member>
        <member name="M:rgat.BinaryTarget.GetFileSizeString">
            <summary>
            Get a formatted file size string for display in the UI
            </summary>
            <returns></returns>
        </member>
        <member name="M:rgat.BinaryTarget.CreateNewTrace(System.DateTime,System.UInt32,System.Int64,rgat.TraceRecord@)">
            <summary>
            Create and record a new TraceRecord for an instrumentation run of this binary
            </summary>
            <param name="timeStarted">The time the trace was started</param>
            <param name="PID">The OS process ID of the first process</param>
            <param name="ID">The unique ID of the process recorded by the instrumentation tool</param>
            <param name="newRecord">The created TraceRecord</param>
            <returns>true is a new trace was created, false if an existing one was fetched</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetFirstTrace">
            <summary>
            Get the first trace in the trace list. Use to just get any trace for display
            </summary>
            <returns>A TraceRecord, or null if none existed</returns>
        </member>
        <member name="M:rgat.BinaryTarget.GetNewestTrace">
            <summary>
            Get the most recently recorded trace
            </summary>
            <returns>A TraceRecord, or null if none existed</returns>
        </member>
        <member name="T:rgat.BinaryTargets">
            <summary>
            Manages the collection of loaded binary targets
            </summary>
        </member>
        <member name="P:rgat.BinaryTargets.Count">
            <summary>
            Number of loaded BinaryTargets
            </summary>
        </member>
        <member name="M:rgat.BinaryTargets.GetTargetPaths">
            <summary>
            List of all the paths of loaded BinaryTargets
            </summary>
            <returns>List of filesystem paths</returns>
        </member>
        <member name="M:rgat.BinaryTargets.GetTargetByPath(System.String,rgat.BinaryTarget@)">
            <summary>
            Get a BinaryTarget object for a filesystem path.
            </summary>
            <param name="path">Fileystem path string</param>
            <param name="result">Binarytarget for the path, if already loaded</param>
            <returns>bool target was akready loaded</returns>
        </member>
        <member name="M:rgat.BinaryTargets.GetBinaryTargets">
            <summary>
            Fetch a thread-safe copy of the list of loaded BinaryTargets
            </summary>
            <returns>List of BinaryTargets</returns>
        </member>
        <member name="M:rgat.BinaryTargets.AddTargetByPath(System.String,System.Boolean,System.Int32,System.String)">
            <summary>
            Initialise and record a BinaryTarget object from a filesystem path
            </summary>
            <param name="path">Filesystem path of the target</param>
            <param name="isLibrary">true if a DLL</param>
            <param name="arch">32 or 64 bit, or 0 if unknown (remote)</param>
            <param name="remoteAddr">Optional remote address of the system this binary is on</param>
            <returns>Created BinaryTarget object</returns>
        </member>
        <member name="M:rgat.BinaryTargets.RegisterTarget(rgat.BinaryTarget)">
            <summary>
            Add a pre-constructed BinaryTarget
            </summary>
            <param name="target">BinaryTarget to add</param>
        </member>
        <member name="M:rgat.BinaryTargets.GetTargetBySHA1(System.String,rgat.BinaryTarget@)">
            <summary>
            Fetch a BinaryTarget by its SHA1 hash
            </summary>
            <param name="sha1">SHA1 hash to find</param>
            <param name="target">BinaryTarget, if found</param>
            <returns>true if found</returns>
        </member>
        <member name="F:rgat.BridgeConnection.emsgType.AsyncData">
            <summary>
            Non-trace related data sent without requiring a command to generate it (eg: result of signature scanning)
            </summary>
        </member>
        <member name="P:rgat.BridgeConnection.GUIMode">
            <summary>
            Whether this instance is the GUI.
            The GUI sends tracing commands and recieves trace data and associated metadata (available files to execute, signature hits, etc)
            It does not do the opposite. Ever.
            </summary>
        </member>
        <member name="F:rgat.BridgeConnection.RemoteEndPoint">
            <summary>
            An IPEndPoint for the host we are connected to
            </summary>
        </member>
        <member name="M:rgat.BridgeConnection.#ctor(System.Boolean)">
            <summary>
            An rgat connection object
            </summary>
            <param name="isgui">true if this process is running in GUI mode. One (and only one) party must have this flag set</param>
        </member>
        <member name="M:rgat.BridgeConnection.Start(System.Net.IPAddress,System.String,System.Int32,rgat.BridgeConnection.OnGotDataCallback,rgat.BridgeConnection.OnConnectSuccessCallback)">
            <summary>
            Initiate a bridge connection in remote mode
            This will be complete when it connects to another rgat instance with the right network key
            </summary>
            <param name="localBindAddress">The local ip address to connect from</param>
            <param name="remoteConnectAddress">The remote ip address or domain to connect to</param>
            <param name="remoteConnectPort">The remote TCP port to connect to</param>
            <returns></returns>
        </member>
        <member name="M:rgat.BridgeConnection.StartConnectOut(System.Net.Sockets.TcpClient,System.String,System.Int32,rgat.BridgeConnection.OnConnectSuccessCallback)">
            <summary>
            Establish a connection to a listening rgat instance
            </summary>
            <param name="client">The TcpClient object for the connection</param>
            <param name="remoteConnectAddress">Host address of the remote party</param>
            <param name="remoteConnectPort">Port the remote party is listening on</param>
            <param name="connectCallback">The main connection handler which will serve the connection</param>
        </member>
        <member name="M:rgat.BridgeConnection.AuthenticateConnectionTask(System.Boolean)">
            <summary>
            A task that exchanges and verifies the initial handshake messages
            </summary>
            <param name="isServer">true if the other party initiated the connection, false if we did</param>
            <returns>true if the handshake succeeded and both parties have the same key</returns>
        </member>
        <member name="M:rgat.BridgeConnection.TryCreateCryptoStream(System.Net.Sockets.TcpClient,System.Boolean)">
            <summary>
            Ensure the other end of the connection knows our key
            </summary>
            <param name="client">The TcpClient for the connection</param>
            <param name="isServer">true if the other party initiated the connection, false if we did</param>
            <returns></returns>
        </member>
        <member name="M:rgat.BridgeConnection.ReadData(System.Nullable{rgat.BridgeConnection.NETWORK_MSG}@)">
            <summary>
            Read the next message from the conencted party
            </summary>
            <param name="data">A NETWORK_MSG object</param>
            <returns>If successful</returns>
        </member>
        <member name="M:rgat.BridgeConnection.RawSendData(rgat.BridgeConnection.emsgType,System.String)">
            <summary>
            Encrypt and send a message to the connected party
            </summary>
            <param name="msgtype">Message Type</param>
            <param name="textdata">Message string</param>
            <returns>If successful</returns>
        </member>
        <member name="M:rgat.BridgeConnection.RawSendData(rgat.BridgeConnection.NETWORK_MSG)">
            <summary>
            Encrypt and send a message to the connected party
            </summary>
            <param name="msg">A NETWORK_MSG object containing the message</param>
            <returns>If successful</returns>
        </member>
        <member name="M:rgat.BridgeConnection.AddNetworkDisplayLogMessage(System.String,System.Nullable{rgat.Themes.eThemeColour})">
            <summary>
            Add a message to the remote tracing dialog log panel
            </summary>
            <param name="msg">Text of the message to add</param>
            <param name="colour">Colour of the message, or null for default</param>
        </member>
        <member name="M:rgat.BridgeConnection.Start(System.Net.IPAddress,System.Int32,rgat.BridgeConnection.OnGotDataCallback,rgat.BridgeConnection.OnConnectSuccessCallback)">
            <summary>
            Initiate a bridge connection in listener mode
            This will be complete when another rgat instance connects to it with the right network key
            </summary>
            <param name="localBindAddress">The local ip address to bind to</param>
            <param name="localBindPort">The local TCP port to listen on</param>
            <returns></returns>
        </member>
        <member name="M:rgat.BridgeConnection.SendCommand(System.String,System.String,rgat.Config.RemoteDataMirror.ProcessResponseCallback,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Send a command to the remote instance of rgat (which is in commandline tracing mode)
            The handling of the response (a JToken) depends on the arguments
                If a callback is specified, it will be executed with the response as a parameter
                Otherwise it will be stored for the requestor to pick up later
            </summary>
            <param name="command">The task to perform</param>
            <param name="recipientID">The intended recipient of the task, eg a certain file picker requested the directory they are in</param>
            <param name="callback">A callback to be performed with the response</param>
        </member>
        <member name="M:rgat.BridgeConnection.SendResponseObject(System.Int32,System.Object)">
            <summary>
            Used to send raw .net data types (serialised as JSON) as command responses
            Useful for when the GUI just wants a copy of some pre-existing data
            </summary>
            <param name="command"></param>
            <param name="response"></param>
        </member>
        <member name="M:rgat.BridgeConnection.SendResponseJSON(System.Int32,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Send pre-built json objects as a command response
            This is usually for when the gui needs some API output, rather than neatly packaged data that we already have
            </summary>
            <param name="command"></param>
            <param name="response"></param>
        </member>
        <member name="M:rgat.GlobalConfig.VerifyCertificate(System.String,System.String,System.String@,System.String@)">
            <summary>
            Checks that a binary has a valid code signing certificate issued to one of the expected subject names
            </summary>
            <param name="path">Path of binary to be tested</param>
            <param name="expectedSigners">Comma seperated list of valid certificate subject names</param>
            <param name="error">Errors encountered in validating the certificate (no or invalid signer)</param>
            <param name="warning">Warnings encountered validating the certificate (time issues)</param>
            <returns>Whether the certificate was valid. Expired/Not yet valid certs will return true with the warning field set</returns>
        </member>
        <member name="F:rgat.GlobalConfig.Preview_PerProcessLoopSleepMS">
            <summary>
             Delay between rendering each preview trace (collection of threads)
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.Preview_PerThreadLoopSleepMS">
            <summary>
            Delay between preview rendering each thread in a trace
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.Preview_EdgesPerRender">
            <summary>
            Maximum number of edges to plot for each round of preview
            graph plotting. This is CPU bound so shoudl be limited to ensure each graph gets
            a turn
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.animationFadeRate">
            <summary>
            Amount of alpha to reduce fading item by each frame
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.MainGraphRenderDelay">
            <summary>
            Milliseconds to wait between frames of Main (displayed) Graph rendering
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.LiveAnimationUpdatesPerFrame">
            <summary>
            How many items of trace data to use to plot the graph per frame
            Lower for interactivity, increase for throughput
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.NewGraphLayout">
            <summary>
            The initial graph layout used for new traces
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.LayoutAllComputeEnabled">
            <summary>
            Toggle use of the GPU computation engine for main/preview graphs
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.LayoutPositionsActive">
            <summary>
            Toggle position computation
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.LayoutAttribsActive">
            <summary>
            Toggle attribute (animation brightness+size) computation
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.NodeSoftSpeedLimit">
            <summary>
            Maximum speed of force-directed nodes. Fast nodes will layout quickly but wobble
            in their low energy position
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.Settings">
            <summary>
            The main user-settings storage object which is serialised to settings.json
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig._settingsLock">
            <summary>
            UI/App related config
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.ResponsiveKeys">
            <summary>
            These keys trigger actions that need to be reacted to repeatedly and immediately (mainly graphical actions like rotation)
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.ResponsiveHeldActions">
            <summary>
            Keybinds triggered by responsive keys
            </summary>
        </member>
        <member name="F:rgat.GlobalConfig.StatisticsTimeAvgWindow">
            <summary>
            how many frame timing values to store for calculating UI performance statistics
            </summary>
        </member>
        <member name="F:rgat.Config.LaunchConfig.eRunMode.GUI">
            <summary>
            Full GPU rendered GUI mode
            </summary>
        </member>
        <member name="F:rgat.Config.LaunchConfig.eRunMode.GPURenderCommand">
            <summary>
            Performs a full trace + graph rendering, without the UI. 
            Results drawn to an image and/or video
            </summary>
        </member>
        <member name="F:rgat.Config.LaunchConfig.eRunMode.Bridged">
            <summary>
            Lightweight proxy mode which does little more than spawn processes and feed results back to
            a connected rgat instance
            </summary>
        </member>
        <member name="F:rgat.Config.LaunchConfig.eRunMode.NoGPUTraceCommand">
            <summary>
            Generates a trace file that can be read by rgat in GUI mode
            </summary>
        </member>
        <member name="F:rgat.Config.LaunchConfig.eRunMode.Invalid">
            <summary>
            The provided command line arguments were not valid for any supported mode of operation
            </summary>
        </member>
        <member name="M:rgat.Config.LaunchConfig.DeNullifyArgumentless(System.String[])">
            <summary>
            nothing => null
            -M => null
            This makes it so -M => ""
            Allows us to react to arguments with no value provided (eg: thing with no path -> do the thing but use a default path)
            </summary>
            <param name="originalParams"></param>
        </member>
        <member name="M:rgat.Config.LaunchConfig.SetRunMode">
            <summary>
            Work out what the user wants to do based on the arguments
            </summary>
        </member>
        <member name="F:rgat.Config.rgatSettings.Inited">
            <summary>
            A flag used to prevent saving of the settings during the loading process
            </summary>
        </member>
        <member name="M:rgat.Config.rgatSettings.EnsureValidity">
            <summary>
            Perform some checks on the loaded config to try and make sure it won't crash the program
            Adds any values that might have appeared in a new version
            </summary>
        </member>
        <member name="T:rgat.Config.rgatSettings.NetworkSettings">
            <summary>
            Connection settings for remote tracing
            </summary>
        </member>
        <member name="M:rgat.Config.rgatSettings.KeybindSettings.InitDefaultKeybinds">
            <summary>
            A set of standard keybinds for new installs
            </summary>
        </member>
        <member name="M:rgat.Config.rgatSettings.KeybindSettings.InitResponsiveKeys">
            <summary>
            Some keybinds we don't want to wait for the OS repeat detection (S........SSSSSSSSSSS) because it makes
            things like graph movement and rotation clunky. Instead we read for their keypress every update instead
            of listening for the key action
            
            Alt/Shift/Ctrl modifiers are reserved for these keys, so two different actions can't be bound to a key this way.
            </summary>
        </member>
        <member name="P:rgat.Config.rgatSettings.PathSettings.Paths">
            <summary>
            Filesystem locations containing things rgat needs (instrumentation tools, signatures, etc)
            </summary>
        </member>
        <member name="F:rgat.Config.rgatSettings.PathSettings.BinaryValidationErrors">
            <summary>
            Errors such as bad signatures encountered while validating binaries used by rgat (pintools, etc).
            </summary>
        </member>
        <member name="F:rgat.Config.rgatSettings.PathSettings._BinaryValidationErrorCache">
            <summary>
            BinaryValidationErrors stored in a faster data structure for access by the UI each frame
            </summary>
        </member>
        <member name="M:rgat.Config.rgatSettings.PathSettings.SetBinaryPath(rgat.CONSTANTS.PathKey,System.String)">
            <summary>
            Set the value of a binary path setting (a tool like pin/ffmpeg or a library such as a pintool)
            </summary>
            <param name="setting">A BinaryPathKey value</param>
            <param name="path">A filesystem path for the setting</param>
            <returns></returns>
        </member>
        <member name="P:rgat.Config.rgatSettings.TracingSettings.ArgStorageMax">
            <summary>
            how many bytes back from an instruction to search for a symbol of the function it belongs to
            </summary>
        </member>
        <member name="T:rgat.Config.rgatSettings.MediaCaptureSettings">
            <summary>
            Video encoding and screenshot related config
            </summary>
        </member>
        <member name="P:rgat.Config.rgatSettings.CachedRecentPaths.RecentPaths">
            <summary>
            Filesystem locations the user has accessed (opened binaries, opened traces, filepicker directories)
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PROGRAMVERSION.MAJOR">
            <summary>
            Major version
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PROGRAMVERSION.MINOR">
            <summary>
            Minor Version
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PROGRAMVERSION.PATCH">
            <summary>
            Patch version
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PROGRAMVERSION.PATCHNAME">
            <summary>
            Optional, non-unique name for the given version (preview, release, bugfix, etc)
            Other values must still be unique (eg: '1.1.1 Preview' and '1.1.1 Release' cannot both exist)
            </summary>
        </member>
        <member name="P:rgat.CONSTANTS.PROGRAMVERSION.RGAT_VERSION">
            <summary>
            The simple major.minorpath version of this rgat build. should probably reference the assembly instead. todo
            </summary>
        </member>
        <member name="P:rgat.CONSTANTS.PROGRAMVERSION.RGAT_VERSION_SEMANTIC">
            <summary>
            The SemVer version of rgat
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.MAX_MODULE_PATH_LENGTH">
            <summary>
            Limit length of displayed module paths
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.PREVIEW_PANE_WIDTH">
            <summary>
            Width of the preview pane
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.PREVIEW_PANE_GRAPH_HEIGHT">
            <summary>
            Height of each preview graph
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.PREVIEW_PANE_X_PADDING">
            <summary>
            Horizontal preview graph padding
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.PREVIEW_PANE_Y_SEP">
            <summary>
            Vertical preview graph padding
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.UI_SHORT_TIMER_INTERVAL">
            <summary>
            Timer for tasks that need doing regularly but not every frame
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.UI_LONG_TIMER_INTERVAL">
            <summary>
            Timer for occasional housekeeping tasks
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.SCREENSHOT_ICON_LINGER_TIME">
            <summary>
            How long the screenshot icon will stay on the status bar
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.SCREENSHOT_ANIMATION_RECT_SPEED">
            <summary>
            How fast the screenshot feedback rectangle will collapse
            10 = it will linger for 1/10th of a second
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.UI.ALERT_TEXT_LINGER_TIME">
            <summary>
            How long alerts will stay in the alert pane
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.NETWORK.UpdateCheckMinimumDelayMinutes">
            <summary>
            How long to wait between checks for new versions (check only happens on startup)
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.SIGNERS">
            <summary>
            Expected code certificate subjects for binaries rgat will load or execute
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.SIGNERS.PIN_SIGNERS">
            <summary>
            Expected code certificate subject for pin.exe binaries
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.SIGNERS.RGAT_SIGNERS">
            <summary>
            Expected code certificate subject for rgat binaries
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.TESTS.testextension">
            <summary>
            The file extension for test description data files
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.eEdgeNodeType">
            <summary>
            Types for nodes edges which control how they are laid out or rendered
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eEdgeCall">
            <summary>
            Edge to a call instruction
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eEdgeOld">
            <summary>
            Edge to an instruction that has already been visited from another instruction
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eEdgeReturn">
            <summary>
            Edge from a return instruction
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eEdgeLib">
            <summary>
            Edge of an API call
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eEdgeNew">
            <summary>
            Edge to an instruction that has not been executed before
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eEdgeException">
            <summary>
            Edge to an exception node
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eNodeNonFlow">
            <summary>
            Edge to another instruction in the same basic block
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eNodeJump">
            <summary>
            An unconditional jump instruction
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eNodeCall">
            <summary>
            A call instruction
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eNodeReturn">
            <summary>
            A return instruction
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eNodeExternal">
            <summary>
            An API call
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eNodeException">
            <summary>
            An exception source
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eENLAST">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eEdgeNodeType.eFIRST_IN_THREAD">
            <summary>
            The first instruction in a thread
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.HighlightType">
            <summary>
            Category of filter used to highlight nodes
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.HighlightType.Externals">
            <summary>
            An external API call
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.HighlightType.Addresses">
            <summary>
            A memory address
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.HighlightType.Exceptions">
            <summary>
            An exception
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.PathKey">
            <summary>
            A filesystem path setting
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.PinPath">
            <summary>
            Path of Intel pin.exe
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.PinToolPath32">
            <summary>
            Path of the 32 bit rgat pintool
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.PinToolPath64">
            <summary>
            Path of the 64 bit rgat pintool
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.FFmpegPath">
            <summary>
            Path of ffmpeg.exe for video recording
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.TraceSaveDirectory">
            <summary>
            Directory to save traces to
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.TestsDirectory">
            <summary>
            Directory where rgat tests are stored
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.DiESigsDirectory">
            <summary>
            Directory where Detect It easy signatures are stored
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.YaraRulesDirectory">
            <summary>
            Directory where Yara rules are stored
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.PathKey.MediaCapturePath">
            <summary>
            Directory to save screenshots/videos to
            </summary>
        </member>
        <member name="T:rgat.CONSTANTS.ConditionalType">
            <summary>
            Describes the state of a conditional jump
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.ConditionalType.NOTCONDITIONAL">
            <summary>
            The instruction always falls through
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.ConditionalType.ISCONDITIONAL">
            <summary>
            The instruction is a conditional jump
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.ConditionalType.CONDFELLTHROUGH">
            <summary>
            The conditional jump was not taken
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.ConditionalType.CONDTAKEN">
            <summary>
            The conditional jump was taken
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.ConditionalType.CONDCOMPLETE">
            <summary>
            The conditional jump was taken and fell though in the same trace
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.MoveLeft">
            <summary>
            Shift the graph left (actually moves the camera right)
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.MoveRight">
            <summary>
            Shift the graph right (actually moves the camera left)
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.MoveUp">
            <summary>
            Shift the graph up (actually moves the camera down)
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.MoveDown">
            <summary>
            Shift the graph down (actually moves the camera up)
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.ZoomIn">
            <summary>
            Move the camera forward towards the graph
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.ZoomOut">
            <summary>
            Move the camera back away from the graph
            </summary>
        </member>
        <member name="F:rgat.CONSTANTS.eKeybind.Cancel">
            <summary>
            Close the open dialog/menu
            </summary>
        </member>
        <member name="M:rgat.GithubSignatureManager.PurgeRepoFiles(rgat.GlobalConfig.SignatureSource)">
            <summary>
            Remove the associated signature download directory for this repo
            Must be called before the removal of the repo metadata via DeleteSignatureSource
            </summary>
            <param name="repopath">Repo key</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.#ctor(Veldrid.GraphicsDevice,ImGuiNET.ImGuiController,System.String)">
            <summary>
            Runs the computation shaders on graph layout buffers 
            </summary>
            <param name="gdev">GPU GraphicsDevice to perform computation with</param>
            <param name="controller">An ImGuiController to load shader code from [todo: remove it from the controller, will need these in non-imgui runners]</param>
            <param name="name">A name to identify the layout engine in logfiles</param>
        </member>
        <member name="P:rgat.GraphLayoutEngine.EngineID">
            <summary>
            The unique name of the layout engine
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutEngine.GetScreenFitOffsets(rgat.PlottedGraph,System.Numerics.Matrix4x4,System.Numerics.Vector2,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
            Iterates over the position of every node, translating it to a screen position
            Returns the offsets of the furthest nodes of the edges of the screen
            To fit the graph in the screen, each offset needs to be as small as possible above 0
            
            Acquires reader lock
            </summary>
            <param name="graph">The graph being measured</param>
            <param name="graphWidgetSize">Size of the graph widget</param>
            <param name="xoffsets">xoffsets.X = distance of furthest left node from left of the widget. Ditto xoffsets.Y for right node/side</param>
            <param name="yoffsets">yoffsets.X = distance of furthest bottom node from base of the widget. Ditto yoffsets.Y for top node/side</param>
            <param name="zoffsets">zoffsets.X = distance of furthest bottom node from base of the widget. Ditto yoffsets.Y for top node/side</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.GetPreviewFitOffsets(System.Numerics.Vector2,rgat.PlottedGraph,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
            Iterate over all the nodes and figure out how far they are from the edges of the screen in each dimension
            </summary>
            <param name="graphWidgetSize">Size of the rendering widget</param>
            <param name="graph">Graph being displayed in the widget</param>
            <param name="xoffsets">Furthest from the left and right sides of the widget</param>
            <param name="yoffsets">Furthest from the top and bottom of the widget</param>
            <param name="zoffsets">Furthest from in front of/behind the camera lens in the Z direction</param>
            <returns>true if a meaningful result was returned</returns>
        </member>
        <member name="M:rgat.GraphLayoutEngine.FindHighXYZ(Veldrid.DeviceBuffer,System.Int32,System.Int32@)">
            <summary>
            Must have read lock to call
            Find the node with the highest x/y/z dimension. Ignores w.
            </summary>
            <param name="buf">Device buffer containing values (can be speeds or positions)</param>
            <param name="nodeCount">Number of nodes to iterate over</param>
            <param name="highIndex">set to the index of the highest node</param>
            <returns></returns>
        </member>
        <member name="M:rgat.GraphLayoutEngine.Compute(Veldrid.CommandList,rgat.PlottedGraph,System.Int32,System.Boolean)">
            <summary>
            Do the actual computation of graph layout and animation
            Uses the velocity shader to adjust the velocity based on relative positions
            Uses the position shader to move the nodes at the calculated velocity
            Adjusts the size/alpha of nodes based on the attribute buffer
            </summary>
            <param name="cl">Thread-specific command list</param>
            <param name="graph">Graph to perform computation on</param>
            <param name="mouseoverNodeID">The index of the node the users mouse is hovering over</param>
            <param name="isAnimated">If the graph should have animation attributes computed (ie: main graph with live/replay active)</param>
            <returns>The version ID associated with the produced graph layout computed</returns>
        </member>
        <member name="M:rgat.GraphLayoutEngine.RenderPosition(Veldrid.CommandList,rgat.PlottedGraph,Veldrid.ResourceSet,System.Single)">
            <summary>
            Used the velocity buffer to move the nodes in the positions buffer
            </summary>
            <param name="cl">Thread-specific Veldrid command list to use</param>
            <param name="graph">PlottedGraph to compute</param>
            <param name="resources">Position shader resource set</param>
            <param name="delta">A float representing how much time has passed since the last frame. Higher values => bigger movements</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.RenderVelocity(Veldrid.CommandList,rgat.PlottedGraph,Veldrid.ResourceSet,System.Single,System.Single)">
            <summary>
            Pass the graph plot through the velocity compute shader, to adjust the node velocity based on the positions of other nodes
            </summary>
            <param name="cl">Thread-specific Veldrid command list to use</param>
            <param name="graph">PlottedGraph to compute</param>
            <param name="resources">Velocity shader resource set</param>
            <param name="delta">A float representing how much time has passed since the last frame. Higher values => bigger movements</param>
            <param name="temperature">The activity level of the layout state. Higher balues => bigger movements</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.RenderNodeAttribs(Veldrid.CommandList,rgat.PlottedGraph,Veldrid.DeviceBuffer,Veldrid.ResourceSet,System.Single,System.Int32,System.Boolean)">
            <summary>
            Update the node attributes compute VRAM buffer (alpha, node size, mouseover details)
            </summary>
            <param name="cl">Thread-specific CommandList</param>
            <param name="graph">ProtoGraph being drawn</param>
            <param name="inputAttributes">Attributes buffer being updated</param>
            <param name="resources">Shader resources ResourceSet</param>
            <param name="delta">Time-delta from the last update</param>
            <param name="mouseoverNodeID">Index of the node the mouse is over</param>
            <param name="useAnimAttribs">Flag to specify the graph is in animated-alpha mode</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.ApplyHighlightAttributes(Veldrid.CommandList,rgat.PlottedGraph,Veldrid.DeviceBuffer)">
            <summary>
            Set the highlight state of nodes in the attributes buffer so they can be animated/have their icon set
            </summary>
            <param name="cl">Thread specific Veldrid CommandList</param>
            <param name="graph">Graph with highlights to apply</param>
            <param name="attribsBuf">Attributes buffer to apply highlight data to</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.SetHighlightedNodes(Veldrid.CommandList,System.Collections.Generic.List{System.UInt32},Veldrid.DeviceBuffer,rgat.CONSTANTS.HighlightType)">
            <summary>
            Set a node to highlighted in the attribute buffer
            </summary>
            <param name="cl">Thread specific Veldrid CommandList</param>
            <param name="nodeIdxs">List of node indexes to set as highlighted</param>
            <param name="attribsBuf">Attributes buffer to set highlight state in</param>
            <param name="highlightType">CONSTANTS.HighlightType of highlight [Currently unused, could be used to select the icon]</param>
        </member>
        <member name="M:rgat.GraphLayoutEngine.UnsetHighlightedNodes(Veldrid.CommandList,System.Collections.Generic.List{System.UInt32},Veldrid.DeviceBuffer)">
            <summary>
            Remove a nodes highlighted state in the attribute buffer
            </summary>
            <param name="cl">Thread specific Veldrid CommandList</param>
            <param name="nodeIdxs">List of node indexes to set as not highlighted</param>
            <param name="attribsBuf">Attributes buffer to set highlight state in</param>
        </member>
        <member name="P:rgat.GraphLayoutEngine.AverageComputeTime">
            <summary>
            Average time in Milliseconds taken by the GPU to perform a round of velocity/position/attribute computation
            Average computed over GlobalConfig.StatisticsTimeAvgWindow frames
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutEngine.DebugPrintOutputFloatBuffer(Veldrid.DeviceBuffer,System.String,System.Int32)">
            <summary>
            Read out some values from a DeviceBuffer and print them to the console. Just for debugging.
            </summary>
            <param name="buf">GPU DeviceBuffer to read</param>
            <param name="message">Caption for the printout</param>
            <param name="printCount">Max values to print</param>
        </member>
        <member name="M:rgat.GraphLayoutState.LockedUploadStateToVRAM(rgat.GraphLayoutState.CPUBuffers)">
            <summary>
            Must hold writer lock
            Refreshes VRAM layout buffers from cached RAM data
            </summary>
            <param name="_gd"></param>
        </member>
        <member name="M:rgat.GraphLayoutState.SyncRAMToVRAM(rgat.CONSTANTS.LayoutStyles.Style)">
            <summary>
            Upload the CPUBuffers for a specific layout into VRAM
            </summary>
            <param name="layout">The layout state to be uploaded</param>
        </member>
        <member name="M:rgat.GraphLayoutState.DownloadStateFromVRAM">
            <summary>
            must hold write lock
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutState.RegenerateEdgeDataBuffers(rgat.PlottedGraph)">
            <summary>
            Must hold writer lock before calling
            </summary>
        </member>
        <member name="M:rgat.GraphLayoutState.CreateEdgeDataBuffers(rgat.PlottedGraph)">
            <summary>
            This buffer list the index of every node each node is connected to
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:rgat.GraphLayoutState.CreateBlockMetadataBuffer(rgat.PlottedGraph)">
            Creates an array of metadata for basic blocks used for basic-block-centric graph layout
        </member>
        <member name="M:rgat.GraphLayoutState.AddNewNodesToComputeBuffers(System.Int32,rgat.PlottedGraph)">
            <summary>
            Must have upgradable readlock
            </summary>
            <param name="finalCount"></param>
        </member>
        <member name="M:rgat.GraphLayoutState.ResizeComputeBuffers(rgat.PlottedGraph,System.UInt32,Veldrid.CommandList,System.Collections.Generic.List{Veldrid.DeviceBuffer}@)">
            <summary>
            Must hold writer lock before calling
            </summary>
            <param name="bufferSize"></param>
        </member>
        <member name="M:rgat.GraphLayoutState.GetAttributes(rgat.CONSTANTS.LayoutStyles.Style,System.Single[]@)">
            <summary>
            Get the stored (RAM) attribute buffers 
            Must hold upgradable read lock
            </summary>
            <param name="layoutStyle">The saved plot</param>
            <param name="buf">The outout float buffer containing the retrieved values</param>
            <returns>true if found</returns>
        </member>
        <member name="T:rgat.GraphLayoutState.PositionResetStyle">
            <summary>
            Layout randomisation methods
            </summary>
        </member>
        <member name="F:rgat.GraphLayoutState.PositionResetStyle.Scatter">
            Scatter in a wide area
        </member>
        <member name="F:rgat.GraphLayoutState.PositionResetStyle.Explode">
            Gather in a tiny mass
        </member>
        <member name="F:rgat.GraphLayoutState.PositionResetStyle.Implode">
            Distribute around the edge
        </member>
        <member name="M:rgat.GraphLayoutState.Reset(rgat.GraphLayoutState.PositionResetStyle)">
            <summary>
            Cause a force directed plot to be randomly re-distributed in the
            specified style. Use this to try a different arrangement.
            </summary>
            <param name="resetMethod">The initial randomisation method</param>
        </member>
        <member name="M:rgat.GraphLayoutState.ExplodePositions(rgat.GraphLayoutState.CPUBuffers)">
            <summary>
            Distributes the nodes in a concentrated central mass so they repel each other out
            and then into arrangement
            </summary>
            <param name="layoutRAMBuffers">CPUBuffers of the plot to be randomised</param>
        </member>
        <member name="M:rgat.GraphLayoutState.ImplodePositions(rgat.GraphLayoutState.CPUBuffers)">
            <summary>
            Distributes the nodes on the edge of a sphere. 
            Attraction dominates the intial stages of layout
            </summary>
            <param name="layoutRAMBuffers">CPUBuffers of the plot to be randomised</param>
        </member>
        <member name="M:rgat.GraphLayoutState.ScatterPositions(rgat.GraphLayoutState.CPUBuffers)">
            <summary>
            Distributes the nodes randomly in a wide area. 
            Balance of attraction and repulsion will move them into position
            </summary>
            <param name="layoutRAMBuffers">CPUBuffers of the plot to be randomised</param>
        </member>
        <member name="M:rgat.Logging.APICALL.DeserialiseEffects(Newtonsoft.Json.Linq.JToken,rgat.Logging.APICALL)">
            <summary>
            Implementing effects as derived classes means safe deserialisation is quite clunky
            </summary>
            <param name="deTok">JToken of the APICALL details</param>
            <param name="apiObj">APICALL being deserialised</param>
            <returns></returns>
        </member>
        <member name="M:rgat.Logging.GetTextFilterCounts">
            <summary>
            Get the number of log messages recorded for each filter
            </summary>
            <returns> A dictionary of filter/count values</returns>
        </member>
        <member name="M:rgat.Logging.GetAlerts(System.Int32,rgat.Logging.LOG_EVENT[]@)">
            <summary>
            Get the most recent alerts/errors to inform the user about
            </summary>
            <param name="max">Maximum number to retrieve</param>
            <param name="alerts">An output array of alert events</param>
            <returns>The number of events returned</returns>
        </member>
        <member name="M:rgat.Logging.ClearAlertsBox">
            <summary>
            Acknowledge the latest alerts, stop displaying them on the UI
            </summary>
        </member>
        <member name="M:rgat.Logging.RecordLogEvent(System.String,rgat.Logging.LogFilterType,rgat.ProtoGraph,rgat.TraceRecord)">
            <summary>      
            Display a message in the logfile/message window.
            Will also be shown on the UI alert pane with the Alert/Error options
            </summary>
            <param name="text">Message to display</param>
            <param name="filter">The LogFilterType category of the log entry
            </param>
            <param name="graph">Graph this applies to. If aimed at a trace, just use any graph of the trace</param>
            <param name="trace">Process this applies to</param>     
        </member>
        <member name="M:rgat.Logging.RecordError(System.String,rgat.ProtoGraph,rgat.TraceRecord)">
            <summary>
            This is just an alias for  RecordLogEvent( filter: TextError);
            </summary>
            <param name="text">Error text</param>
            <param name="graph">Graph the error applies to (optional)</param>
            <param name="trace">Trace the error applies to (optional)</param>
        </member>
        <member name="M:rgat.NodeData.CreateLabel(rgat.PlottedGraph,System.Int32)">
            <summary>
            This creates the label drawn on the graph
            For symbol labels drawn in logs/analysis tabs see CreateColourisedSymbolCall
            </summary>
            <param name="plot"></param>
            <param name="specificCallIndex"></param>
        </member>
        <member name="M:rgat.NodeData.CreateSymbolLabel(rgat.ProtoGraph,System.Int32)">
            <summary>
            Create a label for an API call with symbol + arguments
            </summary>
            <param name="graph">The graph for the thread the call was made in</param>
            <param name="specificCallIndex">The index of the API call in the graph</param>
            <returns>The label</returns>
        </member>
        <member name="M:rgat.NodeData.CreateColourisedSymbolCall(rgat.ProtoGraph,System.Int32,rgat.WritableRgbaFloat,rgat.WritableRgbaFloat)">
            <summary>
            Produces a list of api string/colour tuples for displaying in trace analysis lists
            </summary>
            <param name="graph">The graph of the thread that made the call</param>
            <param name="specificCallIndex">The index of the call</param>
            <param name="colour1">The colour of the API text</param>
            <param name="colour2">The colour of the argument texts</param>
            <returns></returns>
        </member>
        <member name="T:rgat.OperationModes.BridgedRunner">
            <summary>
            Runs rgat as a headless proxy which allows an rgat instance on a remote machine to control tracing and receive raw trace data
            This does not require access to a GPU
            </summary>
        </member>
        <member name="M:rgat.OperationModes.BridgedRunner.RunHeadless(rgat.BridgeConnection)">
            <summary>
            Runs in headless mode which either connects to (command line -r) or waits for connections
            from (command line -p) a controlling UI mode rgat instance
            This does not use the GPU
            </summary>
        </member>
        <member name="M:rgat.OperationModes.BridgedRunner.ParseTraceMeta(System.Byte[],rgat.TraceRecord@,System.String[]@)">
            <summary>
            Parse internal control information used to setup/manage remote tracing
            </summary>
            <param name="infoBytes">The raw bytes of the data</param>
            <param name="trace">The trace the metadata applies to</param>
            <param name="metaparams">The metadata string items produced</param>
            <returns></returns>
        </member>
        <member name="T:rgat.OperationModes.CommandLineRunner">
            <summary>
            Runs rgat locally, without a GUI. Can be run without the GPU at all to generate a trace file, 
            or with the GPU to generate a video or image
            </summary>
        </member>
        <member name="T:rgat.OperationModes.ImGuiRunner">
            <summary>
            Creates and manages a Veldrid/ImGui based rgat GUI
            This requires access to a GPU (with Vulkan drivers)
            </summary>
        </member>
        <member name="M:rgat.OperationModes.ImGuiRunner.Run">
            <summary>
            Runs a standard UI window loop using ImGui
            </summary>
        </member>
        <member name="M:rgat.OperationModes.ImGuiRunner.InitEventHandlers">
            <summary>
            Should be called after config is loaded to benefit from keybind config
            </summary>
        </member>
        <member name="T:rgat.PlottedGraph">
            <summary>
            Represents the graphical rendering of a thread (ProtoGraph)
            </summary>
        </member>
        <member name="T:rgat.PlottedGraph.REPLAY_STATE">
            <summary>
            The animation replay state of this graph
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.REPLAY_STATE.Stopped">
            <summary>
            Not being replayed
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.REPLAY_STATE.Playing">
            <summary>
            Currently being played
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.REPLAY_STATE.PPaused">
            <summary>
            Paused in an animated state
            </summary>
        </member>
        <member name="F:rgat.PlottedGraph.REPLAY_STATE.Ended">
            <summary>
            Awaiting reset to a stopped state
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.#ctor(rgat.ProtoGraph,Veldrid.GraphicsDevice)">
            <summary>
            Create a plotted graph
            </summary>
            <param name="protoGraph">ProtoGraph of the thread</param>
            <param name="device">GraphicsDevice of the GPU this thread is being rendered on</param>
        </member>
        <member name="M:rgat.PlottedGraph.RenderGraph">
            <summary>
            Takes edges that have been through the trace processor worker and
            inserts them into the graphcis buffers for layout/drawing
            </summary>
        </member>
        <member name="P:rgat.PlottedGraph.RenderingComplete">
            <summary>
            Are all of the edges rendered
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.GetIllustrationEdges(System.Collections.Generic.List{System.UInt32}@)">
            <summary>
            Get geometry and colour of various non-instruction edges like highlights and wireframes
            </summary>
            <param name="edgeIndices">Output list of illustration edge indexes</param>
            <returns>Output edge geometry</returns>
        </member>
        <member name="M:rgat.PlottedGraph.WireframeStyle">
            <summary>
            The style of wireframe to draw for this graph
            </summary>
            <returns>Layout style</returns>
        </member>
        <member name="M:rgat.PlottedGraph.IncreaseTemperature">
            <summary>
            Increase the activity level of a force directed plot
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.IncreaseTemperature(System.Single)">
            <summary>
            Set the temperature of a force directed plot
            </summary>
            <param name="temp">Activity level</param>
        </member>
        <member name="M:rgat.PlottedGraph.GetEdgeRenderingData(System.Single[]@,System.Int32[]@,System.Int32[]@)">
            <summary>
            Create an array listing the index of every neighbour of every node
            Also initialises the edge strength array, 
            </summary>
            <returns>If there was data</returns>
        </member>
        <member name="M:rgat.PlottedGraph.GetNodeNeighbourDataOffsets">
            <summary>
            Lists the first and last+1 edge index that this node is connected to
            usage:
              selfedgei = edgeindices[index]
              firstedge, endedge = selfedgei.x, selfedgei.y
              uint neighbour = edgeData[firstedge to endedge-1];
               nodePosition = positions[neighbour];
            </summary>
            <returns></returns>
        </member>
        <member name="M:rgat.PlottedGraph.GetBlockRenderingMetadata">
            Creates an array of metadata for basic blocks used for basic-block-centric graph layout
        </member>
        <member name="M:rgat.PlottedGraph.CreateBlockMetadataBuf(System.Int32)">
            <summary>
            Creates an array of metadata for basic blocks used for basic-block-centric graph layout
            item[0] = blockID
            item[1] = offsetFromCenter; number of nodes ahead the center node is
            item[2] = centerPseudoBlockTopID; top of the block this node is in
            item[3] = centerPseudoBlockBaseID; base of the block this node is in
            </summary>
            <param name="nodecount">Number of nodes to add. This isn't just taken from nodelist because
            it may be intended for a texture of a certain size</param>
        </member>
        <member name="F:rgat.PlottedGraph.DrawnEdgesCount">
            <summary>
            Number of node->node edges that have been rendered
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.CreateBlankPresetLayout">
            <summary>
            Create a new blank preset layout for this graph
            </summary>
            <returns>Positions of the preset nodes</returns>
        </member>
        <member name="M:rgat.PlottedGraph.BeginNewLayout">
            <summary>
            Reset the layout tracking statistics and reset the temperature to a high value
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.ApplyMouseWheelDelta(System.Single)">
            <summary>
            Action the movement of the mousewheel to zoom the graph in or out
            </summary>
            <param name="delta">How far the mousewheel moved</param>
        </member>
        <member name="M:rgat.PlottedGraph.ApplyMouseDragDelta(System.Numerics.Vector2)">
            <summary>
            Move the camera in response to user mouse dragging
            </summary>
            <param name="delta">How far the mouse was dragged</param>
        </member>
        <member name="M:rgat.PlottedGraph.GetProjectionMatrix(System.Single)">
            <summary>
            Get the projection matrix of the current camera
            </summary>
            <param name="aspectRatio">Aspect Ratio</param>
            <returns></returns>
        </member>
        <member name="M:rgat.PlottedGraph.GetViewMatrix">
            <summary>
            Get the view matrix of the current camera position
            </summary>
            <returns>View Matrix</returns>
        </member>
        <member name="M:rgat.PlottedGraph.GetPreviewViewMatrix">
            <summary>
            Get the view matrix of the preview camera
            </summary>
            <returns>View Matrix</returns>
        </member>
        <member name="M:rgat.PlottedGraph.InitPreviewTexture(System.Numerics.Vector2,Veldrid.GraphicsDevice)">
            <summary>
            Create a new preview texture for the graph
            </summary>
            <param name="size">Size of the texture</param>
            <param name="gd">GraphicsDevice for to create the texture on</param>
        </member>
        <member name="M:rgat.PlottedGraph.AddNewEdgesToLayoutBuffers(System.Int32)">
            <summary>
            Add new edges to the layout buffer
            Must have upgradable read lock
            </summary>
            <param name="edgesCount"></param>
        </member>
        <member name="F:rgat.PlottedGraph.HighlightsChanged">
            <summary>
            Signals that the user has changed the highlighted nodes
            </summary>
        </member>
        <member name="M:rgat.PlottedGraph.GetCustomHighlightColour(System.Int32)">
            <summary>
            Get the highlight colour of the node
            </summary>
            <param name="nodeIdx">Index of the node</param>
            <returns>Colour of the node, if a custom colour was found, otherwise null</returns>
        </member>
        <member name="M:rgat.PlottedGraph.SetCustomHighlightColour(System.Int32,System.Numerics.Vector4)">
            <summary>
            Set a custom colour for the specified node
            </summary>
            <param name="nodeIdx">Index of the node</param>
            <param name="colour">Custom colour</param>
        </member>
        <member name="M:rgat.PlottedGraph.AddHighlightedNodes(System.Collections.Generic.List{System.UInt32},rgat.CONSTANTS.HighlightType)">
            <summary>
            Set the list of nodes as highlighted
            must hold read lock
            </summary>
            <param name="newnodeidxs">Nodes to highlight</param>
            <param name="highlightType">Type of highlight</param>
        </member>
        <member name="M:rgat.PlottedGraph.AddHighlightedAddress(System.UInt64)">
            <summary>
            Set an address as highlighted on the graph plot
            </summary>
            <param name="address">The address to highlight</param>
        </member>
        <member name="M:rgat.PlottedGraph.GetActiveNodeIndexes(System.Collections.Generic.List{System.UInt32}@,System.Collections.Generic.List{System.UInt32}@,System.UInt32[]@)">
            <summary>
            Get the indexes of any nodes that have > minimum alpha in animated mode
            Pulsed and deactivated nodes will only be fetched once by this call, the rest is handled by the attributes shader
            </summary>
            <param name="pulseNodes">Nodes which have been temporarily pulsed</param>
            <param name="lingerNodes">Nodes which remain brightened until cleared</param>
            <param name="deactivatedNodes">Nodes which are no longer active and faded to the base alpha, ready to be cleared from the active list</param>
        </member>
        <member name="M:rgat.PlottedGraph.SetFurthestNodeDimension(System.Int32,System.Single)">
            <summary>
            Sets the coordinate of the furthest node from the origin
            Used for drawing the force directed layout wireframe, where the distance of this node from the origin is used as the radius
            </summary>
            <param name="index">Index of the far node</param>
            <param name="farDimension">Greatest (absolute) coordinate of any node</param>
        </member>
        <member name="M:rgat.PlottedGraph.RecordComputeTime(System.Int64)">
            <summary>
            Update the graph computation time stats
            </summary>
            <param name="ms">Time taken for the latest round of velocity/position computation in Milliseconds</param>
        </member>
        <member name="F:rgat.PlottedGraph._graphStructureBalanced">
            <summary>
            The list of nodes and edges where each node connects to its partner and that node connects back
            This is used for the attraction velocity computation
            </summary>
                   
        </member>
        <member name="F:rgat.PlottedGraph._graphStructureLinear">
            <summary>
            The raw list of nodes with a one way edge they connect to
            This is used for drawing nodes and edges
            </summary>
        </member>
        <member name="M:rgat.ProcessRecord.ResolveSymbolAtAddress(System.UInt64,System.Int32@,System.String@,System.String@)">
            <summary>
            Takes an address in target process and looks up the path of the module and symbol at that address
            </summary>
            <param name="address">Address of potential symbol in loaded modules of target program</param>
            <param name="moduleID">rgat ID of module output here, if found.</param>
            <param name="module">Path of module is output here, if found</param>
            <param name="symbol">Name of symbol is output here, if found</param>
            <returns>True if both module and symbol string resolved. False otherwise.</returns>
        </member>
        <member name="M:rgat.ProcessRecord.GetModulePath(System.Int32)">
            <summary>
            Lookup the path of a module (ie DLL/library/binary) from the module ID
            </summary>
            <param name="GlobalModuleID">rgat internal ID for module in target process</param>
            <returns>string containing the module path</returns>
        </member>
        <member name="F:rgat.ProcessRecord.LoadedModulePaths">
            <summary>
            Filesystem paths of loaded modules
            </summary>
        </member>
        <member name="F:rgat.ProcessRecord.modIDTranslationVec">
            <summary>
            Translation list of local module IDs (known to the instrumentation engine) to global module IDs (known to rgat)
            </summary>
        </member>
        <member name="F:rgat.ProcessRecord.ModuleAPIReferences">
            <summary>
            API references of modules for API metadata operations
            </summary>
        </member>
        <member name="F:rgat.ProcessRecord.LoadedModuleBounds">
            <summary>
            Start and end memory addresses of each module
            </summary>
        </member>
        <member name="F:rgat.ProcessRecord.ModuleTraceStates">
            <summary>
            Whether each modules is instrumented or not
            </summary>
        </member>
        <member name="F:rgat.ProcessRecord.LoadedModuleCount">
            <summary>
            Number of loaded modules
            </summary>
        </member>
        <member name="M:rgat.ProcessRecord.GetModuleReference(System.Int32)">
            <summary>
            Get the unique API reference value for the specified module
            </summary>
            <param name="GlobalModuleID">Global module ID</param>
            <returns>An API reference value which can be used in API metadata lookup operations</returns>
        </member>
        <member name="T:rgat.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.APIDataWin">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.BuiltinJSONThemes">
            <summary>
              Looks up a localized string similar to [{
             &quot;CustomColours&quot;: {
               &quot;ePreviewText&quot;: 4294967295,
               &quot;ePreviewTextBackground&quot;: 1275068416,
               &quot;ePreviewPaneBorder&quot;: 4278190335,
               &quot;ePreviewPaneBackground&quot;: 4278979596,
               &quot;ePreviewZoomEnvelope&quot;: 2998055602,
               &quot;eHeat0Lowest&quot;: 2996502528,
               &quot;eHeat1&quot;: 4288355374,
               &quot;eHeat2&quot;: 4293027935,
               &quot;eHeat3&quot;: 4292841333,
               &quot;eHeat4&quot;: 8703,
               &quot;eHeat5&quot;: 4290036988,
               &quot;eHeat6&quot;: 4288190706,
               &quot;eHeat7&quot;: 4285230073,
               &quot;eHeat8&quot;: 4282401023,
               &quot;eHeat9Highest&quot;: 4278190335,
               &quot;eVisB [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.DllLoader32">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.DllLoader64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.Font_Awesome_5_Free_Regular_400">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.Font_Awesome_5_Free_Solid_900">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.NotoSansSC_Regular">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.PinTool32">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:rgat.Properties.Resources.PinTool64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="F:rgat.APICALLDATA.argList">
            <summary>
            a list of (index, value) tuples
            where 
                index: the position of the argument in the function prototype
                value: a string representation of the argument value
            </summary>
        </member>
        <member name="T:rgat.ProtoGraph">
            <summary>
            The data structure representing a recorded process thread
            </summary>
        </member>
        <member name="M:rgat.ProtoGraph.#ctor(rgat.TraceRecord,System.UInt32,System.UInt64,System.Boolean)">
            <summary>
            The data structure representing a recorded process thread
            </summary>
            <param name="runrecord">A TraceRecord for the process containing this thread</param>
            <param name="threadID">A Thread ID for the thread</param>
            <param name="startAddr">The first program counter address of the thread</param>
            <param name="terminated">Set to true if loading a saved trace</param>
        </member>
        <member name="F:rgat.ProtoGraph.ThreadID">
            <summary>
            The threads operating system assigned thread ID
            </summary>
        </member>
        <member name="F:rgat.ProtoGraph.StartAddress">
            <summary>
            The address of the first instruction executed by the thread
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.TraceReader">
            <summary>
            The worker which is reading trace data from the instrumented thread
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.TraceProcessor">
            <summary>
            The worker which is processing trace data from the instrumented thread
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.ProcessData">
            <summary>
            Process data shared by all threads (instruction disassembly, API metadata, etc)
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.TraceData">
            <summary>
            Describes the lifetime of the process, parent storage class for threads
            </summary>
        </member>
        <member name="P:rgat.ProtoGraph.ConstructedTime">
            <summary>
            When the thread was recorded, used as a unique identifier for threads
            </summary>
        </member>
        <member name="M:rgat.ProtoGraph.AddEdge_LastToTargetVert(System.Boolean,System.Int32,System.UInt64)">
            todo is this needed
            yes. yes it is.
        </member>
        <member name="M:rgat.ProtoGraph.PushAnimUpdate(rgat.ANIMATIONENTRY)">
            <summary>
            Store a processed trace data entry from instrumentation for replay
            </summary>
            <param name="entry">The ANIMATIONENTRY value</param>
        </member>
        <member name="T:rgat.rgatState">
            <summary>
            Handles Loading/Saving/Storage of traces and binaries. 
            Dumping ground for various utility objects such as signature scanners and video encoder.
            
            This is a holdover from the previous iteration of rgat that needs revamping or removing
            </summary>
        </member>
        <member name="F:rgat.rgatState.targets">
            <summary>
            Collection of binary targets that are loaded
            </summary>
        </member>
        <member name="F:rgat.rgatState.ActiveTarget">
            <summary>
            The currently selected binary target in the UI
            </summary>
        </member>
        <member name="F:rgat.rgatState.ActiveTrace">
            <summary>
            The trace currently active in the UI
            </summary>
        </member>
        <member name="P:rgat.rgatState.ActiveGraph">
            <summary>
            The graph currently active in the UI
            </summary>
        </member>
        <member name="F:rgat.rgatState._GraphicsDevice">
            <summary>
            A Veldrid GraphicsDevice reference available for general usage
            </summary>
        </member>
        <member name="F:rgat.rgatState.DIELib">
            <summary>
            The loaded Detect-It-Easy(.Net) engine
            </summary>
        </member>
        <member name="F:rgat.rgatState.YARALib">
            <summary>
            The loaded dnYara engine
            </summary>
        </member>
        <member name="F:rgat.rgatState.VideoRecorder">
            <summary>
            A VideoEncoder object which managed FFMpeg capture
            </summary>
        </member>
        <member name="F:rgat.rgatState.NetworkBridge">
            <summary>
            A BridgeConnection object which manages the remote tracing connection
            </summary>
        </member>
        <member name="P:rgat.rgatState.ConnectedToRemote">
            <summary>
            Is a network connection to another rgat instance active?
            </summary>
        </member>
        <member name="F:rgat.rgatState.LocalCoordinatorPipeName">
            <summary>
            The name of the named pipe for locally running pintools to connect to
            </summary>
        </member>
        <member name="F:rgat.rgatState.RecordVideoOnNextTrace">
            <summary>
            Set this to cause video recording to start on the next trace connection
            </summary>
        </member>
        <member name="F:rgat.rgatState.processCoordinatorThreadObj">
            <summary>
            A thread object which manages local trace connections over a named pipe
            </summary>
        </member>
        <member name="M:rgat.rgatState.InitVeldrid(Veldrid.GraphicsDevice)">
            <summary>
            Set the graphics devicefor widgets to use once it has been created 
            </summary>
            <param name="_gd">A Veldrid GraphicsDevice</param>
        </member>
        <member name="M:rgat.rgatState.LoadSignatures(System.IProgress{System.Single},System.Action)">
            <summary>
            A task which loads binary signatures such as YARA and DIE
            </summary>
            <param name="progress">An IProgress object for the UI process bar</param>
            <param name="completionCallback">An action to call when the load is complete</param>
        </member>
        <member name="F:rgat.rgatState._exitTokenSource">
            <summary>
            Cancellation tokens to be used by all rgat tasks to signal that rgat is shutting down
            Nothing should block in a way that will ignore this for more than a few hundred milliseconds
            </summary>
        </member>
        <member name="P:rgat.rgatState.rgatIsExiting">
            <summary>
            rgat is shutting down
            </summary>
        </member>
        <member name="P:rgat.rgatState.ExitToken">
            <summary>
            Get a cancellation token which will be cancelled when rgat is exiting
            </summary>
        </member>
        <member name="P:rgat.rgatState.TotalTraceCount">
            <summary>
            The number of traces which have executed in this rgat session
            Used by the UI to respond to incoming traces
            </summary>
        </member>
        <member name="M:rgat.rgatState.IncreaseLoadedTraceCount">
            <summary>
            Record the connection of a new trace
            </summary>
        </member>
        <member name="M:rgat.rgatState.Shutdown">
            <summary>
            Terminate all spawned processes and internal workers, then exit
            </summary>
        </member>
        <member name="M:rgat.rgatState.AddTargetByPath(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Add a new target to the list of loaded target binaries
            </summary>
            <param name="path">Filesystem path of target</param>
            <param name="arch">32 or 64 bits</param>
            <param name="isLibrary">The target is a DLL</param>
            <param name="makeActive">Set this as active in the UI</param>
            <returns>The BinaryTarget object describing the target</returns>
        </member>
        <member name="M:rgat.rgatState.AddRemoteTargetByPath(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a target binary for tracing by a remote rgat instance
            </summary>
            <param name="path">Filesystem path of target</param>
            <param name="hostAddr">Network address of the remote system</param>
            <param name="isLibrary">The target is a DLL</param>
            <param name="makeActive">Set this as active in the UI</param>
            <returns>The BinaryTarget object describing the target</returns>
        </member>
        <member name="M:rgat.rgatState.SetActiveTarget(System.String)">
            <summary>
            Set the binary target active in the UI
            </summary>
            <param name="path">Path of the target to activate</param>
        </member>
        <member name="M:rgat.rgatState.SetActiveTarget(rgat.BinaryTarget)">
            <summary>
            Set the binary target active in the UI
            </summary>
            <param name="newTarget">BinaryTarget object to activate</param>
        </member>
        <member name="M:rgat.rgatState.ClearActiveGraph">
            <summary>
            Deactivate the currently active graph in the UI
            </summary>
        </member>
        <member name="M:rgat.rgatState.SelectActiveTrace(rgat.TraceRecord,System.Boolean)">
            <summary>
            Set the currently active trace in the UI. If a specific trace is not specified
            the trace chosen depends on the 'newest' parameter
            </summary>
            <param name="trace">An optional TraceRecord to set as active</param>
            <param name="newest">If true, get the most recently spawned trace. If false get the first in the list (not guaranteed to be the oldest)</param>
        </member>
        <member name="M:rgat.rgatState.InitialiseTarget(Newtonsoft.Json.Linq.JObject,rgat.BinaryTarget@)">
            <summary>
            Initialise a loaded target binary from a trace save object
            </summary>
            <param name="saveJSON">A Newtonsoft JObject for the saved trace</param>
            <param name="targetResult">The created BinaryTarget object</param>
            <returns></returns>
        </member>
        <member name="M:rgat.rgatState.SwitchToGraph(rgat.PlottedGraph)">
            <summary>
            Causes the UI to switch to displaying a different thread graph
            </summary>
            <param name="graph">The PlottedGraph object of the graph to switch to. Null to clear the active graph.</param>
        </member>
        <member name="M:rgat.rgatState.ChooseActiveGraph">
            <summary>
            Cause the UI to choose an active graph to display, used when no graph is active
            </summary>
            <returns>If a graph is now active</returns>
        </member>
        <member name="M:rgat.rgatState.SelectGraphInActiveTrace">
            <summary>
            Activate a graph in the active trace
            Selects the last one that was active in this trace, or the first seen
            </summary>
        </member>
        <member name="M:rgat.rgatState.SetActiveGraph(rgat.PlottedGraph)">
            <summary>
            Sets a specific thread graph for the UI to display
            </summary>
            <param name="graph">A PlottedGraph object of the thread to display</param>
            <returns></returns>
        </member>
        <member name="M:rgat.rgatState.getActiveGraph">
            <summary>
            Get the currently active thread graph being shown by the UI
            </summary>
            <returns>The PlottedGraph object of the active thread graph</returns>
        </member>
        <member name="M:rgat.rgatState.LoadTraceRecord(Newtonsoft.Json.Linq.JObject,rgat.BinaryTarget,rgat.TraceRecord@)">
            <summary>
            Load a TraceRecord from a serialised trace JObject
            </summary>
            <param name="saveJSON">The Newtonsoft JObject of the saved trace</param>
            <param name="target">The binarytarget associated with the trace</param>
            <param name="traceResult">The output reconstructed TraceRecord</param>
            <returns>true if a new trace was created, false if failed or duplicated</returns>
        </member>
        <member name="M:rgat.rgatState.LoadTraceByPath(System.String,rgat.TraceRecord@)">
            <summary>
            Load a saved trace
            </summary>
            <param name="path">The fileystem path of the saved trace</param>
            <param name="trace">The loaded TraceRecord object</param>
            <returns></returns>
        </member>
        <member name="M:rgat.rgatState.ExtractChildTraceFilenames(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.List{System.String}@)">
            <summary>
            Get a list of child trace processes from a saved trace
            </summary>
            <param name="saveJSON">The Newtonsoft JObject of the saved trace</param>
            <param name="childrenFiles">A list of relative filesystem paths of child traces</param>
        </member>
        <member name="M:rgat.rgatState.LoadChildTraces(System.Collections.Generic.List{System.String},rgat.TraceRecord)">
            <summary>
            Loads child traces into a trace record
            </summary>
            <param name="childrenFiles">A list of relative filesystem paths of traces</param>
            <param name="trace">The parent TraceRecord of the child traces</param>
        </member>
        <member name="M:rgat.rgatState.SaveAllTargets">
            <summary>
            Cause all the traces of all active targets to be serialised to the trace directory
            </summary>
        </member>
        <member name="M:rgat.rgatState.SaveTarget(rgat.BinaryTarget)">
            <summary>
            Serialise all the traces of the the specified target to the trace directory
            </summary>
            <param name="targ">A binaryTarget to save traces of</param>
        </member>
        <member name="M:rgat.rgatState.ExportTraceAsPajek(rgat.TraceRecord,System.UInt32)">
            <summary>
            Export the current trace in the pajek format, a simple graph serialisation format that other graph layout programs accept
            </summary>
        </member>
        <member name="M:rgat.rgatState.RecordTestRunConnection(System.Int64,rgat.TraceRecord)">
            <summary>
            Store a reference to an incoming rgat test trace
            </summary>
            <param name="testID">The ID of the test</param>
            <param name="trace">The TraceRecord associated with the test</param>
        </member>
        <member name="M:rgat.rgatState.GetTestTrace(System.Int64,rgat.TraceRecord@)">
            <summary>
            Get the TraceRecord for a specific test ID
            </summary>
            <param name="testID">The test ID to retrieve</param>
            <param name="trace">The associated TraceRecord of the test</param>
            <returns>true if found, false otherwise</returns>
        </member>
        <member name="F:rgat.Testing.TestCase._TestRunRequirements">
            <summary>
            A list of conditions met by the entire test itself
            </summary>
        </member>
        <member name="F:rgat.Testing.TestCase._TraceRequirements">
            <summary>
            A nested list of requirements for each thread
            vague pseudo-json example [{C:6, [C:1, C:3]},{C:1, [C:7,C:12]}]
                This expects two processes, each producing 2 thread graphs
                One process must meet condtion C6 has threads meeting condition C1, the other meeting condition C3. 
                Ditto for the other process needing to meet condtion C1 with threads meeting conditions 7, 12
            </summary>
        </member>
        <member name="M:rgat.Testing.TestCase.LoadFinalRequirements(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Load the test passing conditions
            </summary>
            <param name="reqsObj">JObject of the unserialised conditions</param>
            <returns>Whether loading succeeded</returns>
        </member>
        <member name="M:rgat.Testing.TestCase.LoadTestRequirement(System.String,Newtonsoft.Json.Linq.JToken,rgat.Testing.TestRequirement@)">
            <summary>
            Load a JObject containing JToken value and string condition
            </summary>
            <param name="name">Name of the requirement</param>
            <param name="tok">JToken containing requirement</param>
            <param name="testRequirement">Result requirement object</param>
            <returns>true if it loaded without error</returns>
        </member>
        <member name="M:rgat.Widgets.QuickMenu.SetStateChangeCallback(System.Action{System.Boolean})">
            <summary>
            Called whenever the menu is opened/closed
            </summary>
            <param name="action">Function to call when opened/closed. Param is open/closed state.</param>
        </member>
        <member name="M:rgat.Widgets.QuickMenu.ActivateAction(rgat.Widgets.QuickMenu.ActionName,System.Boolean,System.String@)">
            <summary>
            Performs whatever action is assigned to a shortcut or button click
            </summary>
            <param name="actionName">Action associated with the icon or shortcut</param>
            <param name="hotKey">true if a keyboard shortcut, false if clicked</param>
            <param name="resultText">something to describe what happened on the key combo display</param>
            <returns>Whether the action was a non-menu 'action' which will trigger display of the keyboard combo used</returns>
        </member>
        <member name="F:rgat.Widgets.QuickMenu._RecentKeypress">
            <summary>
            Take a keypress that might be dealt with by the open quickmenu
            Return true if the quickmenu swallows is (ie: not to be used for other graph actions)
            </summary>
        </member>
        <member name="M:rgat.Widgets.VisualiserBar.Draw(System.Single,System.Single)">
            <summary>
            Draw the latest rendered visualiser bar
            Specified dimensions will be used in the next render
            </summary>
            <param name="width">Bar Width</param>
            <param name="height">Bar Height</param>
        </member>
        <member name="M:rgat.Widgets.VisualiserBar.DrawReplaySlider(System.Single,System.Single,rgat.PlottedGraph)">
            <summary>
            Draw a replay graph visualiser bar with animation sliders 
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="graph"></param>
        </member>
        <member name="M:rgat.Themes.InitUnsetCustomColours">
            <summary>
            Set any missing theme settings
            </summary>
        </member>
        <member name="T:rgat.BlockHandlerThread">
            <summary>
            A worker for disassembling the instructions sent by an instrumented trace
            </summary>
        </member>
        <member name="M:rgat.BlockHandlerThread.#ctor(rgat.BinaryTarget,rgat.TraceRecord,System.Nullable{System.UInt32})">
            <summary>
            Create a basic block processing worker
            </summary>
            <param name="binaryTarg">Binary target associated with the trace</param>
            <param name="runrecord">TraceRecord associated with the trace</param>
            <param name="remotePipeID">ID of the pipe receiving basic block data</param>
        </member>
        <member name="M:rgat.BlockHandlerThread.GetBlockPipeName(System.UInt32,System.Int64)">
            <summary>
            Get the name of the pipe to listen on
            </summary>
            <param name="PID">Process ID of the traced process</param>
            <param name="instanceID">Unique trace ID of the process</param>
            <returns>A named pipe name</returns>
        </member>
        <member name="M:rgat.BlockHandlerThread.Begin">
            <summary>
            Start the worker
            </summary>
        </member>
        <member name="M:rgat.BlockHandlerThread.Terminate">
            <summary>
            Cause the worker to stop and disconnect its pipe
            </summary>
        </member>
        <member name="M:rgat.BlockHandlerThread.AddRemoteBlockData(System.Byte[])">
            <summary>
            Add some raw basic block data to the worker queue
            </summary>
            <param name="data">Basic block data from the instrumentation</param>
        </member>
        <member name="T:rgat.Threads.PreviewRendererThread">
            <summary>
            A worker for rendering the preview graphs of all threads in a trace record
            </summary>
        </member>
        <member name="M:rgat.Threads.PreviewRendererThread.SetPreviewWidget(rgat.PreviewGraphsWidget)">
            <summary>
            Set by the GUI loading thread when the widget has been created
            </summary>
            <param name="widget"></param>
        </member>
        <member name="M:rgat.Threads.PreviewRendererThread.#ctor(rgat.TraceRecord)">
            <summary>
            Create a preview renderer
            </summary>
            <param name="_renderedTrace">The trace with graphs to be rendered</param>
        </member>
        <member name="M:rgat.Threads.PreviewRendererThread.Begin">
            <summary>
            Start this worker
            </summary>
        </member>
        <member name="M:rgat.Threads.PreviewRendererThread.ThreadProc">
            <summary>
            The worker thread entry point
            </summary>
        </member>
        <member name="T:rgat.ModuleHandlerThread">
            <summary>
            A worker for processing process and thread events for a trace as well as symbol data and trace commands
            </summary>
        </member>
        <member name="P:rgat.ModuleHandlerThread.RemoteCommandPipeID">
            <summary>
            The pipe ID of the command pipe connected to a remote tracing instance
            </summary>
        </member>
        <member name="M:rgat.ModuleHandlerThread.GetCommandPipeName(System.UInt32,System.Int64)">
            <summary>
            Get the pipe that the instrumentation tool will listen on for commands
            </summary>
            <param name="PID">Traced process ID</param>
            <param name="randID">Traced process unique ID</param>
            <returns>Command pipe name</returns>
        </member>
        <member name="M:rgat.ModuleHandlerThread.GetEventPipeName(System.UInt32,System.Int64)">
            <summary>
            Get the pipe that the instrumentation tool will send events to
            </summary>
            <param name="PID">Traced process ID</param>
            <param name="randID">Traced process unique ID</param>
            <returns>Event pipe name</returns>
        </member>
        <member name="M:rgat.ModuleHandlerThread.Terminate">
            <summary>
            Cause the worker to stop processing and disconnect its pipes
            </summary>
        </member>
        <member name="M:rgat.ModuleHandlerThread.AddRemoteEventData(System.Byte[])">
            <summary>
            Add event data recieved from a remotely traced process
            </summary>
            <param name="data">event data bytes</param>
        </member>
        <member name="M:rgat.ModuleHandlerThread.ProcessIncomingTraceCommand(System.Byte[])">
            <summary>
            Process a trace command sent by the remote GUI
            </summary>
            <param name="data">bytes of the command</param>
        </member>
        <member name="M:rgat.ModuleHandlerThread.RemoteCommandListener">
            <summary>
            This runs in headless mode, taking commands from the UI and passing them to the instrumentation tool
            in the target process
            </summary>
        </member>
        <member name="M:rgat.ModuleHandlerThread.RemoteEventListener(System.Object)">
            <summary>
            This is run by the UI in remote mode, passing trace events to the trace processor
            </summary>
            <param name="ProcessMessageobj"></param>
        </member>
        <member name="T:rgat.InstructionData">
            <summary>
            An object to describe a disasembled instruction
            </summary>
        </member>
        <member name="F:rgat.InstructionData.Mnemonic">
            <summary>
            Text of the instruction mnemonic
            </summary>
        </member>
        <member name="F:rgat.InstructionData.OpStr">
            <summary>
            Texe of the instruction operands
            </summary>
        </member>
        <member name="F:rgat.InstructionData.ContainingBlockIDs">
            <summary>
            All the basic blocks this instruction is a member of
            </summary>
        </member>
        <member name="F:rgat.InstructionData.InsText">
            <summary>
            Full text of the disassembled instruction
            </summary>
        </member>
        <member name="F:rgat.InstructionData.itype">
            <summary>
            Flow control type of the instruction
            </summary>
        </member>
        <member name="F:rgat.InstructionData.conditional">
            <summary>
            Is the instruction a conditional jump
            </summary>
        </member>
        <member name="F:rgat.InstructionData.dataEx">
            <summary>
            Is the instruction in a non-text area
            </summary>
        </member>
        <member name="F:rgat.InstructionData.hasSymbol">
            <summary>
            Does the address have a symbol associated with it
            </summary>
        </member>
        <member name="F:rgat.InstructionData.PossibleidataThunk">
            <summary>
            Could the instruction be an APi thunk
            </summary>
        </member>
        <member name="F:rgat.InstructionData.IsMPX">
            <summary>
            Is the instruction an MPX instruction
            </summary>
        </member>
        <member name="F:rgat.InstructionData.Address">
            <summary>
            Memory address of this instruction
            </summary>
        </member>
        <member name="F:rgat.InstructionData.branchAddress">
            <summary>
            If this instruction is a branch, this is the address the taken branch leads to
            </summary>
        </member>
        <member name="F:rgat.InstructionData.condDropAddress">
            <summary>
            Address of the instruction after this if there is no flow control
            </summary>
        </member>
        <member name="F:rgat.InstructionData.GlobalModNum">
            <summary>
            The module this instruction is located in
            </summary>
        </member>
        <member name="F:rgat.InstructionData.MutationIndex">
            <summary>
            Which version of the instruction at this address is this disassembly for
            </summary>
        </member>
        <member name="F:rgat.InstructionData.BlockBoundary">
            <summary>
            Is this instruction at the start or end of a basic block
            </summary>
        </member>
        <member name="F:rgat.InstructionData.Opcodes">
            <summary>
            The raw bytes of the instruction
            </summary>
        </member>
        <member name="P:rgat.InstructionData.NumBytes">
            <summary>
            How many bytes of opcodes the instruction has
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:rgat.InstructionData.ThreadVerts" -->
        <member name="M:rgat.TraceRecord.GetTimeLineEntries(System.Int64,System.Int32)">
            <summary>
            Fetches an array of the newest timeline events for the trace
            </summary>
            <param name="oldest">The oldest event to return</param>
            <param name="max">The most events to return. Default 5.</param>
            <returns>And array of TIMELINE_EVENT objects</returns>
        </member>
        <member name="M:rgat.TraceRecord.Save(System.DateTime,System.String@)">
            <summary>
            Save all the data needed to reconstruct a process run and all its thread graphs
            Recursively saves child processes
            </summary>
            <param name="traceStartedTime">The time the run was started</param>
            <param name="savePath">The filesystem path the trace was saved to</param>
            <returns>The path the trace was saved to</returns>
        </member>
        <member name="M:rgat.TraceRecord.ExportPajek(System.UInt32)">
            <summary>
            Export the current trace in the pajek format, a simple graph serialisation format that other graph layout programs accept
            </summary>
            <param name="TID">Thread ID of the graph to serialise</param>
        </member>
        <member name="M:rgat.TraceRecord.SendDebugStepOver(rgat.ProtoGraph)">
            <summary>
            Send a step command to execute a single instruction in a paused trace. Will step over function calls
            </summary>
            <param name="graph">The graph of the thread to step over</param>
        </member>
        <member name="M:rgat.TraceRecord.SendDebugStep(rgat.ProtoGraph)">
            <summary>
            Send a step command to execute a single instruction in a paused trace. Will step into function calls
            </summary>
            <param name="graph">The graph of the thread to step over</param>
        </member>
        <member name="P:rgat.TraceRecord.DisassemblyData">
            <summary>
            The disassembly associated with each address
            </summary>
        </member>
        <member name="P:rgat.TraceRecord.LaunchedTime">
            <summary>
            the time the user pressed start, not when the first process was seen
            </summary>
        </member>
        <member name="P:rgat.TraceRecord.Target">
            <summary>
            The BinaryTarget associated with this trace object
            </summary>
        </member>
        <member name="P:rgat.TraceRecord.IsRunning">
            <summary>
            false if the process is no longer being traced
            </summary>
        </member>
        <member name="P:rgat.TraceRecord.TraceState">
            <summary>
            The state of the trace process
            </summary>
        </member>
        <member name="P:rgat.TraceRecord.ProcessingRemaining">
            <summary>
            Are there any edges left to render, or might more trace data arrive?
            </summary>
        </member>
        <member name="M:rgat.TraceRecord.EvaluateProcessTestRequirement(rgat.Testing.TraceRequirements,rgat.Testing.TraceTestResultCommentary@)">
            <summary>
            See if the success requirements of a complete trace run are met 
            </summary>
            <param name="ptreq">Trace requirements object for the test</param>
            <param name="resultsobj">A Test results commentary object which describes how the test executed</param>
            <returns>The results of the test</returns>
        </member>
        <member name="M:rgat.Updates.ParseChangelogChanges(System.String)">
            <summary>
            Teturns a list of changes from the current version to a given changelog
            </summary>
            <param name="b64ChangelogMDContent">base64 encoded changelog.md file</param>
            <returns>plaintext formatted list of change types and changes</returns>
        </member>
        <member name="T:rgat.VeldridGraphBuffers.Position2DColour">
            <summary>
            This is used for shaders where the coordinate being referenced is contained in a texture. 
            The Texposition is the location (in the positions texture) to read and then draw geometry at with the specified colour.
            </summary>
        </member>
        <member name="T:rgat.VeldridGraphBuffers.GeomPositionColour">
            <summary>
            This just describes raw position and colour of geometry. Used for things unrelated to graph geometry like wireframes
            If Position.W == 1 then x,y are used as a positions texture reference as in TextureOffsetColour
            </summary>
        </member>
        <member name="P:rgat.VideoEncoder.RecordingStateChangeTimeAgo">
            <summary>
            How long ago the recording stopped/started in milliseconds
            </summary>
        </member>
        <member name="M:rgat.VideoEncoder.SaveImage(rgat.PlottedGraph,System.Drawing.Bitmap)">
            <summary>
            
            </summary>
            <param name="graph"></param>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="F:rgat.rgatUI.ExitFlag">
            <summary>
            Causes the UI to fall out of the update loop and initiate rgat shutdown
            </summary>
        </member>
        <member name="M:rgat.rgatUI.ActivateNotification">
            <summary>
            Tells the UI that something is happening on the menu bar so it should be displayed
            Currently its always displayed except on the splash screen
            </summary>
        </member>
        <member name="P:rgat.rgatUI.ExitRequested">
            <summary>
            rgat will exit when convenient
            This is only handled by the UI runner
            </summary>
        </member>
        <member name="M:rgat.rgatUI.DrawDialogs">
            <summary>
            Draws any open dialogs
            </summary>
            
            This isn't great but coming up with something more elegant can wait
        </member>
        <member name="M:rgat.rgatUI.DrawInnerRightMenuItems">
            <summary>
            Display media actions like recording and screen capture
            </summary>
        </member>
        <member name="M:rgat.rgatUI.DisplayScreenshotNotification">
            <summary>
            Displays the still camera icon on the menu bar
            Displays an animated rectangle drawing the eye to it, from the region captured
            UI.SCREENSHOT_ICON_LINGER_TIME controls how long the icon is displayed
            UI.SCREENSHOT_ANIMATION_RECT_SPEED controls how fast the rectangle travels/disappears
            </summary>
        </member>
        <member name="M:rgat.rgatUI.DisplayVideoRecordingNotification">
            <summary>
            Displays the video camera icon on the menu bar
            
            </summary>
        </member>
        <member name="M:rgat.rgatUI.DrawOuterRightMenuItems(System.Single@)">
            <summary>
            Displays less-used utilities like logs, tests 
            </summary>
            <param name="logMenuX">Set to the center X position of the log menu button, for alert animations</param>
        </member>
        <member name="M:rgat.rgatUI.NotifyScreenshotComplete(System.String)">
            <summary>
            Call this after a screenshot is complete to begin the screenshot display animation
            </summary>
            <param name="savePath">Path of the screenshot, for use in the mouseover text</param>
        </member>
        <member name="M:rgat.rgatUI.DrawTargetBar">
            <summary>
            Draws a dropdown allowing selection of one of the loaded target binaries
            </summary>
            <returns>true if at least one binary is loaded, otherwise false</returns>
        </member>
        <member name="M:rgat.GraphPlotWidget.SetStateChangeCallback(System.Action{System.Boolean})">
            <summary>
            Called whenever the widget opens/closes an inner dialog
            </summary>
            <param name="action">Function to call when dialog is opened/closed. Param is open/closed state.</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.RecreateGraphicsBuffers">
            <summary>
            Must have write lock to call
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.CenterGraphInFrameStep(System.Numerics.Matrix4x4,System.Single@)">
            <summary>
            Adjust the camera offset and zoom so that every node of the graph is in the frame
            Must have read lock to call
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.UpdateAndGetViewMatrix(System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Must hold read lock
            </summary>
            <param name="proj"></param>
            <param name="view"></param>
            <param name="world"></param>
        </member>
        <member name="M:rgat.GraphPlotWidget.Draw(System.Numerics.Vector2,rgat.PlottedGraph)">
            <summary>
            Write the rendered graph/HUD items to the draw list
            </summary>
            <param name="graphSize">Size of the graph area being drawn</param>
            <param name="graph">The graph being drawn</param>
        </member>
        <member name="F:rgat.GraphPlotWidget._edgesPipelineRelative">
            <summary>
            Edges pipeline = line list or line strp
            Points pipeline = visible nodes where we draw sphere/etc texture
            Picking pipleine = same as points but different data, not drawn to screen. Seperate shaders to reduce branching
            Font pipeline = triangles
            </summary>
        </member>
        <member name="F:rgat.GraphPlotWidget._edgesPipelineRaw">
            <summary>
            Edges pipeline = line list or line strp
            Points pipeline = visible nodes where we draw sphere/etc texture
            Picking pipleine = same as points but different data, not drawn to screen. Seperate shaders to reduce branching
            Font pipeline = triangles
            </summary>
        </member>
        <member name="F:rgat.GraphPlotWidget._pointsPipeline">
            <summary>
            Edges pipeline = line list or line strp
            Points pipeline = visible nodes where we draw sphere/etc texture
            Picking pipleine = same as points but different data, not drawn to screen. Seperate shaders to reduce branching
            Font pipeline = triangles
            </summary>
        </member>
        <member name="F:rgat.GraphPlotWidget._pickingPipeline">
            <summary>
            Edges pipeline = line list or line strp
            Points pipeline = visible nodes where we draw sphere/etc texture
            Picking pipleine = same as points but different data, not drawn to screen. Seperate shaders to reduce branching
            Font pipeline = triangles
            </summary>
        </member>
        <member name="F:rgat.GraphPlotWidget._fontPipeline">
            <summary>
            Edges pipeline = line list or line strp
            Points pipeline = visible nodes where we draw sphere/etc texture
            Picking pipleine = same as points but different data, not drawn to screen. Seperate shaders to reduce branching
            Font pipeline = triangles
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.GetOutputFramebuffer(Veldrid.Framebuffer@)">
            <summary>
            Get a framebuffer we can safely draw to
            Must hold upgradable read lock
            </summary>
            <param name="drawtarget"></param>
        </member>
        <member name="M:rgat.GraphPlotWidget.ReleaseOutputFramebuffer">
            <summary>
            Drawing is complete. Release the write lock so it can be displayed on the screen
            The other framebuffer will become locked for writing
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.GetLatestTexture(Veldrid.Texture@)">
            <summary>
            Get the most recently drawn framebuffer for displaying to the user
            </summary>
            <param name="graphtexture"></param>
        </member>
        <member name="M:rgat.GraphPlotWidget.SetupRenderingResources">
            <summary>
            Initialise graphics resources
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.RecreateOutputTextures">
            <summary>
            Re-initialise graphics resources, for use when the size of the widget has changed
            </summary>
        </member>
        <member name="F:rgat.GraphPlotWidget.GraphShaderParams.proj">
            public Matrix4x4 rotatedView;
        </member>
        <member name="M:rgat.GraphPlotWidget.ToggleRenderingMode(rgat.CONSTANTS.eRenderingMode)">
            <summary>
             Sets rendering mode to the specified mode
             If already using that mode, returns the mode to standard trace display
            </summary>
            <param name="newMode">Mode to toggle</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.SetRenderingMode(rgat.CONSTANTS.eRenderingMode)">
            <summary>
            Set the rendering mode to the specified mode
            </summary>
            <param name="newMode">Mode to activate</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.RenderString(System.String,System.UInt32,System.Single,ImGuiNET.ImFontPtr,System.Collections.Generic.List{rgat.GraphPlotWidget.fontStruc}@,System.UInt32,System.Single)">
            <summary>
            Convert a string to a List of fontStrucs describing the font glyphs to display the string
            The output is cached so this is not performed every frame
            </summary>
            <param name="inputString">Text to display</param>
            <param name="nodeIdx">Node associated with the text - used for positioning</param>
            <param name="fontScale">Text scaling factor</param>
            <param name="font">Font glyphs to use</param>
            <param name="stringVerts">Working list of glyph descriptors to add the generated fontStrucs to</param>
            <param name="colour">Text colour</param>
            <param name="yOff">Vertical offset for the glyphs</param> //todo think caching wrecks this
        </member>
        <member name="M:rgat.GraphPlotWidget.updateShaderParams(rgat.PlottedGraph,System.UInt32,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,Veldrid.CommandList)">
            <summary>
            Update graph drawing parameters used by the shaders
            </summary>
            <param name="graph">The graph being drawn</param>
            <param name="textureSize"></param>
            <param name="projection"></param>
            <param name="view"></param>
            <param name="world"></param>
            <param name="cl"></param>
            <returns></returns>
        </member>
        <member name="M:rgat.GraphPlotWidget.DrawGraph(Veldrid.CommandList,rgat.PlottedGraph)">
            <summary>
            Draws the various nodes, edges, captions and illustrations to the framebuffer for display
            </summary>
            <param name="cl">A veldrid commandlist, for use by this thread only</param>
            <param name="graph">The PlottedGraph to draw</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.DrawGraphImage">
            <summary>
            Add the most recently drawn framebuffer to the drawlist
            </summary>
            <returns>The texture for the drawn framebuffer. Useful for screenshots/videos</returns>
        </member>
        <member name="M:rgat.GraphPlotWidget.GetTextColour">
            <summary>
            Get the current text colour as a Vector4
            Wrapper for the memory unsafe ImGui API 
            </summary>
            <returns>A Vector4 describing the current text colour</returns>
        </member>
        <member name="M:rgat.GraphPlotWidget.DrawKeystrokes(System.Numerics.Vector2)">
            <summary>
            Draw the latest keyboard shortcut activations to the screen
            </summary>
            <param name="topLeft">Location on the screen to draw to</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.DisplayEventMessages(System.Numerics.Vector2)">
            <summary>
            Display trace events (process/thread stop/start) in the visualiser widget which are
            important but not important enough to be an application alert
            May also want to add certain APIs, especially network related
            </summary>
            <param name="pos">Position to draw to</param>
        </member>
        <member name="M:rgat.GraphPlotWidget.DrawHUD(System.Numerics.Vector2,rgat.PlottedGraph)">
            <summary>
            Draw in-widget buttons such as the layout selector, keybind activations and the quickmenu
            </summary>
            <param name="widgetSize"></param>
            <param name="activeGraph"></param>
        </member>
        <member name="M:rgat.GraphPlotWidget.GenerateMainGraph(Veldrid.CommandList)">
            <summary>
            Converts the node/edge positions computed by the layout engine into a rendered image of points and lines
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.HandleGraphUpdates">
            <summary>
            must hold upgradable reader lock
            </summary>
        </member>
        <member name="M:rgat.GraphPlotWidget.DoMouseNodePicking(Veldrid.GraphicsDevice)">
            <summary>
            Must hold read lock
            Check if the mouse position corresponds to a node ID in the picking texture
            If so - the mouse is over that nod
            </summary>
            <param name="_gd"></param>
        </member>
        <member name="M:rgat.PreviewGraphsWidget.CenterGraphInFrameStep(System.Single@,rgat.PlottedGraph)">
            <summary>
            Adjust the camera offset and zoom so that every node of the graph is in the frame
            </summary>
        </member>
        <member name="M:rgat.VisualiserTab.SetDialogStateChangeCallback(System.Action{System.Boolean})">
            <summary>
            Called whenever the widget opens/closes an inner dialog
            </summary>
            <param name="action">Function to call when dialog is opened/closed. Param is open/closed state.</param>
        </member>
        <member name="M:rgat.YARAScan.RecompileRules(System.String)">
            <summary>
            Compile all yara rules in the directory to memory and disk signature blobs, containing the respective rules enabled in the settings
            </summary>
            <param name="rulesDir">Directory containing directories full of yara rules</param>
            <returns>Paths to the sucessfully created rules files</returns>
        </member>
        <member name="T:ImGuiNET.ImGuiController">
            <summary>
            A modified version of Veldrid.ImGui's ImGuiRenderer.
            Manages input for ImGui and handles rendering ImGui's DrawLists with Veldrid.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.GetOrCreateImGuiBinding(Veldrid.ResourceFactory,Veldrid.TextureView,System.String)">
            <summary>
            Gets or creates a handle for a texture to be drawn with ImGui.
            Pass the returned handle to Image() or ImageButton().
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.GetOrCreateImGuiBinding(Veldrid.ResourceFactory,Veldrid.Texture,System.String)">
            <summary>
            Gets or creates a handle for a texture to be drawn with ImGui.
            Pass the returned handle to Image() or ImageButton().
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.GetImageResourceSet(System.IntPtr)">
            <summary>
            Retrieves the shader texture binding for the given helper handle.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.RecreateFontDeviceTexture(Veldrid.GraphicsDevice)">
            <summary>
            Recreates the device texture used to render text.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.Render(Veldrid.GraphicsDevice,Veldrid.CommandList)">
            <summary>
            Renders the ImGui draw list data.
            This method requires a <see cref="T:Veldrid.GraphicsDevice"/> because it may create new DeviceBuffers if the size of vertex
            or index data has increased beyond the capacity of the existing buffers.
            A <see cref="T:Veldrid.CommandList"/> is needed to submit drawing and resource update commands.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.Update(System.Single,Veldrid.InputSnapshot)">
            <summary>
            Updates ImGui input and IO configuration state.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.SetPerFrameImGuiData(System.Single)">
            <summary>
            Sets per-frame data based on the associated window.
            This is called by Update(float).
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.Dispose">
            <summary>
            Frees all graphics resources used by the renderer.
            </summary>
        </member>
        <member name="T:rgatFilePicker.FilePicker">
            <summary>
            A file selection dialog widgget
            </summary>
        </member>
        <member name="M:rgatFilePicker.FilePicker.#ctor(rgat.BridgeConnection)">
            <summary>
            Create a file selection dialog
            </summary>
            <param name="remoteMirror">Optional remote host this dialog is associated with</param>
        </member>
        <member name="M:rgatFilePicker.FilePicker.EmitFileSelectableEntry(System.String,rgatFilePicker.FilePicker.FileMetadata)">
            <summary>
            Draw a non-directory file in the file list
            </summary>
            <param name="path">Full path of the file</param>
            <param name="filemeta">FileMetadata information for the file</param>
            <returns>True if the entry was activated (select+enter or double clicked)</returns>
        </member>
        <member name="M:rgatFilePicker.FilePicker.InitCurrentDirInfo(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Fill out the listing of the remote directory
            lock must be held
            </summary>
            <param name="responseTok">JToken containing information about the current directory</param>
            <returns>true if the data was valid</returns>
        </member>
    </members>
</doc>
